//
// Autogenerated by Thrift
//
// DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
//
var Thrift = require('thrift').Thrift;
var fb303_ttypes = require('./fb303_types')


var FacebookService = require('./FacebookService')
var FacebookServiceClient = FacebookService.Client
var ttypes = require('./hive_metastore_types');
//HELPER FUNCTIONS AND STRUCTURES

var ThriftHiveMetastore_create_database_args = function(args){
  this.database = null
if( args != null ){  if (null != args.database)
  this.database = args.database
}}
ThriftHiveMetastore_create_database_args.prototype = {}
ThriftHiveMetastore_create_database_args.prototype.read = function(input){ 
  var ret = input.readStructBegin()
  while (1) 
  {
    var ret = input.readFieldBegin()
    var fname = ret.fname
    var ftype = ret.ftype
    var fid   = ret.fid
    if (ftype == Thrift.Type.STOP) 
      break
    switch(fid)
    {
      case 1:      if (ftype == Thrift.Type.STRUCT) {
        this.database = new ttypes.Database()
        this.database.read(input)
      } else {
        input.skip(ftype)
      }
      break
      default:
        input.skip(ftype)
    }
    input.readFieldEnd()
  }
  input.readStructEnd()
  return
}

ThriftHiveMetastore_create_database_args.prototype.write = function(output){ 
  output.writeStructBegin('ThriftHiveMetastore_create_database_args')
  if (null != this.database) {
    output.writeFieldBegin('database', Thrift.Type.STRUCT, 1)
    this.database.write(output)
    output.writeFieldEnd()
  }
  output.writeFieldStop()
  output.writeStructEnd()
  return
}

var ThriftHiveMetastore_create_database_result = function(args){
  this.o1 = null
  this.o2 = null
  this.o3 = null
if( args != null ){  if (null != args.o1)
  this.o1 = args.o1
  if (null != args.o2)
  this.o2 = args.o2
  if (null != args.o3)
  this.o3 = args.o3
}}
ThriftHiveMetastore_create_database_result.prototype = {}
ThriftHiveMetastore_create_database_result.prototype.read = function(input){ 
  var ret = input.readStructBegin()
  while (1) 
  {
    var ret = input.readFieldBegin()
    var fname = ret.fname
    var ftype = ret.ftype
    var fid   = ret.fid
    if (ftype == Thrift.Type.STOP) 
      break
    switch(fid)
    {
      case 1:      if (ftype == Thrift.Type.STRUCT) {
        this.o1 = new ttypes.AlreadyExistsException()
        this.o1.read(input)
      } else {
        input.skip(ftype)
      }
      break
      case 2:      if (ftype == Thrift.Type.STRUCT) {
        this.o2 = new ttypes.InvalidObjectException()
        this.o2.read(input)
      } else {
        input.skip(ftype)
      }
      break
      case 3:      if (ftype == Thrift.Type.STRUCT) {
        this.o3 = new ttypes.MetaException()
        this.o3.read(input)
      } else {
        input.skip(ftype)
      }
      break
      default:
        input.skip(ftype)
    }
    input.readFieldEnd()
  }
  input.readStructEnd()
  return
}

ThriftHiveMetastore_create_database_result.prototype.write = function(output){ 
  output.writeStructBegin('ThriftHiveMetastore_create_database_result')
  if (null != this.o1) {
    output.writeFieldBegin('o1', Thrift.Type.STRUCT, 1)
    this.o1.write(output)
    output.writeFieldEnd()
  }
  if (null != this.o2) {
    output.writeFieldBegin('o2', Thrift.Type.STRUCT, 2)
    this.o2.write(output)
    output.writeFieldEnd()
  }
  if (null != this.o3) {
    output.writeFieldBegin('o3', Thrift.Type.STRUCT, 3)
    this.o3.write(output)
    output.writeFieldEnd()
  }
  output.writeFieldStop()
  output.writeStructEnd()
  return
}

var ThriftHiveMetastore_get_database_args = function(args){
  this.name = null
if( args != null ){  if (null != args.name)
  this.name = args.name
}}
ThriftHiveMetastore_get_database_args.prototype = {}
ThriftHiveMetastore_get_database_args.prototype.read = function(input){ 
  var ret = input.readStructBegin()
  while (1) 
  {
    var ret = input.readFieldBegin()
    var fname = ret.fname
    var ftype = ret.ftype
    var fid   = ret.fid
    if (ftype == Thrift.Type.STOP) 
      break
    switch(fid)
    {
      case 1:      if (ftype == Thrift.Type.STRING) {
        this.name = input.readString()
      } else {
        input.skip(ftype)
      }
      break
      default:
        input.skip(ftype)
    }
    input.readFieldEnd()
  }
  input.readStructEnd()
  return
}

ThriftHiveMetastore_get_database_args.prototype.write = function(output){ 
  output.writeStructBegin('ThriftHiveMetastore_get_database_args')
  if (null != this.name) {
    output.writeFieldBegin('name', Thrift.Type.STRING, 1)
    output.writeString(this.name)
    output.writeFieldEnd()
  }
  output.writeFieldStop()
  output.writeStructEnd()
  return
}

var ThriftHiveMetastore_get_database_result = function(args){
  this.success = null
  this.o1 = null
  this.o2 = null
if( args != null ){  if (null != args.success)
  this.success = args.success
  if (null != args.o1)
  this.o1 = args.o1
  if (null != args.o2)
  this.o2 = args.o2
}}
ThriftHiveMetastore_get_database_result.prototype = {}
ThriftHiveMetastore_get_database_result.prototype.read = function(input){ 
  var ret = input.readStructBegin()
  while (1) 
  {
    var ret = input.readFieldBegin()
    var fname = ret.fname
    var ftype = ret.ftype
    var fid   = ret.fid
    if (ftype == Thrift.Type.STOP) 
      break
    switch(fid)
    {
      case 0:      if (ftype == Thrift.Type.STRUCT) {
        this.success = new ttypes.Database()
        this.success.read(input)
      } else {
        input.skip(ftype)
      }
      break
      case 1:      if (ftype == Thrift.Type.STRUCT) {
        this.o1 = new ttypes.NoSuchObjectException()
        this.o1.read(input)
      } else {
        input.skip(ftype)
      }
      break
      case 2:      if (ftype == Thrift.Type.STRUCT) {
        this.o2 = new ttypes.MetaException()
        this.o2.read(input)
      } else {
        input.skip(ftype)
      }
      break
      default:
        input.skip(ftype)
    }
    input.readFieldEnd()
  }
  input.readStructEnd()
  return
}

ThriftHiveMetastore_get_database_result.prototype.write = function(output){ 
  output.writeStructBegin('ThriftHiveMetastore_get_database_result')
  if (null != this.success) {
    output.writeFieldBegin('success', Thrift.Type.STRUCT, 0)
    this.success.write(output)
    output.writeFieldEnd()
  }
  if (null != this.o1) {
    output.writeFieldBegin('o1', Thrift.Type.STRUCT, 1)
    this.o1.write(output)
    output.writeFieldEnd()
  }
  if (null != this.o2) {
    output.writeFieldBegin('o2', Thrift.Type.STRUCT, 2)
    this.o2.write(output)
    output.writeFieldEnd()
  }
  output.writeFieldStop()
  output.writeStructEnd()
  return
}

var ThriftHiveMetastore_drop_database_args = function(args){
  this.name = null
  this.deleteData = null
if( args != null ){  if (null != args.name)
  this.name = args.name
  if (null != args.deleteData)
  this.deleteData = args.deleteData
}}
ThriftHiveMetastore_drop_database_args.prototype = {}
ThriftHiveMetastore_drop_database_args.prototype.read = function(input){ 
  var ret = input.readStructBegin()
  while (1) 
  {
    var ret = input.readFieldBegin()
    var fname = ret.fname
    var ftype = ret.ftype
    var fid   = ret.fid
    if (ftype == Thrift.Type.STOP) 
      break
    switch(fid)
    {
      case 1:      if (ftype == Thrift.Type.STRING) {
        this.name = input.readString()
      } else {
        input.skip(ftype)
      }
      break
      case 2:      if (ftype == Thrift.Type.BOOL) {
        this.deleteData = input.readBool()
      } else {
        input.skip(ftype)
      }
      break
      default:
        input.skip(ftype)
    }
    input.readFieldEnd()
  }
  input.readStructEnd()
  return
}

ThriftHiveMetastore_drop_database_args.prototype.write = function(output){ 
  output.writeStructBegin('ThriftHiveMetastore_drop_database_args')
  if (null != this.name) {
    output.writeFieldBegin('name', Thrift.Type.STRING, 1)
    output.writeString(this.name)
    output.writeFieldEnd()
  }
  if (null != this.deleteData) {
    output.writeFieldBegin('deleteData', Thrift.Type.BOOL, 2)
    output.writeBool(this.deleteData)
    output.writeFieldEnd()
  }
  output.writeFieldStop()
  output.writeStructEnd()
  return
}

var ThriftHiveMetastore_drop_database_result = function(args){
  this.o1 = null
  this.o2 = null
  this.o3 = null
if( args != null ){  if (null != args.o1)
  this.o1 = args.o1
  if (null != args.o2)
  this.o2 = args.o2
  if (null != args.o3)
  this.o3 = args.o3
}}
ThriftHiveMetastore_drop_database_result.prototype = {}
ThriftHiveMetastore_drop_database_result.prototype.read = function(input){ 
  var ret = input.readStructBegin()
  while (1) 
  {
    var ret = input.readFieldBegin()
    var fname = ret.fname
    var ftype = ret.ftype
    var fid   = ret.fid
    if (ftype == Thrift.Type.STOP) 
      break
    switch(fid)
    {
      case 1:      if (ftype == Thrift.Type.STRUCT) {
        this.o1 = new ttypes.NoSuchObjectException()
        this.o1.read(input)
      } else {
        input.skip(ftype)
      }
      break
      case 2:      if (ftype == Thrift.Type.STRUCT) {
        this.o2 = new ttypes.InvalidOperationException()
        this.o2.read(input)
      } else {
        input.skip(ftype)
      }
      break
      case 3:      if (ftype == Thrift.Type.STRUCT) {
        this.o3 = new ttypes.MetaException()
        this.o3.read(input)
      } else {
        input.skip(ftype)
      }
      break
      default:
        input.skip(ftype)
    }
    input.readFieldEnd()
  }
  input.readStructEnd()
  return
}

ThriftHiveMetastore_drop_database_result.prototype.write = function(output){ 
  output.writeStructBegin('ThriftHiveMetastore_drop_database_result')
  if (null != this.o1) {
    output.writeFieldBegin('o1', Thrift.Type.STRUCT, 1)
    this.o1.write(output)
    output.writeFieldEnd()
  }
  if (null != this.o2) {
    output.writeFieldBegin('o2', Thrift.Type.STRUCT, 2)
    this.o2.write(output)
    output.writeFieldEnd()
  }
  if (null != this.o3) {
    output.writeFieldBegin('o3', Thrift.Type.STRUCT, 3)
    this.o3.write(output)
    output.writeFieldEnd()
  }
  output.writeFieldStop()
  output.writeStructEnd()
  return
}

var ThriftHiveMetastore_get_databases_args = function(args){
  this.pattern = null
if( args != null ){  if (null != args.pattern)
  this.pattern = args.pattern
}}
ThriftHiveMetastore_get_databases_args.prototype = {}
ThriftHiveMetastore_get_databases_args.prototype.read = function(input){ 
  var ret = input.readStructBegin()
  while (1) 
  {
    var ret = input.readFieldBegin()
    var fname = ret.fname
    var ftype = ret.ftype
    var fid   = ret.fid
    if (ftype == Thrift.Type.STOP) 
      break
    switch(fid)
    {
      case 1:      if (ftype == Thrift.Type.STRING) {
        this.pattern = input.readString()
      } else {
        input.skip(ftype)
      }
      break
      default:
        input.skip(ftype)
    }
    input.readFieldEnd()
  }
  input.readStructEnd()
  return
}

ThriftHiveMetastore_get_databases_args.prototype.write = function(output){ 
  output.writeStructBegin('ThriftHiveMetastore_get_databases_args')
  if (null != this.pattern) {
    output.writeFieldBegin('pattern', Thrift.Type.STRING, 1)
    output.writeString(this.pattern)
    output.writeFieldEnd()
  }
  output.writeFieldStop()
  output.writeStructEnd()
  return
}

var ThriftHiveMetastore_get_databases_result = function(args){
  this.success = null
  this.o1 = null
if( args != null ){  if (null != args.success)
  this.success = args.success
  if (null != args.o1)
  this.o1 = args.o1
}}
ThriftHiveMetastore_get_databases_result.prototype = {}
ThriftHiveMetastore_get_databases_result.prototype.read = function(input){ 
  var ret = input.readStructBegin()
  while (1) 
  {
    var ret = input.readFieldBegin()
    var fname = ret.fname
    var ftype = ret.ftype
    var fid   = ret.fid
    if (ftype == Thrift.Type.STOP) 
      break
    switch(fid)
    {
      case 0:      if (ftype == Thrift.Type.LIST) {
        {
          var _size101 = 0
          var rtmp3
          this.success = []
          var _etype104 = 0
          rtmp3 = input.readListBegin()
          _etype104 = rtmp3.etype
          _size101 = rtmp3.size
          for (var _i105 = 0; _i105 < _size101; ++_i105)
          {
            var elem106 = null
            elem106 = input.readString()
            this.success.push(elem106)
          }
          input.readListEnd()
        }
      } else {
        input.skip(ftype)
      }
      break
      case 1:      if (ftype == Thrift.Type.STRUCT) {
        this.o1 = new ttypes.MetaException()
        this.o1.read(input)
      } else {
        input.skip(ftype)
      }
      break
      default:
        input.skip(ftype)
    }
    input.readFieldEnd()
  }
  input.readStructEnd()
  return
}

ThriftHiveMetastore_get_databases_result.prototype.write = function(output){ 
  output.writeStructBegin('ThriftHiveMetastore_get_databases_result')
  if (null != this.success) {
    output.writeFieldBegin('success', Thrift.Type.LIST, 0)
    {
      output.writeListBegin(Thrift.Type.STRING, this.success.length)
      {
        for(var iter107 in this.success)
        {
          if (this.success.hasOwnProperty(iter107))
          {
            iter107=this.success[iter107]
            output.writeString(iter107)
          }
        }
      }
      output.writeListEnd()
    }
    output.writeFieldEnd()
  }
  if (null != this.o1) {
    output.writeFieldBegin('o1', Thrift.Type.STRUCT, 1)
    this.o1.write(output)
    output.writeFieldEnd()
  }
  output.writeFieldStop()
  output.writeStructEnd()
  return
}

var ThriftHiveMetastore_get_all_databases_args = function(args){
}
ThriftHiveMetastore_get_all_databases_args.prototype = {}
ThriftHiveMetastore_get_all_databases_args.prototype.read = function(input){ 
  var ret = input.readStructBegin()
  while (1) 
  {
    var ret = input.readFieldBegin()
    var fname = ret.fname
    var ftype = ret.ftype
    var fid   = ret.fid
    if (ftype == Thrift.Type.STOP) 
      break
    switch(fid)
    {
      default:
        input.skip(ftype)
    }
    input.readFieldEnd()
  }
  input.readStructEnd()
  return
}

ThriftHiveMetastore_get_all_databases_args.prototype.write = function(output){ 
  output.writeStructBegin('ThriftHiveMetastore_get_all_databases_args')
  output.writeFieldStop()
  output.writeStructEnd()
  return
}

var ThriftHiveMetastore_get_all_databases_result = function(args){
  this.success = null
  this.o1 = null
if( args != null ){  if (null != args.success)
  this.success = args.success
  if (null != args.o1)
  this.o1 = args.o1
}}
ThriftHiveMetastore_get_all_databases_result.prototype = {}
ThriftHiveMetastore_get_all_databases_result.prototype.read = function(input){ 
  var ret = input.readStructBegin()
  while (1) 
  {
    var ret = input.readFieldBegin()
    var fname = ret.fname
    var ftype = ret.ftype
    var fid   = ret.fid
    if (ftype == Thrift.Type.STOP) 
      break
    switch(fid)
    {
      case 0:      if (ftype == Thrift.Type.LIST) {
        {
          var _size108 = 0
          var rtmp3
          this.success = []
          var _etype111 = 0
          rtmp3 = input.readListBegin()
          _etype111 = rtmp3.etype
          _size108 = rtmp3.size
          for (var _i112 = 0; _i112 < _size108; ++_i112)
          {
            var elem113 = null
            elem113 = input.readString()
            this.success.push(elem113)
          }
          input.readListEnd()
        }
      } else {
        input.skip(ftype)
      }
      break
      case 1:      if (ftype == Thrift.Type.STRUCT) {
        this.o1 = new ttypes.MetaException()
        this.o1.read(input)
      } else {
        input.skip(ftype)
      }
      break
      default:
        input.skip(ftype)
    }
    input.readFieldEnd()
  }
  input.readStructEnd()
  return
}

ThriftHiveMetastore_get_all_databases_result.prototype.write = function(output){ 
  output.writeStructBegin('ThriftHiveMetastore_get_all_databases_result')
  if (null != this.success) {
    output.writeFieldBegin('success', Thrift.Type.LIST, 0)
    {
      output.writeListBegin(Thrift.Type.STRING, this.success.length)
      {
        for(var iter114 in this.success)
        {
          if (this.success.hasOwnProperty(iter114))
          {
            iter114=this.success[iter114]
            output.writeString(iter114)
          }
        }
      }
      output.writeListEnd()
    }
    output.writeFieldEnd()
  }
  if (null != this.o1) {
    output.writeFieldBegin('o1', Thrift.Type.STRUCT, 1)
    this.o1.write(output)
    output.writeFieldEnd()
  }
  output.writeFieldStop()
  output.writeStructEnd()
  return
}

var ThriftHiveMetastore_get_type_args = function(args){
  this.name = null
if( args != null ){  if (null != args.name)
  this.name = args.name
}}
ThriftHiveMetastore_get_type_args.prototype = {}
ThriftHiveMetastore_get_type_args.prototype.read = function(input){ 
  var ret = input.readStructBegin()
  while (1) 
  {
    var ret = input.readFieldBegin()
    var fname = ret.fname
    var ftype = ret.ftype
    var fid   = ret.fid
    if (ftype == Thrift.Type.STOP) 
      break
    switch(fid)
    {
      case 1:      if (ftype == Thrift.Type.STRING) {
        this.name = input.readString()
      } else {
        input.skip(ftype)
      }
      break
      default:
        input.skip(ftype)
    }
    input.readFieldEnd()
  }
  input.readStructEnd()
  return
}

ThriftHiveMetastore_get_type_args.prototype.write = function(output){ 
  output.writeStructBegin('ThriftHiveMetastore_get_type_args')
  if (null != this.name) {
    output.writeFieldBegin('name', Thrift.Type.STRING, 1)
    output.writeString(this.name)
    output.writeFieldEnd()
  }
  output.writeFieldStop()
  output.writeStructEnd()
  return
}

var ThriftHiveMetastore_get_type_result = function(args){
  this.success = null
  this.o1 = null
  this.o2 = null
if( args != null ){  if (null != args.success)
  this.success = args.success
  if (null != args.o1)
  this.o1 = args.o1
  if (null != args.o2)
  this.o2 = args.o2
}}
ThriftHiveMetastore_get_type_result.prototype = {}
ThriftHiveMetastore_get_type_result.prototype.read = function(input){ 
  var ret = input.readStructBegin()
  while (1) 
  {
    var ret = input.readFieldBegin()
    var fname = ret.fname
    var ftype = ret.ftype
    var fid   = ret.fid
    if (ftype == Thrift.Type.STOP) 
      break
    switch(fid)
    {
      case 0:      if (ftype == Thrift.Type.STRUCT) {
        this.success = new ttypes.Type()
        this.success.read(input)
      } else {
        input.skip(ftype)
      }
      break
      case 1:      if (ftype == Thrift.Type.STRUCT) {
        this.o1 = new ttypes.MetaException()
        this.o1.read(input)
      } else {
        input.skip(ftype)
      }
      break
      case 2:      if (ftype == Thrift.Type.STRUCT) {
        this.o2 = new ttypes.NoSuchObjectException()
        this.o2.read(input)
      } else {
        input.skip(ftype)
      }
      break
      default:
        input.skip(ftype)
    }
    input.readFieldEnd()
  }
  input.readStructEnd()
  return
}

ThriftHiveMetastore_get_type_result.prototype.write = function(output){ 
  output.writeStructBegin('ThriftHiveMetastore_get_type_result')
  if (null != this.success) {
    output.writeFieldBegin('success', Thrift.Type.STRUCT, 0)
    this.success.write(output)
    output.writeFieldEnd()
  }
  if (null != this.o1) {
    output.writeFieldBegin('o1', Thrift.Type.STRUCT, 1)
    this.o1.write(output)
    output.writeFieldEnd()
  }
  if (null != this.o2) {
    output.writeFieldBegin('o2', Thrift.Type.STRUCT, 2)
    this.o2.write(output)
    output.writeFieldEnd()
  }
  output.writeFieldStop()
  output.writeStructEnd()
  return
}

var ThriftHiveMetastore_create_type_args = function(args){
  this.type = null
if( args != null ){  if (null != args.type)
  this.type = args.type
}}
ThriftHiveMetastore_create_type_args.prototype = {}
ThriftHiveMetastore_create_type_args.prototype.read = function(input){ 
  var ret = input.readStructBegin()
  while (1) 
  {
    var ret = input.readFieldBegin()
    var fname = ret.fname
    var ftype = ret.ftype
    var fid   = ret.fid
    if (ftype == Thrift.Type.STOP) 
      break
    switch(fid)
    {
      case 1:      if (ftype == Thrift.Type.STRUCT) {
        this.type = new ttypes.Type()
        this.type.read(input)
      } else {
        input.skip(ftype)
      }
      break
      default:
        input.skip(ftype)
    }
    input.readFieldEnd()
  }
  input.readStructEnd()
  return
}

ThriftHiveMetastore_create_type_args.prototype.write = function(output){ 
  output.writeStructBegin('ThriftHiveMetastore_create_type_args')
  if (null != this.type) {
    output.writeFieldBegin('type', Thrift.Type.STRUCT, 1)
    this.type.write(output)
    output.writeFieldEnd()
  }
  output.writeFieldStop()
  output.writeStructEnd()
  return
}

var ThriftHiveMetastore_create_type_result = function(args){
  this.success = null
  this.o1 = null
  this.o2 = null
  this.o3 = null
if( args != null ){  if (null != args.success)
  this.success = args.success
  if (null != args.o1)
  this.o1 = args.o1
  if (null != args.o2)
  this.o2 = args.o2
  if (null != args.o3)
  this.o3 = args.o3
}}
ThriftHiveMetastore_create_type_result.prototype = {}
ThriftHiveMetastore_create_type_result.prototype.read = function(input){ 
  var ret = input.readStructBegin()
  while (1) 
  {
    var ret = input.readFieldBegin()
    var fname = ret.fname
    var ftype = ret.ftype
    var fid   = ret.fid
    if (ftype == Thrift.Type.STOP) 
      break
    switch(fid)
    {
      case 0:      if (ftype == Thrift.Type.BOOL) {
        this.success = input.readBool()
      } else {
        input.skip(ftype)
      }
      break
      case 1:      if (ftype == Thrift.Type.STRUCT) {
        this.o1 = new ttypes.AlreadyExistsException()
        this.o1.read(input)
      } else {
        input.skip(ftype)
      }
      break
      case 2:      if (ftype == Thrift.Type.STRUCT) {
        this.o2 = new ttypes.InvalidObjectException()
        this.o2.read(input)
      } else {
        input.skip(ftype)
      }
      break
      case 3:      if (ftype == Thrift.Type.STRUCT) {
        this.o3 = new ttypes.MetaException()
        this.o3.read(input)
      } else {
        input.skip(ftype)
      }
      break
      default:
        input.skip(ftype)
    }
    input.readFieldEnd()
  }
  input.readStructEnd()
  return
}

ThriftHiveMetastore_create_type_result.prototype.write = function(output){ 
  output.writeStructBegin('ThriftHiveMetastore_create_type_result')
  if (null != this.success) {
    output.writeFieldBegin('success', Thrift.Type.BOOL, 0)
    output.writeBool(this.success)
    output.writeFieldEnd()
  }
  if (null != this.o1) {
    output.writeFieldBegin('o1', Thrift.Type.STRUCT, 1)
    this.o1.write(output)
    output.writeFieldEnd()
  }
  if (null != this.o2) {
    output.writeFieldBegin('o2', Thrift.Type.STRUCT, 2)
    this.o2.write(output)
    output.writeFieldEnd()
  }
  if (null != this.o3) {
    output.writeFieldBegin('o3', Thrift.Type.STRUCT, 3)
    this.o3.write(output)
    output.writeFieldEnd()
  }
  output.writeFieldStop()
  output.writeStructEnd()
  return
}

var ThriftHiveMetastore_drop_type_args = function(args){
  this.type = null
if( args != null ){  if (null != args.type)
  this.type = args.type
}}
ThriftHiveMetastore_drop_type_args.prototype = {}
ThriftHiveMetastore_drop_type_args.prototype.read = function(input){ 
  var ret = input.readStructBegin()
  while (1) 
  {
    var ret = input.readFieldBegin()
    var fname = ret.fname
    var ftype = ret.ftype
    var fid   = ret.fid
    if (ftype == Thrift.Type.STOP) 
      break
    switch(fid)
    {
      case 1:      if (ftype == Thrift.Type.STRING) {
        this.type = input.readString()
      } else {
        input.skip(ftype)
      }
      break
      default:
        input.skip(ftype)
    }
    input.readFieldEnd()
  }
  input.readStructEnd()
  return
}

ThriftHiveMetastore_drop_type_args.prototype.write = function(output){ 
  output.writeStructBegin('ThriftHiveMetastore_drop_type_args')
  if (null != this.type) {
    output.writeFieldBegin('type', Thrift.Type.STRING, 1)
    output.writeString(this.type)
    output.writeFieldEnd()
  }
  output.writeFieldStop()
  output.writeStructEnd()
  return
}

var ThriftHiveMetastore_drop_type_result = function(args){
  this.success = null
  this.o1 = null
  this.o2 = null
if( args != null ){  if (null != args.success)
  this.success = args.success
  if (null != args.o1)
  this.o1 = args.o1
  if (null != args.o2)
  this.o2 = args.o2
}}
ThriftHiveMetastore_drop_type_result.prototype = {}
ThriftHiveMetastore_drop_type_result.prototype.read = function(input){ 
  var ret = input.readStructBegin()
  while (1) 
  {
    var ret = input.readFieldBegin()
    var fname = ret.fname
    var ftype = ret.ftype
    var fid   = ret.fid
    if (ftype == Thrift.Type.STOP) 
      break
    switch(fid)
    {
      case 0:      if (ftype == Thrift.Type.BOOL) {
        this.success = input.readBool()
      } else {
        input.skip(ftype)
      }
      break
      case 1:      if (ftype == Thrift.Type.STRUCT) {
        this.o1 = new ttypes.MetaException()
        this.o1.read(input)
      } else {
        input.skip(ftype)
      }
      break
      case 2:      if (ftype == Thrift.Type.STRUCT) {
        this.o2 = new ttypes.NoSuchObjectException()
        this.o2.read(input)
      } else {
        input.skip(ftype)
      }
      break
      default:
        input.skip(ftype)
    }
    input.readFieldEnd()
  }
  input.readStructEnd()
  return
}

ThriftHiveMetastore_drop_type_result.prototype.write = function(output){ 
  output.writeStructBegin('ThriftHiveMetastore_drop_type_result')
  if (null != this.success) {
    output.writeFieldBegin('success', Thrift.Type.BOOL, 0)
    output.writeBool(this.success)
    output.writeFieldEnd()
  }
  if (null != this.o1) {
    output.writeFieldBegin('o1', Thrift.Type.STRUCT, 1)
    this.o1.write(output)
    output.writeFieldEnd()
  }
  if (null != this.o2) {
    output.writeFieldBegin('o2', Thrift.Type.STRUCT, 2)
    this.o2.write(output)
    output.writeFieldEnd()
  }
  output.writeFieldStop()
  output.writeStructEnd()
  return
}

var ThriftHiveMetastore_get_type_all_args = function(args){
  this.name = null
if( args != null ){  if (null != args.name)
  this.name = args.name
}}
ThriftHiveMetastore_get_type_all_args.prototype = {}
ThriftHiveMetastore_get_type_all_args.prototype.read = function(input){ 
  var ret = input.readStructBegin()
  while (1) 
  {
    var ret = input.readFieldBegin()
    var fname = ret.fname
    var ftype = ret.ftype
    var fid   = ret.fid
    if (ftype == Thrift.Type.STOP) 
      break
    switch(fid)
    {
      case 1:      if (ftype == Thrift.Type.STRING) {
        this.name = input.readString()
      } else {
        input.skip(ftype)
      }
      break
      default:
        input.skip(ftype)
    }
    input.readFieldEnd()
  }
  input.readStructEnd()
  return
}

ThriftHiveMetastore_get_type_all_args.prototype.write = function(output){ 
  output.writeStructBegin('ThriftHiveMetastore_get_type_all_args')
  if (null != this.name) {
    output.writeFieldBegin('name', Thrift.Type.STRING, 1)
    output.writeString(this.name)
    output.writeFieldEnd()
  }
  output.writeFieldStop()
  output.writeStructEnd()
  return
}

var ThriftHiveMetastore_get_type_all_result = function(args){
  this.success = null
  this.o2 = null
if( args != null ){  if (null != args.success)
  this.success = args.success
  if (null != args.o2)
  this.o2 = args.o2
}}
ThriftHiveMetastore_get_type_all_result.prototype = {}
ThriftHiveMetastore_get_type_all_result.prototype.read = function(input){ 
  var ret = input.readStructBegin()
  while (1) 
  {
    var ret = input.readFieldBegin()
    var fname = ret.fname
    var ftype = ret.ftype
    var fid   = ret.fid
    if (ftype == Thrift.Type.STOP) 
      break
    switch(fid)
    {
      case 0:      if (ftype == Thrift.Type.MAP) {
        {
          var _size115 = 0
          var rtmp3
          this.success = {}
          var _ktype116 = 0
          var _vtype117 = 0
          rtmp3 = input.readMapBegin()
          _ktype116= rtmp3.ktype
          _vtype117= rtmp3.vtype
          _size115= rtmp3.size
          for (var _i119 = 0; _i119 < _size115; ++_i119)
          {
            key120 = null
            val121 = null
            key120 = input.readString()
            val121 = new ttypes.Type()
            val121.read(input)
            this.success[key120] = val121
          }
          input.readMapEnd()
        }
      } else {
        input.skip(ftype)
      }
      break
      case 1:      if (ftype == Thrift.Type.STRUCT) {
        this.o2 = new ttypes.MetaException()
        this.o2.read(input)
      } else {
        input.skip(ftype)
      }
      break
      default:
        input.skip(ftype)
    }
    input.readFieldEnd()
  }
  input.readStructEnd()
  return
}

ThriftHiveMetastore_get_type_all_result.prototype.write = function(output){ 
  output.writeStructBegin('ThriftHiveMetastore_get_type_all_result')
  if (null != this.success) {
    output.writeFieldBegin('success', Thrift.Type.MAP, 0)
    {
      output.writeMapBegin(Thrift.Type.STRING, Thrift.Type.STRUCT, Thrift.objectLength(this.success))
      {
        for(var kiter122 in this.success)        {
          if (this.success.hasOwnProperty(kiter122))
          {
            var viter123 = this.success[kiter122]
            output.writeString(kiter122)
            viter123.write(output)
          }
        }
      }
      output.writeMapEnd()
    }
    output.writeFieldEnd()
  }
  if (null != this.o2) {
    output.writeFieldBegin('o2', Thrift.Type.STRUCT, 1)
    this.o2.write(output)
    output.writeFieldEnd()
  }
  output.writeFieldStop()
  output.writeStructEnd()
  return
}

var ThriftHiveMetastore_get_fields_args = function(args){
  this.db_name = null
  this.table_name = null
if( args != null ){  if (null != args.db_name)
  this.db_name = args.db_name
  if (null != args.table_name)
  this.table_name = args.table_name
}}
ThriftHiveMetastore_get_fields_args.prototype = {}
ThriftHiveMetastore_get_fields_args.prototype.read = function(input){ 
  var ret = input.readStructBegin()
  while (1) 
  {
    var ret = input.readFieldBegin()
    var fname = ret.fname
    var ftype = ret.ftype
    var fid   = ret.fid
    if (ftype == Thrift.Type.STOP) 
      break
    switch(fid)
    {
      case 1:      if (ftype == Thrift.Type.STRING) {
        this.db_name = input.readString()
      } else {
        input.skip(ftype)
      }
      break
      case 2:      if (ftype == Thrift.Type.STRING) {
        this.table_name = input.readString()
      } else {
        input.skip(ftype)
      }
      break
      default:
        input.skip(ftype)
    }
    input.readFieldEnd()
  }
  input.readStructEnd()
  return
}

ThriftHiveMetastore_get_fields_args.prototype.write = function(output){ 
  output.writeStructBegin('ThriftHiveMetastore_get_fields_args')
  if (null != this.db_name) {
    output.writeFieldBegin('db_name', Thrift.Type.STRING, 1)
    output.writeString(this.db_name)
    output.writeFieldEnd()
  }
  if (null != this.table_name) {
    output.writeFieldBegin('table_name', Thrift.Type.STRING, 2)
    output.writeString(this.table_name)
    output.writeFieldEnd()
  }
  output.writeFieldStop()
  output.writeStructEnd()
  return
}

var ThriftHiveMetastore_get_fields_result = function(args){
  this.success = null
  this.o1 = null
  this.o2 = null
  this.o3 = null
if( args != null ){  if (null != args.success)
  this.success = args.success
  if (null != args.o1)
  this.o1 = args.o1
  if (null != args.o2)
  this.o2 = args.o2
  if (null != args.o3)
  this.o3 = args.o3
}}
ThriftHiveMetastore_get_fields_result.prototype = {}
ThriftHiveMetastore_get_fields_result.prototype.read = function(input){ 
  var ret = input.readStructBegin()
  while (1) 
  {
    var ret = input.readFieldBegin()
    var fname = ret.fname
    var ftype = ret.ftype
    var fid   = ret.fid
    if (ftype == Thrift.Type.STOP) 
      break
    switch(fid)
    {
      case 0:      if (ftype == Thrift.Type.LIST) {
        {
          var _size124 = 0
          var rtmp3
          this.success = []
          var _etype127 = 0
          rtmp3 = input.readListBegin()
          _etype127 = rtmp3.etype
          _size124 = rtmp3.size
          for (var _i128 = 0; _i128 < _size124; ++_i128)
          {
            var elem129 = null
            elem129 = new ttypes.FieldSchema()
            elem129.read(input)
            this.success.push(elem129)
          }
          input.readListEnd()
        }
      } else {
        input.skip(ftype)
      }
      break
      case 1:      if (ftype == Thrift.Type.STRUCT) {
        this.o1 = new ttypes.MetaException()
        this.o1.read(input)
      } else {
        input.skip(ftype)
      }
      break
      case 2:      if (ftype == Thrift.Type.STRUCT) {
        this.o2 = new ttypes.UnknownTableException()
        this.o2.read(input)
      } else {
        input.skip(ftype)
      }
      break
      case 3:      if (ftype == Thrift.Type.STRUCT) {
        this.o3 = new ttypes.UnknownDBException()
        this.o3.read(input)
      } else {
        input.skip(ftype)
      }
      break
      default:
        input.skip(ftype)
    }
    input.readFieldEnd()
  }
  input.readStructEnd()
  return
}

ThriftHiveMetastore_get_fields_result.prototype.write = function(output){ 
  output.writeStructBegin('ThriftHiveMetastore_get_fields_result')
  if (null != this.success) {
    output.writeFieldBegin('success', Thrift.Type.LIST, 0)
    {
      output.writeListBegin(Thrift.Type.STRUCT, this.success.length)
      {
        for(var iter130 in this.success)
        {
          if (this.success.hasOwnProperty(iter130))
          {
            iter130=this.success[iter130]
            iter130.write(output)
          }
        }
      }
      output.writeListEnd()
    }
    output.writeFieldEnd()
  }
  if (null != this.o1) {
    output.writeFieldBegin('o1', Thrift.Type.STRUCT, 1)
    this.o1.write(output)
    output.writeFieldEnd()
  }
  if (null != this.o2) {
    output.writeFieldBegin('o2', Thrift.Type.STRUCT, 2)
    this.o2.write(output)
    output.writeFieldEnd()
  }
  if (null != this.o3) {
    output.writeFieldBegin('o3', Thrift.Type.STRUCT, 3)
    this.o3.write(output)
    output.writeFieldEnd()
  }
  output.writeFieldStop()
  output.writeStructEnd()
  return
}

var ThriftHiveMetastore_get_schema_args = function(args){
  this.db_name = null
  this.table_name = null
if( args != null ){  if (null != args.db_name)
  this.db_name = args.db_name
  if (null != args.table_name)
  this.table_name = args.table_name
}}
ThriftHiveMetastore_get_schema_args.prototype = {}
ThriftHiveMetastore_get_schema_args.prototype.read = function(input){ 
  var ret = input.readStructBegin()
  while (1) 
  {
    var ret = input.readFieldBegin()
    var fname = ret.fname
    var ftype = ret.ftype
    var fid   = ret.fid
    if (ftype == Thrift.Type.STOP) 
      break
    switch(fid)
    {
      case 1:      if (ftype == Thrift.Type.STRING) {
        this.db_name = input.readString()
      } else {
        input.skip(ftype)
      }
      break
      case 2:      if (ftype == Thrift.Type.STRING) {
        this.table_name = input.readString()
      } else {
        input.skip(ftype)
      }
      break
      default:
        input.skip(ftype)
    }
    input.readFieldEnd()
  }
  input.readStructEnd()
  return
}

ThriftHiveMetastore_get_schema_args.prototype.write = function(output){ 
  output.writeStructBegin('ThriftHiveMetastore_get_schema_args')
  if (null != this.db_name) {
    output.writeFieldBegin('db_name', Thrift.Type.STRING, 1)
    output.writeString(this.db_name)
    output.writeFieldEnd()
  }
  if (null != this.table_name) {
    output.writeFieldBegin('table_name', Thrift.Type.STRING, 2)
    output.writeString(this.table_name)
    output.writeFieldEnd()
  }
  output.writeFieldStop()
  output.writeStructEnd()
  return
}

var ThriftHiveMetastore_get_schema_result = function(args){
  this.success = null
  this.o1 = null
  this.o2 = null
  this.o3 = null
if( args != null ){  if (null != args.success)
  this.success = args.success
  if (null != args.o1)
  this.o1 = args.o1
  if (null != args.o2)
  this.o2 = args.o2
  if (null != args.o3)
  this.o3 = args.o3
}}
ThriftHiveMetastore_get_schema_result.prototype = {}
ThriftHiveMetastore_get_schema_result.prototype.read = function(input){ 
  var ret = input.readStructBegin()
  while (1) 
  {
    var ret = input.readFieldBegin()
    var fname = ret.fname
    var ftype = ret.ftype
    var fid   = ret.fid
    if (ftype == Thrift.Type.STOP) 
      break
    switch(fid)
    {
      case 0:      if (ftype == Thrift.Type.LIST) {
        {
          var _size131 = 0
          var rtmp3
          this.success = []
          var _etype134 = 0
          rtmp3 = input.readListBegin()
          _etype134 = rtmp3.etype
          _size131 = rtmp3.size
          for (var _i135 = 0; _i135 < _size131; ++_i135)
          {
            var elem136 = null
            elem136 = new ttypes.FieldSchema()
            elem136.read(input)
            this.success.push(elem136)
          }
          input.readListEnd()
        }
      } else {
        input.skip(ftype)
      }
      break
      case 1:      if (ftype == Thrift.Type.STRUCT) {
        this.o1 = new ttypes.MetaException()
        this.o1.read(input)
      } else {
        input.skip(ftype)
      }
      break
      case 2:      if (ftype == Thrift.Type.STRUCT) {
        this.o2 = new ttypes.UnknownTableException()
        this.o2.read(input)
      } else {
        input.skip(ftype)
      }
      break
      case 3:      if (ftype == Thrift.Type.STRUCT) {
        this.o3 = new ttypes.UnknownDBException()
        this.o3.read(input)
      } else {
        input.skip(ftype)
      }
      break
      default:
        input.skip(ftype)
    }
    input.readFieldEnd()
  }
  input.readStructEnd()
  return
}

ThriftHiveMetastore_get_schema_result.prototype.write = function(output){ 
  output.writeStructBegin('ThriftHiveMetastore_get_schema_result')
  if (null != this.success) {
    output.writeFieldBegin('success', Thrift.Type.LIST, 0)
    {
      output.writeListBegin(Thrift.Type.STRUCT, this.success.length)
      {
        for(var iter137 in this.success)
        {
          if (this.success.hasOwnProperty(iter137))
          {
            iter137=this.success[iter137]
            iter137.write(output)
          }
        }
      }
      output.writeListEnd()
    }
    output.writeFieldEnd()
  }
  if (null != this.o1) {
    output.writeFieldBegin('o1', Thrift.Type.STRUCT, 1)
    this.o1.write(output)
    output.writeFieldEnd()
  }
  if (null != this.o2) {
    output.writeFieldBegin('o2', Thrift.Type.STRUCT, 2)
    this.o2.write(output)
    output.writeFieldEnd()
  }
  if (null != this.o3) {
    output.writeFieldBegin('o3', Thrift.Type.STRUCT, 3)
    this.o3.write(output)
    output.writeFieldEnd()
  }
  output.writeFieldStop()
  output.writeStructEnd()
  return
}

var ThriftHiveMetastore_create_table_args = function(args){
  this.tbl = null
if( args != null ){  if (null != args.tbl)
  this.tbl = args.tbl
}}
ThriftHiveMetastore_create_table_args.prototype = {}
ThriftHiveMetastore_create_table_args.prototype.read = function(input){ 
  var ret = input.readStructBegin()
  while (1) 
  {
    var ret = input.readFieldBegin()
    var fname = ret.fname
    var ftype = ret.ftype
    var fid   = ret.fid
    if (ftype == Thrift.Type.STOP) 
      break
    switch(fid)
    {
      case 1:      if (ftype == Thrift.Type.STRUCT) {
        this.tbl = new ttypes.Table()
        this.tbl.read(input)
      } else {
        input.skip(ftype)
      }
      break
      default:
        input.skip(ftype)
    }
    input.readFieldEnd()
  }
  input.readStructEnd()
  return
}

ThriftHiveMetastore_create_table_args.prototype.write = function(output){ 
  output.writeStructBegin('ThriftHiveMetastore_create_table_args')
  if (null != this.tbl) {
    output.writeFieldBegin('tbl', Thrift.Type.STRUCT, 1)
    this.tbl.write(output)
    output.writeFieldEnd()
  }
  output.writeFieldStop()
  output.writeStructEnd()
  return
}

var ThriftHiveMetastore_create_table_result = function(args){
  this.o1 = null
  this.o2 = null
  this.o3 = null
  this.o4 = null
if( args != null ){  if (null != args.o1)
  this.o1 = args.o1
  if (null != args.o2)
  this.o2 = args.o2
  if (null != args.o3)
  this.o3 = args.o3
  if (null != args.o4)
  this.o4 = args.o4
}}
ThriftHiveMetastore_create_table_result.prototype = {}
ThriftHiveMetastore_create_table_result.prototype.read = function(input){ 
  var ret = input.readStructBegin()
  while (1) 
  {
    var ret = input.readFieldBegin()
    var fname = ret.fname
    var ftype = ret.ftype
    var fid   = ret.fid
    if (ftype == Thrift.Type.STOP) 
      break
    switch(fid)
    {
      case 1:      if (ftype == Thrift.Type.STRUCT) {
        this.o1 = new ttypes.AlreadyExistsException()
        this.o1.read(input)
      } else {
        input.skip(ftype)
      }
      break
      case 2:      if (ftype == Thrift.Type.STRUCT) {
        this.o2 = new ttypes.InvalidObjectException()
        this.o2.read(input)
      } else {
        input.skip(ftype)
      }
      break
      case 3:      if (ftype == Thrift.Type.STRUCT) {
        this.o3 = new ttypes.MetaException()
        this.o3.read(input)
      } else {
        input.skip(ftype)
      }
      break
      case 4:      if (ftype == Thrift.Type.STRUCT) {
        this.o4 = new ttypes.NoSuchObjectException()
        this.o4.read(input)
      } else {
        input.skip(ftype)
      }
      break
      default:
        input.skip(ftype)
    }
    input.readFieldEnd()
  }
  input.readStructEnd()
  return
}

ThriftHiveMetastore_create_table_result.prototype.write = function(output){ 
  output.writeStructBegin('ThriftHiveMetastore_create_table_result')
  if (null != this.o1) {
    output.writeFieldBegin('o1', Thrift.Type.STRUCT, 1)
    this.o1.write(output)
    output.writeFieldEnd()
  }
  if (null != this.o2) {
    output.writeFieldBegin('o2', Thrift.Type.STRUCT, 2)
    this.o2.write(output)
    output.writeFieldEnd()
  }
  if (null != this.o3) {
    output.writeFieldBegin('o3', Thrift.Type.STRUCT, 3)
    this.o3.write(output)
    output.writeFieldEnd()
  }
  if (null != this.o4) {
    output.writeFieldBegin('o4', Thrift.Type.STRUCT, 4)
    this.o4.write(output)
    output.writeFieldEnd()
  }
  output.writeFieldStop()
  output.writeStructEnd()
  return
}

var ThriftHiveMetastore_drop_table_args = function(args){
  this.dbname = null
  this.name = null
  this.deleteData = null
if( args != null ){  if (null != args.dbname)
  this.dbname = args.dbname
  if (null != args.name)
  this.name = args.name
  if (null != args.deleteData)
  this.deleteData = args.deleteData
}}
ThriftHiveMetastore_drop_table_args.prototype = {}
ThriftHiveMetastore_drop_table_args.prototype.read = function(input){ 
  var ret = input.readStructBegin()
  while (1) 
  {
    var ret = input.readFieldBegin()
    var fname = ret.fname
    var ftype = ret.ftype
    var fid   = ret.fid
    if (ftype == Thrift.Type.STOP) 
      break
    switch(fid)
    {
      case 1:      if (ftype == Thrift.Type.STRING) {
        this.dbname = input.readString()
      } else {
        input.skip(ftype)
      }
      break
      case 2:      if (ftype == Thrift.Type.STRING) {
        this.name = input.readString()
      } else {
        input.skip(ftype)
      }
      break
      case 3:      if (ftype == Thrift.Type.BOOL) {
        this.deleteData = input.readBool()
      } else {
        input.skip(ftype)
      }
      break
      default:
        input.skip(ftype)
    }
    input.readFieldEnd()
  }
  input.readStructEnd()
  return
}

ThriftHiveMetastore_drop_table_args.prototype.write = function(output){ 
  output.writeStructBegin('ThriftHiveMetastore_drop_table_args')
  if (null != this.dbname) {
    output.writeFieldBegin('dbname', Thrift.Type.STRING, 1)
    output.writeString(this.dbname)
    output.writeFieldEnd()
  }
  if (null != this.name) {
    output.writeFieldBegin('name', Thrift.Type.STRING, 2)
    output.writeString(this.name)
    output.writeFieldEnd()
  }
  if (null != this.deleteData) {
    output.writeFieldBegin('deleteData', Thrift.Type.BOOL, 3)
    output.writeBool(this.deleteData)
    output.writeFieldEnd()
  }
  output.writeFieldStop()
  output.writeStructEnd()
  return
}

var ThriftHiveMetastore_drop_table_result = function(args){
  this.o1 = null
  this.o3 = null
if( args != null ){  if (null != args.o1)
  this.o1 = args.o1
  if (null != args.o3)
  this.o3 = args.o3
}}
ThriftHiveMetastore_drop_table_result.prototype = {}
ThriftHiveMetastore_drop_table_result.prototype.read = function(input){ 
  var ret = input.readStructBegin()
  while (1) 
  {
    var ret = input.readFieldBegin()
    var fname = ret.fname
    var ftype = ret.ftype
    var fid   = ret.fid
    if (ftype == Thrift.Type.STOP) 
      break
    switch(fid)
    {
      case 1:      if (ftype == Thrift.Type.STRUCT) {
        this.o1 = new ttypes.NoSuchObjectException()
        this.o1.read(input)
      } else {
        input.skip(ftype)
      }
      break
      case 2:      if (ftype == Thrift.Type.STRUCT) {
        this.o3 = new ttypes.MetaException()
        this.o3.read(input)
      } else {
        input.skip(ftype)
      }
      break
      default:
        input.skip(ftype)
    }
    input.readFieldEnd()
  }
  input.readStructEnd()
  return
}

ThriftHiveMetastore_drop_table_result.prototype.write = function(output){ 
  output.writeStructBegin('ThriftHiveMetastore_drop_table_result')
  if (null != this.o1) {
    output.writeFieldBegin('o1', Thrift.Type.STRUCT, 1)
    this.o1.write(output)
    output.writeFieldEnd()
  }
  if (null != this.o3) {
    output.writeFieldBegin('o3', Thrift.Type.STRUCT, 2)
    this.o3.write(output)
    output.writeFieldEnd()
  }
  output.writeFieldStop()
  output.writeStructEnd()
  return
}

var ThriftHiveMetastore_get_tables_args = function(args){
  this.db_name = null
  this.pattern = null
if( args != null ){  if (null != args.db_name)
  this.db_name = args.db_name
  if (null != args.pattern)
  this.pattern = args.pattern
}}
ThriftHiveMetastore_get_tables_args.prototype = {}
ThriftHiveMetastore_get_tables_args.prototype.read = function(input){ 
  var ret = input.readStructBegin()
  while (1) 
  {
    var ret = input.readFieldBegin()
    var fname = ret.fname
    var ftype = ret.ftype
    var fid   = ret.fid
    if (ftype == Thrift.Type.STOP) 
      break
    switch(fid)
    {
      case 1:      if (ftype == Thrift.Type.STRING) {
        this.db_name = input.readString()
      } else {
        input.skip(ftype)
      }
      break
      case 2:      if (ftype == Thrift.Type.STRING) {
        this.pattern = input.readString()
      } else {
        input.skip(ftype)
      }
      break
      default:
        input.skip(ftype)
    }
    input.readFieldEnd()
  }
  input.readStructEnd()
  return
}

ThriftHiveMetastore_get_tables_args.prototype.write = function(output){ 
  output.writeStructBegin('ThriftHiveMetastore_get_tables_args')
  if (null != this.db_name) {
    output.writeFieldBegin('db_name', Thrift.Type.STRING, 1)
    output.writeString(this.db_name)
    output.writeFieldEnd()
  }
  if (null != this.pattern) {
    output.writeFieldBegin('pattern', Thrift.Type.STRING, 2)
    output.writeString(this.pattern)
    output.writeFieldEnd()
  }
  output.writeFieldStop()
  output.writeStructEnd()
  return
}

var ThriftHiveMetastore_get_tables_result = function(args){
  this.success = null
  this.o1 = null
if( args != null ){  if (null != args.success)
  this.success = args.success
  if (null != args.o1)
  this.o1 = args.o1
}}
ThriftHiveMetastore_get_tables_result.prototype = {}
ThriftHiveMetastore_get_tables_result.prototype.read = function(input){ 
  var ret = input.readStructBegin()
  while (1) 
  {
    var ret = input.readFieldBegin()
    var fname = ret.fname
    var ftype = ret.ftype
    var fid   = ret.fid
    if (ftype == Thrift.Type.STOP) 
      break
    switch(fid)
    {
      case 0:      if (ftype == Thrift.Type.LIST) {
        {
          var _size138 = 0
          var rtmp3
          this.success = []
          var _etype141 = 0
          rtmp3 = input.readListBegin()
          _etype141 = rtmp3.etype
          _size138 = rtmp3.size
          for (var _i142 = 0; _i142 < _size138; ++_i142)
          {
            var elem143 = null
            elem143 = input.readString()
            this.success.push(elem143)
          }
          input.readListEnd()
        }
      } else {
        input.skip(ftype)
      }
      break
      case 1:      if (ftype == Thrift.Type.STRUCT) {
        this.o1 = new ttypes.MetaException()
        this.o1.read(input)
      } else {
        input.skip(ftype)
      }
      break
      default:
        input.skip(ftype)
    }
    input.readFieldEnd()
  }
  input.readStructEnd()
  return
}

ThriftHiveMetastore_get_tables_result.prototype.write = function(output){ 
  output.writeStructBegin('ThriftHiveMetastore_get_tables_result')
  if (null != this.success) {
    output.writeFieldBegin('success', Thrift.Type.LIST, 0)
    {
      output.writeListBegin(Thrift.Type.STRING, this.success.length)
      {
        for(var iter144 in this.success)
        {
          if (this.success.hasOwnProperty(iter144))
          {
            iter144=this.success[iter144]
            output.writeString(iter144)
          }
        }
      }
      output.writeListEnd()
    }
    output.writeFieldEnd()
  }
  if (null != this.o1) {
    output.writeFieldBegin('o1', Thrift.Type.STRUCT, 1)
    this.o1.write(output)
    output.writeFieldEnd()
  }
  output.writeFieldStop()
  output.writeStructEnd()
  return
}

var ThriftHiveMetastore_get_all_tables_args = function(args){
  this.db_name = null
if( args != null ){  if (null != args.db_name)
  this.db_name = args.db_name
}}
ThriftHiveMetastore_get_all_tables_args.prototype = {}
ThriftHiveMetastore_get_all_tables_args.prototype.read = function(input){ 
  var ret = input.readStructBegin()
  while (1) 
  {
    var ret = input.readFieldBegin()
    var fname = ret.fname
    var ftype = ret.ftype
    var fid   = ret.fid
    if (ftype == Thrift.Type.STOP) 
      break
    switch(fid)
    {
      case 1:      if (ftype == Thrift.Type.STRING) {
        this.db_name = input.readString()
      } else {
        input.skip(ftype)
      }
      break
      default:
        input.skip(ftype)
    }
    input.readFieldEnd()
  }
  input.readStructEnd()
  return
}

ThriftHiveMetastore_get_all_tables_args.prototype.write = function(output){ 
  output.writeStructBegin('ThriftHiveMetastore_get_all_tables_args')
  if (null != this.db_name) {
    output.writeFieldBegin('db_name', Thrift.Type.STRING, 1)
    output.writeString(this.db_name)
    output.writeFieldEnd()
  }
  output.writeFieldStop()
  output.writeStructEnd()
  return
}

var ThriftHiveMetastore_get_all_tables_result = function(args){
  this.success = null
  this.o1 = null
if( args != null ){  if (null != args.success)
  this.success = args.success
  if (null != args.o1)
  this.o1 = args.o1
}}
ThriftHiveMetastore_get_all_tables_result.prototype = {}
ThriftHiveMetastore_get_all_tables_result.prototype.read = function(input){ 
  var ret = input.readStructBegin()
  while (1) 
  {
    var ret = input.readFieldBegin()
    var fname = ret.fname
    var ftype = ret.ftype
    var fid   = ret.fid
    if (ftype == Thrift.Type.STOP) 
      break
    switch(fid)
    {
      case 0:      if (ftype == Thrift.Type.LIST) {
        {
          var _size145 = 0
          var rtmp3
          this.success = []
          var _etype148 = 0
          rtmp3 = input.readListBegin()
          _etype148 = rtmp3.etype
          _size145 = rtmp3.size
          for (var _i149 = 0; _i149 < _size145; ++_i149)
          {
            var elem150 = null
            elem150 = input.readString()
            this.success.push(elem150)
          }
          input.readListEnd()
        }
      } else {
        input.skip(ftype)
      }
      break
      case 1:      if (ftype == Thrift.Type.STRUCT) {
        this.o1 = new ttypes.MetaException()
        this.o1.read(input)
      } else {
        input.skip(ftype)
      }
      break
      default:
        input.skip(ftype)
    }
    input.readFieldEnd()
  }
  input.readStructEnd()
  return
}

ThriftHiveMetastore_get_all_tables_result.prototype.write = function(output){ 
  output.writeStructBegin('ThriftHiveMetastore_get_all_tables_result')
  if (null != this.success) {
    output.writeFieldBegin('success', Thrift.Type.LIST, 0)
    {
      output.writeListBegin(Thrift.Type.STRING, this.success.length)
      {
        for(var iter151 in this.success)
        {
          if (this.success.hasOwnProperty(iter151))
          {
            iter151=this.success[iter151]
            output.writeString(iter151)
          }
        }
      }
      output.writeListEnd()
    }
    output.writeFieldEnd()
  }
  if (null != this.o1) {
    output.writeFieldBegin('o1', Thrift.Type.STRUCT, 1)
    this.o1.write(output)
    output.writeFieldEnd()
  }
  output.writeFieldStop()
  output.writeStructEnd()
  return
}

var ThriftHiveMetastore_get_table_args = function(args){
  this.dbname = null
  this.tbl_name = null
if( args != null ){  if (null != args.dbname)
  this.dbname = args.dbname
  if (null != args.tbl_name)
  this.tbl_name = args.tbl_name
}}
ThriftHiveMetastore_get_table_args.prototype = {}
ThriftHiveMetastore_get_table_args.prototype.read = function(input){ 
  var ret = input.readStructBegin()
  while (1) 
  {
    var ret = input.readFieldBegin()
    var fname = ret.fname
    var ftype = ret.ftype
    var fid   = ret.fid
    if (ftype == Thrift.Type.STOP) 
      break
    switch(fid)
    {
      case 1:      if (ftype == Thrift.Type.STRING) {
        this.dbname = input.readString()
      } else {
        input.skip(ftype)
      }
      break
      case 2:      if (ftype == Thrift.Type.STRING) {
        this.tbl_name = input.readString()
      } else {
        input.skip(ftype)
      }
      break
      default:
        input.skip(ftype)
    }
    input.readFieldEnd()
  }
  input.readStructEnd()
  return
}

ThriftHiveMetastore_get_table_args.prototype.write = function(output){ 
  output.writeStructBegin('ThriftHiveMetastore_get_table_args')
  if (null != this.dbname) {
    output.writeFieldBegin('dbname', Thrift.Type.STRING, 1)
    output.writeString(this.dbname)
    output.writeFieldEnd()
  }
  if (null != this.tbl_name) {
    output.writeFieldBegin('tbl_name', Thrift.Type.STRING, 2)
    output.writeString(this.tbl_name)
    output.writeFieldEnd()
  }
  output.writeFieldStop()
  output.writeStructEnd()
  return
}

var ThriftHiveMetastore_get_table_result = function(args){
  this.success = null
  this.o1 = null
  this.o2 = null
if( args != null ){  if (null != args.success)
  this.success = args.success
  if (null != args.o1)
  this.o1 = args.o1
  if (null != args.o2)
  this.o2 = args.o2
}}
ThriftHiveMetastore_get_table_result.prototype = {}
ThriftHiveMetastore_get_table_result.prototype.read = function(input){ 
  var ret = input.readStructBegin()
  while (1) 
  {
    var ret = input.readFieldBegin()
    var fname = ret.fname
    var ftype = ret.ftype
    var fid   = ret.fid
    if (ftype == Thrift.Type.STOP) 
      break
    switch(fid)
    {
      case 0:      if (ftype == Thrift.Type.STRUCT) {
        this.success = new ttypes.Table()
        this.success.read(input)
      } else {
        input.skip(ftype)
      }
      break
      case 1:      if (ftype == Thrift.Type.STRUCT) {
        this.o1 = new ttypes.MetaException()
        this.o1.read(input)
      } else {
        input.skip(ftype)
      }
      break
      case 2:      if (ftype == Thrift.Type.STRUCT) {
        this.o2 = new ttypes.NoSuchObjectException()
        this.o2.read(input)
      } else {
        input.skip(ftype)
      }
      break
      default:
        input.skip(ftype)
    }
    input.readFieldEnd()
  }
  input.readStructEnd()
  return
}

ThriftHiveMetastore_get_table_result.prototype.write = function(output){ 
  output.writeStructBegin('ThriftHiveMetastore_get_table_result')
  if (null != this.success) {
    output.writeFieldBegin('success', Thrift.Type.STRUCT, 0)
    this.success.write(output)
    output.writeFieldEnd()
  }
  if (null != this.o1) {
    output.writeFieldBegin('o1', Thrift.Type.STRUCT, 1)
    this.o1.write(output)
    output.writeFieldEnd()
  }
  if (null != this.o2) {
    output.writeFieldBegin('o2', Thrift.Type.STRUCT, 2)
    this.o2.write(output)
    output.writeFieldEnd()
  }
  output.writeFieldStop()
  output.writeStructEnd()
  return
}

var ThriftHiveMetastore_alter_table_args = function(args){
  this.dbname = null
  this.tbl_name = null
  this.new_tbl = null
if( args != null ){  if (null != args.dbname)
  this.dbname = args.dbname
  if (null != args.tbl_name)
  this.tbl_name = args.tbl_name
  if (null != args.new_tbl)
  this.new_tbl = args.new_tbl
}}
ThriftHiveMetastore_alter_table_args.prototype = {}
ThriftHiveMetastore_alter_table_args.prototype.read = function(input){ 
  var ret = input.readStructBegin()
  while (1) 
  {
    var ret = input.readFieldBegin()
    var fname = ret.fname
    var ftype = ret.ftype
    var fid   = ret.fid
    if (ftype == Thrift.Type.STOP) 
      break
    switch(fid)
    {
      case 1:      if (ftype == Thrift.Type.STRING) {
        this.dbname = input.readString()
      } else {
        input.skip(ftype)
      }
      break
      case 2:      if (ftype == Thrift.Type.STRING) {
        this.tbl_name = input.readString()
      } else {
        input.skip(ftype)
      }
      break
      case 3:      if (ftype == Thrift.Type.STRUCT) {
        this.new_tbl = new ttypes.Table()
        this.new_tbl.read(input)
      } else {
        input.skip(ftype)
      }
      break
      default:
        input.skip(ftype)
    }
    input.readFieldEnd()
  }
  input.readStructEnd()
  return
}

ThriftHiveMetastore_alter_table_args.prototype.write = function(output){ 
  output.writeStructBegin('ThriftHiveMetastore_alter_table_args')
  if (null != this.dbname) {
    output.writeFieldBegin('dbname', Thrift.Type.STRING, 1)
    output.writeString(this.dbname)
    output.writeFieldEnd()
  }
  if (null != this.tbl_name) {
    output.writeFieldBegin('tbl_name', Thrift.Type.STRING, 2)
    output.writeString(this.tbl_name)
    output.writeFieldEnd()
  }
  if (null != this.new_tbl) {
    output.writeFieldBegin('new_tbl', Thrift.Type.STRUCT, 3)
    this.new_tbl.write(output)
    output.writeFieldEnd()
  }
  output.writeFieldStop()
  output.writeStructEnd()
  return
}

var ThriftHiveMetastore_alter_table_result = function(args){
  this.o1 = null
  this.o2 = null
if( args != null ){  if (null != args.o1)
  this.o1 = args.o1
  if (null != args.o2)
  this.o2 = args.o2
}}
ThriftHiveMetastore_alter_table_result.prototype = {}
ThriftHiveMetastore_alter_table_result.prototype.read = function(input){ 
  var ret = input.readStructBegin()
  while (1) 
  {
    var ret = input.readFieldBegin()
    var fname = ret.fname
    var ftype = ret.ftype
    var fid   = ret.fid
    if (ftype == Thrift.Type.STOP) 
      break
    switch(fid)
    {
      case 1:      if (ftype == Thrift.Type.STRUCT) {
        this.o1 = new ttypes.InvalidOperationException()
        this.o1.read(input)
      } else {
        input.skip(ftype)
      }
      break
      case 2:      if (ftype == Thrift.Type.STRUCT) {
        this.o2 = new ttypes.MetaException()
        this.o2.read(input)
      } else {
        input.skip(ftype)
      }
      break
      default:
        input.skip(ftype)
    }
    input.readFieldEnd()
  }
  input.readStructEnd()
  return
}

ThriftHiveMetastore_alter_table_result.prototype.write = function(output){ 
  output.writeStructBegin('ThriftHiveMetastore_alter_table_result')
  if (null != this.o1) {
    output.writeFieldBegin('o1', Thrift.Type.STRUCT, 1)
    this.o1.write(output)
    output.writeFieldEnd()
  }
  if (null != this.o2) {
    output.writeFieldBegin('o2', Thrift.Type.STRUCT, 2)
    this.o2.write(output)
    output.writeFieldEnd()
  }
  output.writeFieldStop()
  output.writeStructEnd()
  return
}

var ThriftHiveMetastore_add_partition_args = function(args){
  this.new_part = null
if( args != null ){  if (null != args.new_part)
  this.new_part = args.new_part
}}
ThriftHiveMetastore_add_partition_args.prototype = {}
ThriftHiveMetastore_add_partition_args.prototype.read = function(input){ 
  var ret = input.readStructBegin()
  while (1) 
  {
    var ret = input.readFieldBegin()
    var fname = ret.fname
    var ftype = ret.ftype
    var fid   = ret.fid
    if (ftype == Thrift.Type.STOP) 
      break
    switch(fid)
    {
      case 1:      if (ftype == Thrift.Type.STRUCT) {
        this.new_part = new ttypes.Partition()
        this.new_part.read(input)
      } else {
        input.skip(ftype)
      }
      break
      default:
        input.skip(ftype)
    }
    input.readFieldEnd()
  }
  input.readStructEnd()
  return
}

ThriftHiveMetastore_add_partition_args.prototype.write = function(output){ 
  output.writeStructBegin('ThriftHiveMetastore_add_partition_args')
  if (null != this.new_part) {
    output.writeFieldBegin('new_part', Thrift.Type.STRUCT, 1)
    this.new_part.write(output)
    output.writeFieldEnd()
  }
  output.writeFieldStop()
  output.writeStructEnd()
  return
}

var ThriftHiveMetastore_add_partition_result = function(args){
  this.success = null
  this.o1 = null
  this.o2 = null
  this.o3 = null
if( args != null ){  if (null != args.success)
  this.success = args.success
  if (null != args.o1)
  this.o1 = args.o1
  if (null != args.o2)
  this.o2 = args.o2
  if (null != args.o3)
  this.o3 = args.o3
}}
ThriftHiveMetastore_add_partition_result.prototype = {}
ThriftHiveMetastore_add_partition_result.prototype.read = function(input){ 
  var ret = input.readStructBegin()
  while (1) 
  {
    var ret = input.readFieldBegin()
    var fname = ret.fname
    var ftype = ret.ftype
    var fid   = ret.fid
    if (ftype == Thrift.Type.STOP) 
      break
    switch(fid)
    {
      case 0:      if (ftype == Thrift.Type.STRUCT) {
        this.success = new ttypes.Partition()
        this.success.read(input)
      } else {
        input.skip(ftype)
      }
      break
      case 1:      if (ftype == Thrift.Type.STRUCT) {
        this.o1 = new ttypes.InvalidObjectException()
        this.o1.read(input)
      } else {
        input.skip(ftype)
      }
      break
      case 2:      if (ftype == Thrift.Type.STRUCT) {
        this.o2 = new ttypes.AlreadyExistsException()
        this.o2.read(input)
      } else {
        input.skip(ftype)
      }
      break
      case 3:      if (ftype == Thrift.Type.STRUCT) {
        this.o3 = new ttypes.MetaException()
        this.o3.read(input)
      } else {
        input.skip(ftype)
      }
      break
      default:
        input.skip(ftype)
    }
    input.readFieldEnd()
  }
  input.readStructEnd()
  return
}

ThriftHiveMetastore_add_partition_result.prototype.write = function(output){ 
  output.writeStructBegin('ThriftHiveMetastore_add_partition_result')
  if (null != this.success) {
    output.writeFieldBegin('success', Thrift.Type.STRUCT, 0)
    this.success.write(output)
    output.writeFieldEnd()
  }
  if (null != this.o1) {
    output.writeFieldBegin('o1', Thrift.Type.STRUCT, 1)
    this.o1.write(output)
    output.writeFieldEnd()
  }
  if (null != this.o2) {
    output.writeFieldBegin('o2', Thrift.Type.STRUCT, 2)
    this.o2.write(output)
    output.writeFieldEnd()
  }
  if (null != this.o3) {
    output.writeFieldBegin('o3', Thrift.Type.STRUCT, 3)
    this.o3.write(output)
    output.writeFieldEnd()
  }
  output.writeFieldStop()
  output.writeStructEnd()
  return
}

var ThriftHiveMetastore_append_partition_args = function(args){
  this.db_name = null
  this.tbl_name = null
  this.part_vals = null
if( args != null ){  if (null != args.db_name)
  this.db_name = args.db_name
  if (null != args.tbl_name)
  this.tbl_name = args.tbl_name
  if (null != args.part_vals)
  this.part_vals = args.part_vals
}}
ThriftHiveMetastore_append_partition_args.prototype = {}
ThriftHiveMetastore_append_partition_args.prototype.read = function(input){ 
  var ret = input.readStructBegin()
  while (1) 
  {
    var ret = input.readFieldBegin()
    var fname = ret.fname
    var ftype = ret.ftype
    var fid   = ret.fid
    if (ftype == Thrift.Type.STOP) 
      break
    switch(fid)
    {
      case 1:      if (ftype == Thrift.Type.STRING) {
        this.db_name = input.readString()
      } else {
        input.skip(ftype)
      }
      break
      case 2:      if (ftype == Thrift.Type.STRING) {
        this.tbl_name = input.readString()
      } else {
        input.skip(ftype)
      }
      break
      case 3:      if (ftype == Thrift.Type.LIST) {
        {
          var _size152 = 0
          var rtmp3
          this.part_vals = []
          var _etype155 = 0
          rtmp3 = input.readListBegin()
          _etype155 = rtmp3.etype
          _size152 = rtmp3.size
          for (var _i156 = 0; _i156 < _size152; ++_i156)
          {
            var elem157 = null
            elem157 = input.readString()
            this.part_vals.push(elem157)
          }
          input.readListEnd()
        }
      } else {
        input.skip(ftype)
      }
      break
      default:
        input.skip(ftype)
    }
    input.readFieldEnd()
  }
  input.readStructEnd()
  return
}

ThriftHiveMetastore_append_partition_args.prototype.write = function(output){ 
  output.writeStructBegin('ThriftHiveMetastore_append_partition_args')
  if (null != this.db_name) {
    output.writeFieldBegin('db_name', Thrift.Type.STRING, 1)
    output.writeString(this.db_name)
    output.writeFieldEnd()
  }
  if (null != this.tbl_name) {
    output.writeFieldBegin('tbl_name', Thrift.Type.STRING, 2)
    output.writeString(this.tbl_name)
    output.writeFieldEnd()
  }
  if (null != this.part_vals) {
    output.writeFieldBegin('part_vals', Thrift.Type.LIST, 3)
    {
      output.writeListBegin(Thrift.Type.STRING, this.part_vals.length)
      {
        for(var iter158 in this.part_vals)
        {
          if (this.part_vals.hasOwnProperty(iter158))
          {
            iter158=this.part_vals[iter158]
            output.writeString(iter158)
          }
        }
      }
      output.writeListEnd()
    }
    output.writeFieldEnd()
  }
  output.writeFieldStop()
  output.writeStructEnd()
  return
}

var ThriftHiveMetastore_append_partition_result = function(args){
  this.success = null
  this.o1 = null
  this.o2 = null
  this.o3 = null
if( args != null ){  if (null != args.success)
  this.success = args.success
  if (null != args.o1)
  this.o1 = args.o1
  if (null != args.o2)
  this.o2 = args.o2
  if (null != args.o3)
  this.o3 = args.o3
}}
ThriftHiveMetastore_append_partition_result.prototype = {}
ThriftHiveMetastore_append_partition_result.prototype.read = function(input){ 
  var ret = input.readStructBegin()
  while (1) 
  {
    var ret = input.readFieldBegin()
    var fname = ret.fname
    var ftype = ret.ftype
    var fid   = ret.fid
    if (ftype == Thrift.Type.STOP) 
      break
    switch(fid)
    {
      case 0:      if (ftype == Thrift.Type.STRUCT) {
        this.success = new ttypes.Partition()
        this.success.read(input)
      } else {
        input.skip(ftype)
      }
      break
      case 1:      if (ftype == Thrift.Type.STRUCT) {
        this.o1 = new ttypes.InvalidObjectException()
        this.o1.read(input)
      } else {
        input.skip(ftype)
      }
      break
      case 2:      if (ftype == Thrift.Type.STRUCT) {
        this.o2 = new ttypes.AlreadyExistsException()
        this.o2.read(input)
      } else {
        input.skip(ftype)
      }
      break
      case 3:      if (ftype == Thrift.Type.STRUCT) {
        this.o3 = new ttypes.MetaException()
        this.o3.read(input)
      } else {
        input.skip(ftype)
      }
      break
      default:
        input.skip(ftype)
    }
    input.readFieldEnd()
  }
  input.readStructEnd()
  return
}

ThriftHiveMetastore_append_partition_result.prototype.write = function(output){ 
  output.writeStructBegin('ThriftHiveMetastore_append_partition_result')
  if (null != this.success) {
    output.writeFieldBegin('success', Thrift.Type.STRUCT, 0)
    this.success.write(output)
    output.writeFieldEnd()
  }
  if (null != this.o1) {
    output.writeFieldBegin('o1', Thrift.Type.STRUCT, 1)
    this.o1.write(output)
    output.writeFieldEnd()
  }
  if (null != this.o2) {
    output.writeFieldBegin('o2', Thrift.Type.STRUCT, 2)
    this.o2.write(output)
    output.writeFieldEnd()
  }
  if (null != this.o3) {
    output.writeFieldBegin('o3', Thrift.Type.STRUCT, 3)
    this.o3.write(output)
    output.writeFieldEnd()
  }
  output.writeFieldStop()
  output.writeStructEnd()
  return
}

var ThriftHiveMetastore_append_partition_by_name_args = function(args){
  this.db_name = null
  this.tbl_name = null
  this.part_name = null
if( args != null ){  if (null != args.db_name)
  this.db_name = args.db_name
  if (null != args.tbl_name)
  this.tbl_name = args.tbl_name
  if (null != args.part_name)
  this.part_name = args.part_name
}}
ThriftHiveMetastore_append_partition_by_name_args.prototype = {}
ThriftHiveMetastore_append_partition_by_name_args.prototype.read = function(input){ 
  var ret = input.readStructBegin()
  while (1) 
  {
    var ret = input.readFieldBegin()
    var fname = ret.fname
    var ftype = ret.ftype
    var fid   = ret.fid
    if (ftype == Thrift.Type.STOP) 
      break
    switch(fid)
    {
      case 1:      if (ftype == Thrift.Type.STRING) {
        this.db_name = input.readString()
      } else {
        input.skip(ftype)
      }
      break
      case 2:      if (ftype == Thrift.Type.STRING) {
        this.tbl_name = input.readString()
      } else {
        input.skip(ftype)
      }
      break
      case 3:      if (ftype == Thrift.Type.STRING) {
        this.part_name = input.readString()
      } else {
        input.skip(ftype)
      }
      break
      default:
        input.skip(ftype)
    }
    input.readFieldEnd()
  }
  input.readStructEnd()
  return
}

ThriftHiveMetastore_append_partition_by_name_args.prototype.write = function(output){ 
  output.writeStructBegin('ThriftHiveMetastore_append_partition_by_name_args')
  if (null != this.db_name) {
    output.writeFieldBegin('db_name', Thrift.Type.STRING, 1)
    output.writeString(this.db_name)
    output.writeFieldEnd()
  }
  if (null != this.tbl_name) {
    output.writeFieldBegin('tbl_name', Thrift.Type.STRING, 2)
    output.writeString(this.tbl_name)
    output.writeFieldEnd()
  }
  if (null != this.part_name) {
    output.writeFieldBegin('part_name', Thrift.Type.STRING, 3)
    output.writeString(this.part_name)
    output.writeFieldEnd()
  }
  output.writeFieldStop()
  output.writeStructEnd()
  return
}

var ThriftHiveMetastore_append_partition_by_name_result = function(args){
  this.success = null
  this.o1 = null
  this.o2 = null
  this.o3 = null
if( args != null ){  if (null != args.success)
  this.success = args.success
  if (null != args.o1)
  this.o1 = args.o1
  if (null != args.o2)
  this.o2 = args.o2
  if (null != args.o3)
  this.o3 = args.o3
}}
ThriftHiveMetastore_append_partition_by_name_result.prototype = {}
ThriftHiveMetastore_append_partition_by_name_result.prototype.read = function(input){ 
  var ret = input.readStructBegin()
  while (1) 
  {
    var ret = input.readFieldBegin()
    var fname = ret.fname
    var ftype = ret.ftype
    var fid   = ret.fid
    if (ftype == Thrift.Type.STOP) 
      break
    switch(fid)
    {
      case 0:      if (ftype == Thrift.Type.STRUCT) {
        this.success = new ttypes.Partition()
        this.success.read(input)
      } else {
        input.skip(ftype)
      }
      break
      case 1:      if (ftype == Thrift.Type.STRUCT) {
        this.o1 = new ttypes.InvalidObjectException()
        this.o1.read(input)
      } else {
        input.skip(ftype)
      }
      break
      case 2:      if (ftype == Thrift.Type.STRUCT) {
        this.o2 = new ttypes.AlreadyExistsException()
        this.o2.read(input)
      } else {
        input.skip(ftype)
      }
      break
      case 3:      if (ftype == Thrift.Type.STRUCT) {
        this.o3 = new ttypes.MetaException()
        this.o3.read(input)
      } else {
        input.skip(ftype)
      }
      break
      default:
        input.skip(ftype)
    }
    input.readFieldEnd()
  }
  input.readStructEnd()
  return
}

ThriftHiveMetastore_append_partition_by_name_result.prototype.write = function(output){ 
  output.writeStructBegin('ThriftHiveMetastore_append_partition_by_name_result')
  if (null != this.success) {
    output.writeFieldBegin('success', Thrift.Type.STRUCT, 0)
    this.success.write(output)
    output.writeFieldEnd()
  }
  if (null != this.o1) {
    output.writeFieldBegin('o1', Thrift.Type.STRUCT, 1)
    this.o1.write(output)
    output.writeFieldEnd()
  }
  if (null != this.o2) {
    output.writeFieldBegin('o2', Thrift.Type.STRUCT, 2)
    this.o2.write(output)
    output.writeFieldEnd()
  }
  if (null != this.o3) {
    output.writeFieldBegin('o3', Thrift.Type.STRUCT, 3)
    this.o3.write(output)
    output.writeFieldEnd()
  }
  output.writeFieldStop()
  output.writeStructEnd()
  return
}

var ThriftHiveMetastore_drop_partition_args = function(args){
  this.db_name = null
  this.tbl_name = null
  this.part_vals = null
  this.deleteData = null
if( args != null ){  if (null != args.db_name)
  this.db_name = args.db_name
  if (null != args.tbl_name)
  this.tbl_name = args.tbl_name
  if (null != args.part_vals)
  this.part_vals = args.part_vals
  if (null != args.deleteData)
  this.deleteData = args.deleteData
}}
ThriftHiveMetastore_drop_partition_args.prototype = {}
ThriftHiveMetastore_drop_partition_args.prototype.read = function(input){ 
  var ret = input.readStructBegin()
  while (1) 
  {
    var ret = input.readFieldBegin()
    var fname = ret.fname
    var ftype = ret.ftype
    var fid   = ret.fid
    if (ftype == Thrift.Type.STOP) 
      break
    switch(fid)
    {
      case 1:      if (ftype == Thrift.Type.STRING) {
        this.db_name = input.readString()
      } else {
        input.skip(ftype)
      }
      break
      case 2:      if (ftype == Thrift.Type.STRING) {
        this.tbl_name = input.readString()
      } else {
        input.skip(ftype)
      }
      break
      case 3:      if (ftype == Thrift.Type.LIST) {
        {
          var _size159 = 0
          var rtmp3
          this.part_vals = []
          var _etype162 = 0
          rtmp3 = input.readListBegin()
          _etype162 = rtmp3.etype
          _size159 = rtmp3.size
          for (var _i163 = 0; _i163 < _size159; ++_i163)
          {
            var elem164 = null
            elem164 = input.readString()
            this.part_vals.push(elem164)
          }
          input.readListEnd()
        }
      } else {
        input.skip(ftype)
      }
      break
      case 4:      if (ftype == Thrift.Type.BOOL) {
        this.deleteData = input.readBool()
      } else {
        input.skip(ftype)
      }
      break
      default:
        input.skip(ftype)
    }
    input.readFieldEnd()
  }
  input.readStructEnd()
  return
}

ThriftHiveMetastore_drop_partition_args.prototype.write = function(output){ 
  output.writeStructBegin('ThriftHiveMetastore_drop_partition_args')
  if (null != this.db_name) {
    output.writeFieldBegin('db_name', Thrift.Type.STRING, 1)
    output.writeString(this.db_name)
    output.writeFieldEnd()
  }
  if (null != this.tbl_name) {
    output.writeFieldBegin('tbl_name', Thrift.Type.STRING, 2)
    output.writeString(this.tbl_name)
    output.writeFieldEnd()
  }
  if (null != this.part_vals) {
    output.writeFieldBegin('part_vals', Thrift.Type.LIST, 3)
    {
      output.writeListBegin(Thrift.Type.STRING, this.part_vals.length)
      {
        for(var iter165 in this.part_vals)
        {
          if (this.part_vals.hasOwnProperty(iter165))
          {
            iter165=this.part_vals[iter165]
            output.writeString(iter165)
          }
        }
      }
      output.writeListEnd()
    }
    output.writeFieldEnd()
  }
  if (null != this.deleteData) {
    output.writeFieldBegin('deleteData', Thrift.Type.BOOL, 4)
    output.writeBool(this.deleteData)
    output.writeFieldEnd()
  }
  output.writeFieldStop()
  output.writeStructEnd()
  return
}

var ThriftHiveMetastore_drop_partition_result = function(args){
  this.success = null
  this.o1 = null
  this.o2 = null
if( args != null ){  if (null != args.success)
  this.success = args.success
  if (null != args.o1)
  this.o1 = args.o1
  if (null != args.o2)
  this.o2 = args.o2
}}
ThriftHiveMetastore_drop_partition_result.prototype = {}
ThriftHiveMetastore_drop_partition_result.prototype.read = function(input){ 
  var ret = input.readStructBegin()
  while (1) 
  {
    var ret = input.readFieldBegin()
    var fname = ret.fname
    var ftype = ret.ftype
    var fid   = ret.fid
    if (ftype == Thrift.Type.STOP) 
      break
    switch(fid)
    {
      case 0:      if (ftype == Thrift.Type.BOOL) {
        this.success = input.readBool()
      } else {
        input.skip(ftype)
      }
      break
      case 1:      if (ftype == Thrift.Type.STRUCT) {
        this.o1 = new ttypes.NoSuchObjectException()
        this.o1.read(input)
      } else {
        input.skip(ftype)
      }
      break
      case 2:      if (ftype == Thrift.Type.STRUCT) {
        this.o2 = new ttypes.MetaException()
        this.o2.read(input)
      } else {
        input.skip(ftype)
      }
      break
      default:
        input.skip(ftype)
    }
    input.readFieldEnd()
  }
  input.readStructEnd()
  return
}

ThriftHiveMetastore_drop_partition_result.prototype.write = function(output){ 
  output.writeStructBegin('ThriftHiveMetastore_drop_partition_result')
  if (null != this.success) {
    output.writeFieldBegin('success', Thrift.Type.BOOL, 0)
    output.writeBool(this.success)
    output.writeFieldEnd()
  }
  if (null != this.o1) {
    output.writeFieldBegin('o1', Thrift.Type.STRUCT, 1)
    this.o1.write(output)
    output.writeFieldEnd()
  }
  if (null != this.o2) {
    output.writeFieldBegin('o2', Thrift.Type.STRUCT, 2)
    this.o2.write(output)
    output.writeFieldEnd()
  }
  output.writeFieldStop()
  output.writeStructEnd()
  return
}

var ThriftHiveMetastore_drop_partition_by_name_args = function(args){
  this.db_name = null
  this.tbl_name = null
  this.part_name = null
  this.deleteData = null
if( args != null ){  if (null != args.db_name)
  this.db_name = args.db_name
  if (null != args.tbl_name)
  this.tbl_name = args.tbl_name
  if (null != args.part_name)
  this.part_name = args.part_name
  if (null != args.deleteData)
  this.deleteData = args.deleteData
}}
ThriftHiveMetastore_drop_partition_by_name_args.prototype = {}
ThriftHiveMetastore_drop_partition_by_name_args.prototype.read = function(input){ 
  var ret = input.readStructBegin()
  while (1) 
  {
    var ret = input.readFieldBegin()
    var fname = ret.fname
    var ftype = ret.ftype
    var fid   = ret.fid
    if (ftype == Thrift.Type.STOP) 
      break
    switch(fid)
    {
      case 1:      if (ftype == Thrift.Type.STRING) {
        this.db_name = input.readString()
      } else {
        input.skip(ftype)
      }
      break
      case 2:      if (ftype == Thrift.Type.STRING) {
        this.tbl_name = input.readString()
      } else {
        input.skip(ftype)
      }
      break
      case 3:      if (ftype == Thrift.Type.STRING) {
        this.part_name = input.readString()
      } else {
        input.skip(ftype)
      }
      break
      case 4:      if (ftype == Thrift.Type.BOOL) {
        this.deleteData = input.readBool()
      } else {
        input.skip(ftype)
      }
      break
      default:
        input.skip(ftype)
    }
    input.readFieldEnd()
  }
  input.readStructEnd()
  return
}

ThriftHiveMetastore_drop_partition_by_name_args.prototype.write = function(output){ 
  output.writeStructBegin('ThriftHiveMetastore_drop_partition_by_name_args')
  if (null != this.db_name) {
    output.writeFieldBegin('db_name', Thrift.Type.STRING, 1)
    output.writeString(this.db_name)
    output.writeFieldEnd()
  }
  if (null != this.tbl_name) {
    output.writeFieldBegin('tbl_name', Thrift.Type.STRING, 2)
    output.writeString(this.tbl_name)
    output.writeFieldEnd()
  }
  if (null != this.part_name) {
    output.writeFieldBegin('part_name', Thrift.Type.STRING, 3)
    output.writeString(this.part_name)
    output.writeFieldEnd()
  }
  if (null != this.deleteData) {
    output.writeFieldBegin('deleteData', Thrift.Type.BOOL, 4)
    output.writeBool(this.deleteData)
    output.writeFieldEnd()
  }
  output.writeFieldStop()
  output.writeStructEnd()
  return
}

var ThriftHiveMetastore_drop_partition_by_name_result = function(args){
  this.success = null
  this.o1 = null
  this.o2 = null
if( args != null ){  if (null != args.success)
  this.success = args.success
  if (null != args.o1)
  this.o1 = args.o1
  if (null != args.o2)
  this.o2 = args.o2
}}
ThriftHiveMetastore_drop_partition_by_name_result.prototype = {}
ThriftHiveMetastore_drop_partition_by_name_result.prototype.read = function(input){ 
  var ret = input.readStructBegin()
  while (1) 
  {
    var ret = input.readFieldBegin()
    var fname = ret.fname
    var ftype = ret.ftype
    var fid   = ret.fid
    if (ftype == Thrift.Type.STOP) 
      break
    switch(fid)
    {
      case 0:      if (ftype == Thrift.Type.BOOL) {
        this.success = input.readBool()
      } else {
        input.skip(ftype)
      }
      break
      case 1:      if (ftype == Thrift.Type.STRUCT) {
        this.o1 = new ttypes.NoSuchObjectException()
        this.o1.read(input)
      } else {
        input.skip(ftype)
      }
      break
      case 2:      if (ftype == Thrift.Type.STRUCT) {
        this.o2 = new ttypes.MetaException()
        this.o2.read(input)
      } else {
        input.skip(ftype)
      }
      break
      default:
        input.skip(ftype)
    }
    input.readFieldEnd()
  }
  input.readStructEnd()
  return
}

ThriftHiveMetastore_drop_partition_by_name_result.prototype.write = function(output){ 
  output.writeStructBegin('ThriftHiveMetastore_drop_partition_by_name_result')
  if (null != this.success) {
    output.writeFieldBegin('success', Thrift.Type.BOOL, 0)
    output.writeBool(this.success)
    output.writeFieldEnd()
  }
  if (null != this.o1) {
    output.writeFieldBegin('o1', Thrift.Type.STRUCT, 1)
    this.o1.write(output)
    output.writeFieldEnd()
  }
  if (null != this.o2) {
    output.writeFieldBegin('o2', Thrift.Type.STRUCT, 2)
    this.o2.write(output)
    output.writeFieldEnd()
  }
  output.writeFieldStop()
  output.writeStructEnd()
  return
}

var ThriftHiveMetastore_get_partition_args = function(args){
  this.db_name = null
  this.tbl_name = null
  this.part_vals = null
if( args != null ){  if (null != args.db_name)
  this.db_name = args.db_name
  if (null != args.tbl_name)
  this.tbl_name = args.tbl_name
  if (null != args.part_vals)
  this.part_vals = args.part_vals
}}
ThriftHiveMetastore_get_partition_args.prototype = {}
ThriftHiveMetastore_get_partition_args.prototype.read = function(input){ 
  var ret = input.readStructBegin()
  while (1) 
  {
    var ret = input.readFieldBegin()
    var fname = ret.fname
    var ftype = ret.ftype
    var fid   = ret.fid
    if (ftype == Thrift.Type.STOP) 
      break
    switch(fid)
    {
      case 1:      if (ftype == Thrift.Type.STRING) {
        this.db_name = input.readString()
      } else {
        input.skip(ftype)
      }
      break
      case 2:      if (ftype == Thrift.Type.STRING) {
        this.tbl_name = input.readString()
      } else {
        input.skip(ftype)
      }
      break
      case 3:      if (ftype == Thrift.Type.LIST) {
        {
          var _size166 = 0
          var rtmp3
          this.part_vals = []
          var _etype169 = 0
          rtmp3 = input.readListBegin()
          _etype169 = rtmp3.etype
          _size166 = rtmp3.size
          for (var _i170 = 0; _i170 < _size166; ++_i170)
          {
            var elem171 = null
            elem171 = input.readString()
            this.part_vals.push(elem171)
          }
          input.readListEnd()
        }
      } else {
        input.skip(ftype)
      }
      break
      default:
        input.skip(ftype)
    }
    input.readFieldEnd()
  }
  input.readStructEnd()
  return
}

ThriftHiveMetastore_get_partition_args.prototype.write = function(output){ 
  output.writeStructBegin('ThriftHiveMetastore_get_partition_args')
  if (null != this.db_name) {
    output.writeFieldBegin('db_name', Thrift.Type.STRING, 1)
    output.writeString(this.db_name)
    output.writeFieldEnd()
  }
  if (null != this.tbl_name) {
    output.writeFieldBegin('tbl_name', Thrift.Type.STRING, 2)
    output.writeString(this.tbl_name)
    output.writeFieldEnd()
  }
  if (null != this.part_vals) {
    output.writeFieldBegin('part_vals', Thrift.Type.LIST, 3)
    {
      output.writeListBegin(Thrift.Type.STRING, this.part_vals.length)
      {
        for(var iter172 in this.part_vals)
        {
          if (this.part_vals.hasOwnProperty(iter172))
          {
            iter172=this.part_vals[iter172]
            output.writeString(iter172)
          }
        }
      }
      output.writeListEnd()
    }
    output.writeFieldEnd()
  }
  output.writeFieldStop()
  output.writeStructEnd()
  return
}

var ThriftHiveMetastore_get_partition_result = function(args){
  this.success = null
  this.o1 = null
  this.o2 = null
if( args != null ){  if (null != args.success)
  this.success = args.success
  if (null != args.o1)
  this.o1 = args.o1
  if (null != args.o2)
  this.o2 = args.o2
}}
ThriftHiveMetastore_get_partition_result.prototype = {}
ThriftHiveMetastore_get_partition_result.prototype.read = function(input){ 
  var ret = input.readStructBegin()
  while (1) 
  {
    var ret = input.readFieldBegin()
    var fname = ret.fname
    var ftype = ret.ftype
    var fid   = ret.fid
    if (ftype == Thrift.Type.STOP) 
      break
    switch(fid)
    {
      case 0:      if (ftype == Thrift.Type.STRUCT) {
        this.success = new ttypes.Partition()
        this.success.read(input)
      } else {
        input.skip(ftype)
      }
      break
      case 1:      if (ftype == Thrift.Type.STRUCT) {
        this.o1 = new ttypes.MetaException()
        this.o1.read(input)
      } else {
        input.skip(ftype)
      }
      break
      case 2:      if (ftype == Thrift.Type.STRUCT) {
        this.o2 = new ttypes.NoSuchObjectException()
        this.o2.read(input)
      } else {
        input.skip(ftype)
      }
      break
      default:
        input.skip(ftype)
    }
    input.readFieldEnd()
  }
  input.readStructEnd()
  return
}

ThriftHiveMetastore_get_partition_result.prototype.write = function(output){ 
  output.writeStructBegin('ThriftHiveMetastore_get_partition_result')
  if (null != this.success) {
    output.writeFieldBegin('success', Thrift.Type.STRUCT, 0)
    this.success.write(output)
    output.writeFieldEnd()
  }
  if (null != this.o1) {
    output.writeFieldBegin('o1', Thrift.Type.STRUCT, 1)
    this.o1.write(output)
    output.writeFieldEnd()
  }
  if (null != this.o2) {
    output.writeFieldBegin('o2', Thrift.Type.STRUCT, 2)
    this.o2.write(output)
    output.writeFieldEnd()
  }
  output.writeFieldStop()
  output.writeStructEnd()
  return
}

var ThriftHiveMetastore_get_partition_by_name_args = function(args){
  this.db_name = null
  this.tbl_name = null
  this.part_name = null
if( args != null ){  if (null != args.db_name)
  this.db_name = args.db_name
  if (null != args.tbl_name)
  this.tbl_name = args.tbl_name
  if (null != args.part_name)
  this.part_name = args.part_name
}}
ThriftHiveMetastore_get_partition_by_name_args.prototype = {}
ThriftHiveMetastore_get_partition_by_name_args.prototype.read = function(input){ 
  var ret = input.readStructBegin()
  while (1) 
  {
    var ret = input.readFieldBegin()
    var fname = ret.fname
    var ftype = ret.ftype
    var fid   = ret.fid
    if (ftype == Thrift.Type.STOP) 
      break
    switch(fid)
    {
      case 1:      if (ftype == Thrift.Type.STRING) {
        this.db_name = input.readString()
      } else {
        input.skip(ftype)
      }
      break
      case 2:      if (ftype == Thrift.Type.STRING) {
        this.tbl_name = input.readString()
      } else {
        input.skip(ftype)
      }
      break
      case 3:      if (ftype == Thrift.Type.STRING) {
        this.part_name = input.readString()
      } else {
        input.skip(ftype)
      }
      break
      default:
        input.skip(ftype)
    }
    input.readFieldEnd()
  }
  input.readStructEnd()
  return
}

ThriftHiveMetastore_get_partition_by_name_args.prototype.write = function(output){ 
  output.writeStructBegin('ThriftHiveMetastore_get_partition_by_name_args')
  if (null != this.db_name) {
    output.writeFieldBegin('db_name', Thrift.Type.STRING, 1)
    output.writeString(this.db_name)
    output.writeFieldEnd()
  }
  if (null != this.tbl_name) {
    output.writeFieldBegin('tbl_name', Thrift.Type.STRING, 2)
    output.writeString(this.tbl_name)
    output.writeFieldEnd()
  }
  if (null != this.part_name) {
    output.writeFieldBegin('part_name', Thrift.Type.STRING, 3)
    output.writeString(this.part_name)
    output.writeFieldEnd()
  }
  output.writeFieldStop()
  output.writeStructEnd()
  return
}

var ThriftHiveMetastore_get_partition_by_name_result = function(args){
  this.success = null
  this.o1 = null
  this.o2 = null
if( args != null ){  if (null != args.success)
  this.success = args.success
  if (null != args.o1)
  this.o1 = args.o1
  if (null != args.o2)
  this.o2 = args.o2
}}
ThriftHiveMetastore_get_partition_by_name_result.prototype = {}
ThriftHiveMetastore_get_partition_by_name_result.prototype.read = function(input){ 
  var ret = input.readStructBegin()
  while (1) 
  {
    var ret = input.readFieldBegin()
    var fname = ret.fname
    var ftype = ret.ftype
    var fid   = ret.fid
    if (ftype == Thrift.Type.STOP) 
      break
    switch(fid)
    {
      case 0:      if (ftype == Thrift.Type.STRUCT) {
        this.success = new ttypes.Partition()
        this.success.read(input)
      } else {
        input.skip(ftype)
      }
      break
      case 1:      if (ftype == Thrift.Type.STRUCT) {
        this.o1 = new ttypes.MetaException()
        this.o1.read(input)
      } else {
        input.skip(ftype)
      }
      break
      case 2:      if (ftype == Thrift.Type.STRUCT) {
        this.o2 = new ttypes.NoSuchObjectException()
        this.o2.read(input)
      } else {
        input.skip(ftype)
      }
      break
      default:
        input.skip(ftype)
    }
    input.readFieldEnd()
  }
  input.readStructEnd()
  return
}

ThriftHiveMetastore_get_partition_by_name_result.prototype.write = function(output){ 
  output.writeStructBegin('ThriftHiveMetastore_get_partition_by_name_result')
  if (null != this.success) {
    output.writeFieldBegin('success', Thrift.Type.STRUCT, 0)
    this.success.write(output)
    output.writeFieldEnd()
  }
  if (null != this.o1) {
    output.writeFieldBegin('o1', Thrift.Type.STRUCT, 1)
    this.o1.write(output)
    output.writeFieldEnd()
  }
  if (null != this.o2) {
    output.writeFieldBegin('o2', Thrift.Type.STRUCT, 2)
    this.o2.write(output)
    output.writeFieldEnd()
  }
  output.writeFieldStop()
  output.writeStructEnd()
  return
}

var ThriftHiveMetastore_get_partitions_args = function(args){
  this.db_name = null
  this.tbl_name = null
  this.max_parts = -1
if( args != null ){  if (null != args.db_name)
  this.db_name = args.db_name
  if (null != args.tbl_name)
  this.tbl_name = args.tbl_name
  if (null != args.max_parts)
  this.max_parts = args.max_parts
}}
ThriftHiveMetastore_get_partitions_args.prototype = {}
ThriftHiveMetastore_get_partitions_args.prototype.read = function(input){ 
  var ret = input.readStructBegin()
  while (1) 
  {
    var ret = input.readFieldBegin()
    var fname = ret.fname
    var ftype = ret.ftype
    var fid   = ret.fid
    if (ftype == Thrift.Type.STOP) 
      break
    switch(fid)
    {
      case 1:      if (ftype == Thrift.Type.STRING) {
        this.db_name = input.readString()
      } else {
        input.skip(ftype)
      }
      break
      case 2:      if (ftype == Thrift.Type.STRING) {
        this.tbl_name = input.readString()
      } else {
        input.skip(ftype)
      }
      break
      case 3:      if (ftype == Thrift.Type.I16) {
        this.max_parts = input.readI16()
      } else {
        input.skip(ftype)
      }
      break
      default:
        input.skip(ftype)
    }
    input.readFieldEnd()
  }
  input.readStructEnd()
  return
}

ThriftHiveMetastore_get_partitions_args.prototype.write = function(output){ 
  output.writeStructBegin('ThriftHiveMetastore_get_partitions_args')
  if (null != this.db_name) {
    output.writeFieldBegin('db_name', Thrift.Type.STRING, 1)
    output.writeString(this.db_name)
    output.writeFieldEnd()
  }
  if (null != this.tbl_name) {
    output.writeFieldBegin('tbl_name', Thrift.Type.STRING, 2)
    output.writeString(this.tbl_name)
    output.writeFieldEnd()
  }
  if (null != this.max_parts) {
    output.writeFieldBegin('max_parts', Thrift.Type.I16, 3)
    output.writeI16(this.max_parts)
    output.writeFieldEnd()
  }
  output.writeFieldStop()
  output.writeStructEnd()
  return
}

var ThriftHiveMetastore_get_partitions_result = function(args){
  this.success = null
  this.o1 = null
  this.o2 = null
if( args != null ){  if (null != args.success)
  this.success = args.success
  if (null != args.o1)
  this.o1 = args.o1
  if (null != args.o2)
  this.o2 = args.o2
}}
ThriftHiveMetastore_get_partitions_result.prototype = {}
ThriftHiveMetastore_get_partitions_result.prototype.read = function(input){ 
  var ret = input.readStructBegin()
  while (1) 
  {
    var ret = input.readFieldBegin()
    var fname = ret.fname
    var ftype = ret.ftype
    var fid   = ret.fid
    if (ftype == Thrift.Type.STOP) 
      break
    switch(fid)
    {
      case 0:      if (ftype == Thrift.Type.LIST) {
        {
          var _size173 = 0
          var rtmp3
          this.success = []
          var _etype176 = 0
          rtmp3 = input.readListBegin()
          _etype176 = rtmp3.etype
          _size173 = rtmp3.size
          for (var _i177 = 0; _i177 < _size173; ++_i177)
          {
            var elem178 = null
            elem178 = new ttypes.Partition()
            elem178.read(input)
            this.success.push(elem178)
          }
          input.readListEnd()
        }
      } else {
        input.skip(ftype)
      }
      break
      case 1:      if (ftype == Thrift.Type.STRUCT) {
        this.o1 = new ttypes.NoSuchObjectException()
        this.o1.read(input)
      } else {
        input.skip(ftype)
      }
      break
      case 2:      if (ftype == Thrift.Type.STRUCT) {
        this.o2 = new ttypes.MetaException()
        this.o2.read(input)
      } else {
        input.skip(ftype)
      }
      break
      default:
        input.skip(ftype)
    }
    input.readFieldEnd()
  }
  input.readStructEnd()
  return
}

ThriftHiveMetastore_get_partitions_result.prototype.write = function(output){ 
  output.writeStructBegin('ThriftHiveMetastore_get_partitions_result')
  if (null != this.success) {
    output.writeFieldBegin('success', Thrift.Type.LIST, 0)
    {
      output.writeListBegin(Thrift.Type.STRUCT, this.success.length)
      {
        for(var iter179 in this.success)
        {
          if (this.success.hasOwnProperty(iter179))
          {
            iter179=this.success[iter179]
            iter179.write(output)
          }
        }
      }
      output.writeListEnd()
    }
    output.writeFieldEnd()
  }
  if (null != this.o1) {
    output.writeFieldBegin('o1', Thrift.Type.STRUCT, 1)
    this.o1.write(output)
    output.writeFieldEnd()
  }
  if (null != this.o2) {
    output.writeFieldBegin('o2', Thrift.Type.STRUCT, 2)
    this.o2.write(output)
    output.writeFieldEnd()
  }
  output.writeFieldStop()
  output.writeStructEnd()
  return
}

var ThriftHiveMetastore_get_partition_names_args = function(args){
  this.db_name = null
  this.tbl_name = null
  this.max_parts = -1
if( args != null ){  if (null != args.db_name)
  this.db_name = args.db_name
  if (null != args.tbl_name)
  this.tbl_name = args.tbl_name
  if (null != args.max_parts)
  this.max_parts = args.max_parts
}}
ThriftHiveMetastore_get_partition_names_args.prototype = {}
ThriftHiveMetastore_get_partition_names_args.prototype.read = function(input){ 
  var ret = input.readStructBegin()
  while (1) 
  {
    var ret = input.readFieldBegin()
    var fname = ret.fname
    var ftype = ret.ftype
    var fid   = ret.fid
    if (ftype == Thrift.Type.STOP) 
      break
    switch(fid)
    {
      case 1:      if (ftype == Thrift.Type.STRING) {
        this.db_name = input.readString()
      } else {
        input.skip(ftype)
      }
      break
      case 2:      if (ftype == Thrift.Type.STRING) {
        this.tbl_name = input.readString()
      } else {
        input.skip(ftype)
      }
      break
      case 3:      if (ftype == Thrift.Type.I16) {
        this.max_parts = input.readI16()
      } else {
        input.skip(ftype)
      }
      break
      default:
        input.skip(ftype)
    }
    input.readFieldEnd()
  }
  input.readStructEnd()
  return
}

ThriftHiveMetastore_get_partition_names_args.prototype.write = function(output){ 
  output.writeStructBegin('ThriftHiveMetastore_get_partition_names_args')
  if (null != this.db_name) {
    output.writeFieldBegin('db_name', Thrift.Type.STRING, 1)
    output.writeString(this.db_name)
    output.writeFieldEnd()
  }
  if (null != this.tbl_name) {
    output.writeFieldBegin('tbl_name', Thrift.Type.STRING, 2)
    output.writeString(this.tbl_name)
    output.writeFieldEnd()
  }
  if (null != this.max_parts) {
    output.writeFieldBegin('max_parts', Thrift.Type.I16, 3)
    output.writeI16(this.max_parts)
    output.writeFieldEnd()
  }
  output.writeFieldStop()
  output.writeStructEnd()
  return
}

var ThriftHiveMetastore_get_partition_names_result = function(args){
  this.success = null
  this.o2 = null
if( args != null ){  if (null != args.success)
  this.success = args.success
  if (null != args.o2)
  this.o2 = args.o2
}}
ThriftHiveMetastore_get_partition_names_result.prototype = {}
ThriftHiveMetastore_get_partition_names_result.prototype.read = function(input){ 
  var ret = input.readStructBegin()
  while (1) 
  {
    var ret = input.readFieldBegin()
    var fname = ret.fname
    var ftype = ret.ftype
    var fid   = ret.fid
    if (ftype == Thrift.Type.STOP) 
      break
    switch(fid)
    {
      case 0:      if (ftype == Thrift.Type.LIST) {
        {
          var _size180 = 0
          var rtmp3
          this.success = []
          var _etype183 = 0
          rtmp3 = input.readListBegin()
          _etype183 = rtmp3.etype
          _size180 = rtmp3.size
          for (var _i184 = 0; _i184 < _size180; ++_i184)
          {
            var elem185 = null
            elem185 = input.readString()
            this.success.push(elem185)
          }
          input.readListEnd()
        }
      } else {
        input.skip(ftype)
      }
      break
      case 1:      if (ftype == Thrift.Type.STRUCT) {
        this.o2 = new ttypes.MetaException()
        this.o2.read(input)
      } else {
        input.skip(ftype)
      }
      break
      default:
        input.skip(ftype)
    }
    input.readFieldEnd()
  }
  input.readStructEnd()
  return
}

ThriftHiveMetastore_get_partition_names_result.prototype.write = function(output){ 
  output.writeStructBegin('ThriftHiveMetastore_get_partition_names_result')
  if (null != this.success) {
    output.writeFieldBegin('success', Thrift.Type.LIST, 0)
    {
      output.writeListBegin(Thrift.Type.STRING, this.success.length)
      {
        for(var iter186 in this.success)
        {
          if (this.success.hasOwnProperty(iter186))
          {
            iter186=this.success[iter186]
            output.writeString(iter186)
          }
        }
      }
      output.writeListEnd()
    }
    output.writeFieldEnd()
  }
  if (null != this.o2) {
    output.writeFieldBegin('o2', Thrift.Type.STRUCT, 1)
    this.o2.write(output)
    output.writeFieldEnd()
  }
  output.writeFieldStop()
  output.writeStructEnd()
  return
}

var ThriftHiveMetastore_get_partitions_ps_args = function(args){
  this.db_name = null
  this.tbl_name = null
  this.part_vals = null
  this.max_parts = -1
if( args != null ){  if (null != args.db_name)
  this.db_name = args.db_name
  if (null != args.tbl_name)
  this.tbl_name = args.tbl_name
  if (null != args.part_vals)
  this.part_vals = args.part_vals
  if (null != args.max_parts)
  this.max_parts = args.max_parts
}}
ThriftHiveMetastore_get_partitions_ps_args.prototype = {}
ThriftHiveMetastore_get_partitions_ps_args.prototype.read = function(input){ 
  var ret = input.readStructBegin()
  while (1) 
  {
    var ret = input.readFieldBegin()
    var fname = ret.fname
    var ftype = ret.ftype
    var fid   = ret.fid
    if (ftype == Thrift.Type.STOP) 
      break
    switch(fid)
    {
      case 1:      if (ftype == Thrift.Type.STRING) {
        this.db_name = input.readString()
      } else {
        input.skip(ftype)
      }
      break
      case 2:      if (ftype == Thrift.Type.STRING) {
        this.tbl_name = input.readString()
      } else {
        input.skip(ftype)
      }
      break
      case 3:      if (ftype == Thrift.Type.LIST) {
        {
          var _size187 = 0
          var rtmp3
          this.part_vals = []
          var _etype190 = 0
          rtmp3 = input.readListBegin()
          _etype190 = rtmp3.etype
          _size187 = rtmp3.size
          for (var _i191 = 0; _i191 < _size187; ++_i191)
          {
            var elem192 = null
            elem192 = input.readString()
            this.part_vals.push(elem192)
          }
          input.readListEnd()
        }
      } else {
        input.skip(ftype)
      }
      break
      case 4:      if (ftype == Thrift.Type.I16) {
        this.max_parts = input.readI16()
      } else {
        input.skip(ftype)
      }
      break
      default:
        input.skip(ftype)
    }
    input.readFieldEnd()
  }
  input.readStructEnd()
  return
}

ThriftHiveMetastore_get_partitions_ps_args.prototype.write = function(output){ 
  output.writeStructBegin('ThriftHiveMetastore_get_partitions_ps_args')
  if (null != this.db_name) {
    output.writeFieldBegin('db_name', Thrift.Type.STRING, 1)
    output.writeString(this.db_name)
    output.writeFieldEnd()
  }
  if (null != this.tbl_name) {
    output.writeFieldBegin('tbl_name', Thrift.Type.STRING, 2)
    output.writeString(this.tbl_name)
    output.writeFieldEnd()
  }
  if (null != this.part_vals) {
    output.writeFieldBegin('part_vals', Thrift.Type.LIST, 3)
    {
      output.writeListBegin(Thrift.Type.STRING, this.part_vals.length)
      {
        for(var iter193 in this.part_vals)
        {
          if (this.part_vals.hasOwnProperty(iter193))
          {
            iter193=this.part_vals[iter193]
            output.writeString(iter193)
          }
        }
      }
      output.writeListEnd()
    }
    output.writeFieldEnd()
  }
  if (null != this.max_parts) {
    output.writeFieldBegin('max_parts', Thrift.Type.I16, 4)
    output.writeI16(this.max_parts)
    output.writeFieldEnd()
  }
  output.writeFieldStop()
  output.writeStructEnd()
  return
}

var ThriftHiveMetastore_get_partitions_ps_result = function(args){
  this.success = null
  this.o1 = null
if( args != null ){  if (null != args.success)
  this.success = args.success
  if (null != args.o1)
  this.o1 = args.o1
}}
ThriftHiveMetastore_get_partitions_ps_result.prototype = {}
ThriftHiveMetastore_get_partitions_ps_result.prototype.read = function(input){ 
  var ret = input.readStructBegin()
  while (1) 
  {
    var ret = input.readFieldBegin()
    var fname = ret.fname
    var ftype = ret.ftype
    var fid   = ret.fid
    if (ftype == Thrift.Type.STOP) 
      break
    switch(fid)
    {
      case 0:      if (ftype == Thrift.Type.LIST) {
        {
          var _size194 = 0
          var rtmp3
          this.success = []
          var _etype197 = 0
          rtmp3 = input.readListBegin()
          _etype197 = rtmp3.etype
          _size194 = rtmp3.size
          for (var _i198 = 0; _i198 < _size194; ++_i198)
          {
            var elem199 = null
            elem199 = new ttypes.Partition()
            elem199.read(input)
            this.success.push(elem199)
          }
          input.readListEnd()
        }
      } else {
        input.skip(ftype)
      }
      break
      case 1:      if (ftype == Thrift.Type.STRUCT) {
        this.o1 = new ttypes.MetaException()
        this.o1.read(input)
      } else {
        input.skip(ftype)
      }
      break
      default:
        input.skip(ftype)
    }
    input.readFieldEnd()
  }
  input.readStructEnd()
  return
}

ThriftHiveMetastore_get_partitions_ps_result.prototype.write = function(output){ 
  output.writeStructBegin('ThriftHiveMetastore_get_partitions_ps_result')
  if (null != this.success) {
    output.writeFieldBegin('success', Thrift.Type.LIST, 0)
    {
      output.writeListBegin(Thrift.Type.STRUCT, this.success.length)
      {
        for(var iter200 in this.success)
        {
          if (this.success.hasOwnProperty(iter200))
          {
            iter200=this.success[iter200]
            iter200.write(output)
          }
        }
      }
      output.writeListEnd()
    }
    output.writeFieldEnd()
  }
  if (null != this.o1) {
    output.writeFieldBegin('o1', Thrift.Type.STRUCT, 1)
    this.o1.write(output)
    output.writeFieldEnd()
  }
  output.writeFieldStop()
  output.writeStructEnd()
  return
}

var ThriftHiveMetastore_get_partition_names_ps_args = function(args){
  this.db_name = null
  this.tbl_name = null
  this.part_vals = null
  this.max_parts = -1
if( args != null ){  if (null != args.db_name)
  this.db_name = args.db_name
  if (null != args.tbl_name)
  this.tbl_name = args.tbl_name
  if (null != args.part_vals)
  this.part_vals = args.part_vals
  if (null != args.max_parts)
  this.max_parts = args.max_parts
}}
ThriftHiveMetastore_get_partition_names_ps_args.prototype = {}
ThriftHiveMetastore_get_partition_names_ps_args.prototype.read = function(input){ 
  var ret = input.readStructBegin()
  while (1) 
  {
    var ret = input.readFieldBegin()
    var fname = ret.fname
    var ftype = ret.ftype
    var fid   = ret.fid
    if (ftype == Thrift.Type.STOP) 
      break
    switch(fid)
    {
      case 1:      if (ftype == Thrift.Type.STRING) {
        this.db_name = input.readString()
      } else {
        input.skip(ftype)
      }
      break
      case 2:      if (ftype == Thrift.Type.STRING) {
        this.tbl_name = input.readString()
      } else {
        input.skip(ftype)
      }
      break
      case 3:      if (ftype == Thrift.Type.LIST) {
        {
          var _size201 = 0
          var rtmp3
          this.part_vals = []
          var _etype204 = 0
          rtmp3 = input.readListBegin()
          _etype204 = rtmp3.etype
          _size201 = rtmp3.size
          for (var _i205 = 0; _i205 < _size201; ++_i205)
          {
            var elem206 = null
            elem206 = input.readString()
            this.part_vals.push(elem206)
          }
          input.readListEnd()
        }
      } else {
        input.skip(ftype)
      }
      break
      case 4:      if (ftype == Thrift.Type.I16) {
        this.max_parts = input.readI16()
      } else {
        input.skip(ftype)
      }
      break
      default:
        input.skip(ftype)
    }
    input.readFieldEnd()
  }
  input.readStructEnd()
  return
}

ThriftHiveMetastore_get_partition_names_ps_args.prototype.write = function(output){ 
  output.writeStructBegin('ThriftHiveMetastore_get_partition_names_ps_args')
  if (null != this.db_name) {
    output.writeFieldBegin('db_name', Thrift.Type.STRING, 1)
    output.writeString(this.db_name)
    output.writeFieldEnd()
  }
  if (null != this.tbl_name) {
    output.writeFieldBegin('tbl_name', Thrift.Type.STRING, 2)
    output.writeString(this.tbl_name)
    output.writeFieldEnd()
  }
  if (null != this.part_vals) {
    output.writeFieldBegin('part_vals', Thrift.Type.LIST, 3)
    {
      output.writeListBegin(Thrift.Type.STRING, this.part_vals.length)
      {
        for(var iter207 in this.part_vals)
        {
          if (this.part_vals.hasOwnProperty(iter207))
          {
            iter207=this.part_vals[iter207]
            output.writeString(iter207)
          }
        }
      }
      output.writeListEnd()
    }
    output.writeFieldEnd()
  }
  if (null != this.max_parts) {
    output.writeFieldBegin('max_parts', Thrift.Type.I16, 4)
    output.writeI16(this.max_parts)
    output.writeFieldEnd()
  }
  output.writeFieldStop()
  output.writeStructEnd()
  return
}

var ThriftHiveMetastore_get_partition_names_ps_result = function(args){
  this.success = null
  this.o1 = null
if( args != null ){  if (null != args.success)
  this.success = args.success
  if (null != args.o1)
  this.o1 = args.o1
}}
ThriftHiveMetastore_get_partition_names_ps_result.prototype = {}
ThriftHiveMetastore_get_partition_names_ps_result.prototype.read = function(input){ 
  var ret = input.readStructBegin()
  while (1) 
  {
    var ret = input.readFieldBegin()
    var fname = ret.fname
    var ftype = ret.ftype
    var fid   = ret.fid
    if (ftype == Thrift.Type.STOP) 
      break
    switch(fid)
    {
      case 0:      if (ftype == Thrift.Type.LIST) {
        {
          var _size208 = 0
          var rtmp3
          this.success = []
          var _etype211 = 0
          rtmp3 = input.readListBegin()
          _etype211 = rtmp3.etype
          _size208 = rtmp3.size
          for (var _i212 = 0; _i212 < _size208; ++_i212)
          {
            var elem213 = null
            elem213 = input.readString()
            this.success.push(elem213)
          }
          input.readListEnd()
        }
      } else {
        input.skip(ftype)
      }
      break
      case 1:      if (ftype == Thrift.Type.STRUCT) {
        this.o1 = new ttypes.MetaException()
        this.o1.read(input)
      } else {
        input.skip(ftype)
      }
      break
      default:
        input.skip(ftype)
    }
    input.readFieldEnd()
  }
  input.readStructEnd()
  return
}

ThriftHiveMetastore_get_partition_names_ps_result.prototype.write = function(output){ 
  output.writeStructBegin('ThriftHiveMetastore_get_partition_names_ps_result')
  if (null != this.success) {
    output.writeFieldBegin('success', Thrift.Type.LIST, 0)
    {
      output.writeListBegin(Thrift.Type.STRING, this.success.length)
      {
        for(var iter214 in this.success)
        {
          if (this.success.hasOwnProperty(iter214))
          {
            iter214=this.success[iter214]
            output.writeString(iter214)
          }
        }
      }
      output.writeListEnd()
    }
    output.writeFieldEnd()
  }
  if (null != this.o1) {
    output.writeFieldBegin('o1', Thrift.Type.STRUCT, 1)
    this.o1.write(output)
    output.writeFieldEnd()
  }
  output.writeFieldStop()
  output.writeStructEnd()
  return
}

var ThriftHiveMetastore_alter_partition_args = function(args){
  this.db_name = null
  this.tbl_name = null
  this.new_part = null
if( args != null ){  if (null != args.db_name)
  this.db_name = args.db_name
  if (null != args.tbl_name)
  this.tbl_name = args.tbl_name
  if (null != args.new_part)
  this.new_part = args.new_part
}}
ThriftHiveMetastore_alter_partition_args.prototype = {}
ThriftHiveMetastore_alter_partition_args.prototype.read = function(input){ 
  var ret = input.readStructBegin()
  while (1) 
  {
    var ret = input.readFieldBegin()
    var fname = ret.fname
    var ftype = ret.ftype
    var fid   = ret.fid
    if (ftype == Thrift.Type.STOP) 
      break
    switch(fid)
    {
      case 1:      if (ftype == Thrift.Type.STRING) {
        this.db_name = input.readString()
      } else {
        input.skip(ftype)
      }
      break
      case 2:      if (ftype == Thrift.Type.STRING) {
        this.tbl_name = input.readString()
      } else {
        input.skip(ftype)
      }
      break
      case 3:      if (ftype == Thrift.Type.STRUCT) {
        this.new_part = new ttypes.Partition()
        this.new_part.read(input)
      } else {
        input.skip(ftype)
      }
      break
      default:
        input.skip(ftype)
    }
    input.readFieldEnd()
  }
  input.readStructEnd()
  return
}

ThriftHiveMetastore_alter_partition_args.prototype.write = function(output){ 
  output.writeStructBegin('ThriftHiveMetastore_alter_partition_args')
  if (null != this.db_name) {
    output.writeFieldBegin('db_name', Thrift.Type.STRING, 1)
    output.writeString(this.db_name)
    output.writeFieldEnd()
  }
  if (null != this.tbl_name) {
    output.writeFieldBegin('tbl_name', Thrift.Type.STRING, 2)
    output.writeString(this.tbl_name)
    output.writeFieldEnd()
  }
  if (null != this.new_part) {
    output.writeFieldBegin('new_part', Thrift.Type.STRUCT, 3)
    this.new_part.write(output)
    output.writeFieldEnd()
  }
  output.writeFieldStop()
  output.writeStructEnd()
  return
}

var ThriftHiveMetastore_alter_partition_result = function(args){
  this.o1 = null
  this.o2 = null
if( args != null ){  if (null != args.o1)
  this.o1 = args.o1
  if (null != args.o2)
  this.o2 = args.o2
}}
ThriftHiveMetastore_alter_partition_result.prototype = {}
ThriftHiveMetastore_alter_partition_result.prototype.read = function(input){ 
  var ret = input.readStructBegin()
  while (1) 
  {
    var ret = input.readFieldBegin()
    var fname = ret.fname
    var ftype = ret.ftype
    var fid   = ret.fid
    if (ftype == Thrift.Type.STOP) 
      break
    switch(fid)
    {
      case 1:      if (ftype == Thrift.Type.STRUCT) {
        this.o1 = new ttypes.InvalidOperationException()
        this.o1.read(input)
      } else {
        input.skip(ftype)
      }
      break
      case 2:      if (ftype == Thrift.Type.STRUCT) {
        this.o2 = new ttypes.MetaException()
        this.o2.read(input)
      } else {
        input.skip(ftype)
      }
      break
      default:
        input.skip(ftype)
    }
    input.readFieldEnd()
  }
  input.readStructEnd()
  return
}

ThriftHiveMetastore_alter_partition_result.prototype.write = function(output){ 
  output.writeStructBegin('ThriftHiveMetastore_alter_partition_result')
  if (null != this.o1) {
    output.writeFieldBegin('o1', Thrift.Type.STRUCT, 1)
    this.o1.write(output)
    output.writeFieldEnd()
  }
  if (null != this.o2) {
    output.writeFieldBegin('o2', Thrift.Type.STRUCT, 2)
    this.o2.write(output)
    output.writeFieldEnd()
  }
  output.writeFieldStop()
  output.writeStructEnd()
  return
}

var ThriftHiveMetastore_get_config_value_args = function(args){
  this.name = null
  this.defaultValue = null
if( args != null ){  if (null != args.name)
  this.name = args.name
  if (null != args.defaultValue)
  this.defaultValue = args.defaultValue
}}
ThriftHiveMetastore_get_config_value_args.prototype = {}
ThriftHiveMetastore_get_config_value_args.prototype.read = function(input){ 
  var ret = input.readStructBegin()
  while (1) 
  {
    var ret = input.readFieldBegin()
    var fname = ret.fname
    var ftype = ret.ftype
    var fid   = ret.fid
    if (ftype == Thrift.Type.STOP) 
      break
    switch(fid)
    {
      case 1:      if (ftype == Thrift.Type.STRING) {
        this.name = input.readString()
      } else {
        input.skip(ftype)
      }
      break
      case 2:      if (ftype == Thrift.Type.STRING) {
        this.defaultValue = input.readString()
      } else {
        input.skip(ftype)
      }
      break
      default:
        input.skip(ftype)
    }
    input.readFieldEnd()
  }
  input.readStructEnd()
  return
}

ThriftHiveMetastore_get_config_value_args.prototype.write = function(output){ 
  output.writeStructBegin('ThriftHiveMetastore_get_config_value_args')
  if (null != this.name) {
    output.writeFieldBegin('name', Thrift.Type.STRING, 1)
    output.writeString(this.name)
    output.writeFieldEnd()
  }
  if (null != this.defaultValue) {
    output.writeFieldBegin('defaultValue', Thrift.Type.STRING, 2)
    output.writeString(this.defaultValue)
    output.writeFieldEnd()
  }
  output.writeFieldStop()
  output.writeStructEnd()
  return
}

var ThriftHiveMetastore_get_config_value_result = function(args){
  this.success = null
  this.o1 = null
if( args != null ){  if (null != args.success)
  this.success = args.success
  if (null != args.o1)
  this.o1 = args.o1
}}
ThriftHiveMetastore_get_config_value_result.prototype = {}
ThriftHiveMetastore_get_config_value_result.prototype.read = function(input){ 
  var ret = input.readStructBegin()
  while (1) 
  {
    var ret = input.readFieldBegin()
    var fname = ret.fname
    var ftype = ret.ftype
    var fid   = ret.fid
    if (ftype == Thrift.Type.STOP) 
      break
    switch(fid)
    {
      case 0:      if (ftype == Thrift.Type.STRING) {
        this.success = input.readString()
      } else {
        input.skip(ftype)
      }
      break
      case 1:      if (ftype == Thrift.Type.STRUCT) {
        this.o1 = new ttypes.ConfigValSecurityException()
        this.o1.read(input)
      } else {
        input.skip(ftype)
      }
      break
      default:
        input.skip(ftype)
    }
    input.readFieldEnd()
  }
  input.readStructEnd()
  return
}

ThriftHiveMetastore_get_config_value_result.prototype.write = function(output){ 
  output.writeStructBegin('ThriftHiveMetastore_get_config_value_result')
  if (null != this.success) {
    output.writeFieldBegin('success', Thrift.Type.STRING, 0)
    output.writeString(this.success)
    output.writeFieldEnd()
  }
  if (null != this.o1) {
    output.writeFieldBegin('o1', Thrift.Type.STRUCT, 1)
    this.o1.write(output)
    output.writeFieldEnd()
  }
  output.writeFieldStop()
  output.writeStructEnd()
  return
}

var ThriftHiveMetastore_partition_name_to_vals_args = function(args){
  this.part_name = null
if( args != null ){  if (null != args.part_name)
  this.part_name = args.part_name
}}
ThriftHiveMetastore_partition_name_to_vals_args.prototype = {}
ThriftHiveMetastore_partition_name_to_vals_args.prototype.read = function(input){ 
  var ret = input.readStructBegin()
  while (1) 
  {
    var ret = input.readFieldBegin()
    var fname = ret.fname
    var ftype = ret.ftype
    var fid   = ret.fid
    if (ftype == Thrift.Type.STOP) 
      break
    switch(fid)
    {
      case 1:      if (ftype == Thrift.Type.STRING) {
        this.part_name = input.readString()
      } else {
        input.skip(ftype)
      }
      break
      default:
        input.skip(ftype)
    }
    input.readFieldEnd()
  }
  input.readStructEnd()
  return
}

ThriftHiveMetastore_partition_name_to_vals_args.prototype.write = function(output){ 
  output.writeStructBegin('ThriftHiveMetastore_partition_name_to_vals_args')
  if (null != this.part_name) {
    output.writeFieldBegin('part_name', Thrift.Type.STRING, 1)
    output.writeString(this.part_name)
    output.writeFieldEnd()
  }
  output.writeFieldStop()
  output.writeStructEnd()
  return
}

var ThriftHiveMetastore_partition_name_to_vals_result = function(args){
  this.success = null
  this.o1 = null
if( args != null ){  if (null != args.success)
  this.success = args.success
  if (null != args.o1)
  this.o1 = args.o1
}}
ThriftHiveMetastore_partition_name_to_vals_result.prototype = {}
ThriftHiveMetastore_partition_name_to_vals_result.prototype.read = function(input){ 
  var ret = input.readStructBegin()
  while (1) 
  {
    var ret = input.readFieldBegin()
    var fname = ret.fname
    var ftype = ret.ftype
    var fid   = ret.fid
    if (ftype == Thrift.Type.STOP) 
      break
    switch(fid)
    {
      case 0:      if (ftype == Thrift.Type.LIST) {
        {
          var _size215 = 0
          var rtmp3
          this.success = []
          var _etype218 = 0
          rtmp3 = input.readListBegin()
          _etype218 = rtmp3.etype
          _size215 = rtmp3.size
          for (var _i219 = 0; _i219 < _size215; ++_i219)
          {
            var elem220 = null
            elem220 = input.readString()
            this.success.push(elem220)
          }
          input.readListEnd()
        }
      } else {
        input.skip(ftype)
      }
      break
      case 1:      if (ftype == Thrift.Type.STRUCT) {
        this.o1 = new ttypes.MetaException()
        this.o1.read(input)
      } else {
        input.skip(ftype)
      }
      break
      default:
        input.skip(ftype)
    }
    input.readFieldEnd()
  }
  input.readStructEnd()
  return
}

ThriftHiveMetastore_partition_name_to_vals_result.prototype.write = function(output){ 
  output.writeStructBegin('ThriftHiveMetastore_partition_name_to_vals_result')
  if (null != this.success) {
    output.writeFieldBegin('success', Thrift.Type.LIST, 0)
    {
      output.writeListBegin(Thrift.Type.STRING, this.success.length)
      {
        for(var iter221 in this.success)
        {
          if (this.success.hasOwnProperty(iter221))
          {
            iter221=this.success[iter221]
            output.writeString(iter221)
          }
        }
      }
      output.writeListEnd()
    }
    output.writeFieldEnd()
  }
  if (null != this.o1) {
    output.writeFieldBegin('o1', Thrift.Type.STRUCT, 1)
    this.o1.write(output)
    output.writeFieldEnd()
  }
  output.writeFieldStop()
  output.writeStructEnd()
  return
}

var ThriftHiveMetastore_partition_name_to_spec_args = function(args){
  this.part_name = null
if( args != null ){  if (null != args.part_name)
  this.part_name = args.part_name
}}
ThriftHiveMetastore_partition_name_to_spec_args.prototype = {}
ThriftHiveMetastore_partition_name_to_spec_args.prototype.read = function(input){ 
  var ret = input.readStructBegin()
  while (1) 
  {
    var ret = input.readFieldBegin()
    var fname = ret.fname
    var ftype = ret.ftype
    var fid   = ret.fid
    if (ftype == Thrift.Type.STOP) 
      break
    switch(fid)
    {
      case 1:      if (ftype == Thrift.Type.STRING) {
        this.part_name = input.readString()
      } else {
        input.skip(ftype)
      }
      break
      default:
        input.skip(ftype)
    }
    input.readFieldEnd()
  }
  input.readStructEnd()
  return
}

ThriftHiveMetastore_partition_name_to_spec_args.prototype.write = function(output){ 
  output.writeStructBegin('ThriftHiveMetastore_partition_name_to_spec_args')
  if (null != this.part_name) {
    output.writeFieldBegin('part_name', Thrift.Type.STRING, 1)
    output.writeString(this.part_name)
    output.writeFieldEnd()
  }
  output.writeFieldStop()
  output.writeStructEnd()
  return
}

var ThriftHiveMetastore_partition_name_to_spec_result = function(args){
  this.success = null
  this.o1 = null
if( args != null ){  if (null != args.success)
  this.success = args.success
  if (null != args.o1)
  this.o1 = args.o1
}}
ThriftHiveMetastore_partition_name_to_spec_result.prototype = {}
ThriftHiveMetastore_partition_name_to_spec_result.prototype.read = function(input){ 
  var ret = input.readStructBegin()
  while (1) 
  {
    var ret = input.readFieldBegin()
    var fname = ret.fname
    var ftype = ret.ftype
    var fid   = ret.fid
    if (ftype == Thrift.Type.STOP) 
      break
    switch(fid)
    {
      case 0:      if (ftype == Thrift.Type.MAP) {
        {
          var _size222 = 0
          var rtmp3
          this.success = {}
          var _ktype223 = 0
          var _vtype224 = 0
          rtmp3 = input.readMapBegin()
          _ktype223= rtmp3.ktype
          _vtype224= rtmp3.vtype
          _size222= rtmp3.size
          for (var _i226 = 0; _i226 < _size222; ++_i226)
          {
            key227 = null
            val228 = null
            key227 = input.readString()
            val228 = input.readString()
            this.success[key227] = val228
          }
          input.readMapEnd()
        }
      } else {
        input.skip(ftype)
      }
      break
      case 1:      if (ftype == Thrift.Type.STRUCT) {
        this.o1 = new ttypes.MetaException()
        this.o1.read(input)
      } else {
        input.skip(ftype)
      }
      break
      default:
        input.skip(ftype)
    }
    input.readFieldEnd()
  }
  input.readStructEnd()
  return
}

ThriftHiveMetastore_partition_name_to_spec_result.prototype.write = function(output){ 
  output.writeStructBegin('ThriftHiveMetastore_partition_name_to_spec_result')
  if (null != this.success) {
    output.writeFieldBegin('success', Thrift.Type.MAP, 0)
    {
      output.writeMapBegin(Thrift.Type.STRING, Thrift.Type.STRING, Thrift.objectLength(this.success))
      {
        for(var kiter229 in this.success)        {
          if (this.success.hasOwnProperty(kiter229))
          {
            var viter230 = this.success[kiter229]
            output.writeString(kiter229)
            output.writeString(viter230)
          }
        }
      }
      output.writeMapEnd()
    }
    output.writeFieldEnd()
  }
  if (null != this.o1) {
    output.writeFieldBegin('o1', Thrift.Type.STRUCT, 1)
    this.o1.write(output)
    output.writeFieldEnd()
  }
  output.writeFieldStop()
  output.writeStructEnd()
  return
}

var ThriftHiveMetastoreClient = exports.Client = function(output, pClass) {
    this.output = output;
    this.pClass = pClass;
    this.seqid = 0;
    this._reqs = {}
}
Thrift.inherits(ThriftHiveMetastoreClient, FacebookServiceClient)
ThriftHiveMetastoreClient.prototype.create_database = function(database,callback){
  this.seqid += 1;
  this._reqs[this.seqid] = callback;
    this.send_create_database(database)
}

ThriftHiveMetastoreClient.prototype.send_create_database = function(database){
  var output = new this.pClass(this.output);
  output.writeMessageBegin('create_database', Thrift.MessageType.CALL, this.seqid)
  var args = new ThriftHiveMetastore_create_database_args()
  args.database = database
  args.write(output)
  output.writeMessageEnd()
  return this.output.flush()
}

ThriftHiveMetastoreClient.prototype.recv_create_database = function(input,mtype,rseqid){
  var callback = this._reqs[rseqid] || function() {};
  delete this._reqs[rseqid];
  if (mtype == Thrift.MessageType.EXCEPTION) {
    var x = new Thrift.TApplicationException()
    x.read(input)
    input.readMessageEnd()
    return callback(x);
  }
  var result = new ThriftHiveMetastore_create_database_result()
  result.read(input)
  input.readMessageEnd()

  if (null != result.o1) {
    return callback(result.o1);
  }
  if (null != result.o2) {
    return callback(result.o2);
  }
  if (null != result.o3) {
    return callback(result.o3);
  }
  callback(null)
}
ThriftHiveMetastoreClient.prototype.get_database = function(name,callback){
  this.seqid += 1;
  this._reqs[this.seqid] = callback;
    this.send_get_database(name)
}

ThriftHiveMetastoreClient.prototype.send_get_database = function(name){
  var output = new this.pClass(this.output);
  output.writeMessageBegin('get_database', Thrift.MessageType.CALL, this.seqid)
  var args = new ThriftHiveMetastore_get_database_args()
  args.name = name
  args.write(output)
  output.writeMessageEnd()
  return this.output.flush()
}

ThriftHiveMetastoreClient.prototype.recv_get_database = function(input,mtype,rseqid){
  var callback = this._reqs[rseqid] || function() {};
  delete this._reqs[rseqid];
  if (mtype == Thrift.MessageType.EXCEPTION) {
    var x = new Thrift.TApplicationException()
    x.read(input)
    input.readMessageEnd()
    return callback(x);
  }
  var result = new ThriftHiveMetastore_get_database_result()
  result.read(input)
  input.readMessageEnd()

  if (null != result.o1) {
    return callback(result.o1);
  }
  if (null != result.o2) {
    return callback(result.o2);
  }
  if (null != result.success ) {
    return callback(null, result.success);
  }
  return callback("get_database failed: unknown result");
}
ThriftHiveMetastoreClient.prototype.drop_database = function(name,deleteData,callback){
  this.seqid += 1;
  this._reqs[this.seqid] = callback;
    this.send_drop_database(name, deleteData)
}

ThriftHiveMetastoreClient.prototype.send_drop_database = function(name,deleteData){
  var output = new this.pClass(this.output);
  output.writeMessageBegin('drop_database', Thrift.MessageType.CALL, this.seqid)
  var args = new ThriftHiveMetastore_drop_database_args()
  args.name = name
  args.deleteData = deleteData
  args.write(output)
  output.writeMessageEnd()
  return this.output.flush()
}

ThriftHiveMetastoreClient.prototype.recv_drop_database = function(input,mtype,rseqid){
  var callback = this._reqs[rseqid] || function() {};
  delete this._reqs[rseqid];
  if (mtype == Thrift.MessageType.EXCEPTION) {
    var x = new Thrift.TApplicationException()
    x.read(input)
    input.readMessageEnd()
    return callback(x);
  }
  var result = new ThriftHiveMetastore_drop_database_result()
  result.read(input)
  input.readMessageEnd()

  if (null != result.o1) {
    return callback(result.o1);
  }
  if (null != result.o2) {
    return callback(result.o2);
  }
  if (null != result.o3) {
    return callback(result.o3);
  }
  callback(null)
}
ThriftHiveMetastoreClient.prototype.get_databases = function(pattern,callback){
  this.seqid += 1;
  this._reqs[this.seqid] = callback;
    this.send_get_databases(pattern)
}

ThriftHiveMetastoreClient.prototype.send_get_databases = function(pattern){
  var output = new this.pClass(this.output);
  output.writeMessageBegin('get_databases', Thrift.MessageType.CALL, this.seqid)
  var args = new ThriftHiveMetastore_get_databases_args()
  args.pattern = pattern
  args.write(output)
  output.writeMessageEnd()
  return this.output.flush()
}

ThriftHiveMetastoreClient.prototype.recv_get_databases = function(input,mtype,rseqid){
  var callback = this._reqs[rseqid] || function() {};
  delete this._reqs[rseqid];
  if (mtype == Thrift.MessageType.EXCEPTION) {
    var x = new Thrift.TApplicationException()
    x.read(input)
    input.readMessageEnd()
    return callback(x);
  }
  var result = new ThriftHiveMetastore_get_databases_result()
  result.read(input)
  input.readMessageEnd()

  if (null != result.o1) {
    return callback(result.o1);
  }
  if (null != result.success ) {
    return callback(null, result.success);
  }
  return callback("get_databases failed: unknown result");
}
ThriftHiveMetastoreClient.prototype.get_all_databases = function(callback){
  this.seqid += 1;
  this._reqs[this.seqid] = callback;
    this.send_get_all_databases()
}

ThriftHiveMetastoreClient.prototype.send_get_all_databases = function(){
  var output = new this.pClass(this.output);
  output.writeMessageBegin('get_all_databases', Thrift.MessageType.CALL, this.seqid)
  var args = new ThriftHiveMetastore_get_all_databases_args()
  args.write(output)
  output.writeMessageEnd()
  return this.output.flush()
}

ThriftHiveMetastoreClient.prototype.recv_get_all_databases = function(input,mtype,rseqid){
  var callback = this._reqs[rseqid] || function() {};
  delete this._reqs[rseqid];
  if (mtype == Thrift.MessageType.EXCEPTION) {
    var x = new Thrift.TApplicationException()
    x.read(input)
    input.readMessageEnd()
    return callback(x);
  }
  var result = new ThriftHiveMetastore_get_all_databases_result()
  result.read(input)
  input.readMessageEnd()

  if (null != result.o1) {
    return callback(result.o1);
  }
  if (null != result.success ) {
    return callback(null, result.success);
  }
  return callback("get_all_databases failed: unknown result");
}
ThriftHiveMetastoreClient.prototype.get_type = function(name,callback){
  this.seqid += 1;
  this._reqs[this.seqid] = callback;
    this.send_get_type(name)
}

ThriftHiveMetastoreClient.prototype.send_get_type = function(name){
  var output = new this.pClass(this.output);
  output.writeMessageBegin('get_type', Thrift.MessageType.CALL, this.seqid)
  var args = new ThriftHiveMetastore_get_type_args()
  args.name = name
  args.write(output)
  output.writeMessageEnd()
  return this.output.flush()
}

ThriftHiveMetastoreClient.prototype.recv_get_type = function(input,mtype,rseqid){
  var callback = this._reqs[rseqid] || function() {};
  delete this._reqs[rseqid];
  if (mtype == Thrift.MessageType.EXCEPTION) {
    var x = new Thrift.TApplicationException()
    x.read(input)
    input.readMessageEnd()
    return callback(x);
  }
  var result = new ThriftHiveMetastore_get_type_result()
  result.read(input)
  input.readMessageEnd()

  if (null != result.o1) {
    return callback(result.o1);
  }
  if (null != result.o2) {
    return callback(result.o2);
  }
  if (null != result.success ) {
    return callback(null, result.success);
  }
  return callback("get_type failed: unknown result");
}
ThriftHiveMetastoreClient.prototype.create_type = function(type,callback){
  this.seqid += 1;
  this._reqs[this.seqid] = callback;
    this.send_create_type(type)
}

ThriftHiveMetastoreClient.prototype.send_create_type = function(type){
  var output = new this.pClass(this.output);
  output.writeMessageBegin('create_type', Thrift.MessageType.CALL, this.seqid)
  var args = new ThriftHiveMetastore_create_type_args()
  args.type = type
  args.write(output)
  output.writeMessageEnd()
  return this.output.flush()
}

ThriftHiveMetastoreClient.prototype.recv_create_type = function(input,mtype,rseqid){
  var callback = this._reqs[rseqid] || function() {};
  delete this._reqs[rseqid];
  if (mtype == Thrift.MessageType.EXCEPTION) {
    var x = new Thrift.TApplicationException()
    x.read(input)
    input.readMessageEnd()
    return callback(x);
  }
  var result = new ThriftHiveMetastore_create_type_result()
  result.read(input)
  input.readMessageEnd()

  if (null != result.o1) {
    return callback(result.o1);
  }
  if (null != result.o2) {
    return callback(result.o2);
  }
  if (null != result.o3) {
    return callback(result.o3);
  }
  if (null != result.success ) {
    return callback(null, result.success);
  }
  return callback("create_type failed: unknown result");
}
ThriftHiveMetastoreClient.prototype.drop_type = function(type,callback){
  this.seqid += 1;
  this._reqs[this.seqid] = callback;
    this.send_drop_type(type)
}

ThriftHiveMetastoreClient.prototype.send_drop_type = function(type){
  var output = new this.pClass(this.output);
  output.writeMessageBegin('drop_type', Thrift.MessageType.CALL, this.seqid)
  var args = new ThriftHiveMetastore_drop_type_args()
  args.type = type
  args.write(output)
  output.writeMessageEnd()
  return this.output.flush()
}

ThriftHiveMetastoreClient.prototype.recv_drop_type = function(input,mtype,rseqid){
  var callback = this._reqs[rseqid] || function() {};
  delete this._reqs[rseqid];
  if (mtype == Thrift.MessageType.EXCEPTION) {
    var x = new Thrift.TApplicationException()
    x.read(input)
    input.readMessageEnd()
    return callback(x);
  }
  var result = new ThriftHiveMetastore_drop_type_result()
  result.read(input)
  input.readMessageEnd()

  if (null != result.o1) {
    return callback(result.o1);
  }
  if (null != result.o2) {
    return callback(result.o2);
  }
  if (null != result.success ) {
    return callback(null, result.success);
  }
  return callback("drop_type failed: unknown result");
}
ThriftHiveMetastoreClient.prototype.get_type_all = function(name,callback){
  this.seqid += 1;
  this._reqs[this.seqid] = callback;
    this.send_get_type_all(name)
}

ThriftHiveMetastoreClient.prototype.send_get_type_all = function(name){
  var output = new this.pClass(this.output);
  output.writeMessageBegin('get_type_all', Thrift.MessageType.CALL, this.seqid)
  var args = new ThriftHiveMetastore_get_type_all_args()
  args.name = name
  args.write(output)
  output.writeMessageEnd()
  return this.output.flush()
}

ThriftHiveMetastoreClient.prototype.recv_get_type_all = function(input,mtype,rseqid){
  var callback = this._reqs[rseqid] || function() {};
  delete this._reqs[rseqid];
  if (mtype == Thrift.MessageType.EXCEPTION) {
    var x = new Thrift.TApplicationException()
    x.read(input)
    input.readMessageEnd()
    return callback(x);
  }
  var result = new ThriftHiveMetastore_get_type_all_result()
  result.read(input)
  input.readMessageEnd()

  if (null != result.o2) {
    return callback(result.o2);
  }
  if (null != result.success ) {
    return callback(null, result.success);
  }
  return callback("get_type_all failed: unknown result");
}
ThriftHiveMetastoreClient.prototype.get_fields = function(db_name,table_name,callback){
  this.seqid += 1;
  this._reqs[this.seqid] = callback;
    this.send_get_fields(db_name, table_name)
}

ThriftHiveMetastoreClient.prototype.send_get_fields = function(db_name,table_name){
  var output = new this.pClass(this.output);
  output.writeMessageBegin('get_fields', Thrift.MessageType.CALL, this.seqid)
  var args = new ThriftHiveMetastore_get_fields_args()
  args.db_name = db_name
  args.table_name = table_name
  args.write(output)
  output.writeMessageEnd()
  return this.output.flush()
}

ThriftHiveMetastoreClient.prototype.recv_get_fields = function(input,mtype,rseqid){
  var callback = this._reqs[rseqid] || function() {};
  delete this._reqs[rseqid];
  if (mtype == Thrift.MessageType.EXCEPTION) {
    var x = new Thrift.TApplicationException()
    x.read(input)
    input.readMessageEnd()
    return callback(x);
  }
  var result = new ThriftHiveMetastore_get_fields_result()
  result.read(input)
  input.readMessageEnd()

  if (null != result.o1) {
    return callback(result.o1);
  }
  if (null != result.o2) {
    return callback(result.o2);
  }
  if (null != result.o3) {
    return callback(result.o3);
  }
  if (null != result.success ) {
    return callback(null, result.success);
  }
  return callback("get_fields failed: unknown result");
}
ThriftHiveMetastoreClient.prototype.get_schema = function(db_name,table_name,callback){
  this.seqid += 1;
  this._reqs[this.seqid] = callback;
    this.send_get_schema(db_name, table_name)
}

ThriftHiveMetastoreClient.prototype.send_get_schema = function(db_name,table_name){
  var output = new this.pClass(this.output);
  output.writeMessageBegin('get_schema', Thrift.MessageType.CALL, this.seqid)
  var args = new ThriftHiveMetastore_get_schema_args()
  args.db_name = db_name
  args.table_name = table_name
  args.write(output)
  output.writeMessageEnd()
  return this.output.flush()
}

ThriftHiveMetastoreClient.prototype.recv_get_schema = function(input,mtype,rseqid){
  var callback = this._reqs[rseqid] || function() {};
  delete this._reqs[rseqid];
  if (mtype == Thrift.MessageType.EXCEPTION) {
    var x = new Thrift.TApplicationException()
    x.read(input)
    input.readMessageEnd()
    return callback(x);
  }
  var result = new ThriftHiveMetastore_get_schema_result()
  result.read(input)
  input.readMessageEnd()

  if (null != result.o1) {
    return callback(result.o1);
  }
  if (null != result.o2) {
    return callback(result.o2);
  }
  if (null != result.o3) {
    return callback(result.o3);
  }
  if (null != result.success ) {
    return callback(null, result.success);
  }
  return callback("get_schema failed: unknown result");
}
ThriftHiveMetastoreClient.prototype.create_table = function(tbl,callback){
  this.seqid += 1;
  this._reqs[this.seqid] = callback;
    this.send_create_table(tbl)
}

ThriftHiveMetastoreClient.prototype.send_create_table = function(tbl){
  var output = new this.pClass(this.output);
  output.writeMessageBegin('create_table', Thrift.MessageType.CALL, this.seqid)
  var args = new ThriftHiveMetastore_create_table_args()
  args.tbl = tbl
  args.write(output)
  output.writeMessageEnd()
  return this.output.flush()
}

ThriftHiveMetastoreClient.prototype.recv_create_table = function(input,mtype,rseqid){
  var callback = this._reqs[rseqid] || function() {};
  delete this._reqs[rseqid];
  if (mtype == Thrift.MessageType.EXCEPTION) {
    var x = new Thrift.TApplicationException()
    x.read(input)
    input.readMessageEnd()
    return callback(x);
  }
  var result = new ThriftHiveMetastore_create_table_result()
  result.read(input)
  input.readMessageEnd()

  if (null != result.o1) {
    return callback(result.o1);
  }
  if (null != result.o2) {
    return callback(result.o2);
  }
  if (null != result.o3) {
    return callback(result.o3);
  }
  if (null != result.o4) {
    return callback(result.o4);
  }
  callback(null)
}
ThriftHiveMetastoreClient.prototype.drop_table = function(dbname,name,deleteData,callback){
  this.seqid += 1;
  this._reqs[this.seqid] = callback;
    this.send_drop_table(dbname, name, deleteData)
}

ThriftHiveMetastoreClient.prototype.send_drop_table = function(dbname,name,deleteData){
  var output = new this.pClass(this.output);
  output.writeMessageBegin('drop_table', Thrift.MessageType.CALL, this.seqid)
  var args = new ThriftHiveMetastore_drop_table_args()
  args.dbname = dbname
  args.name = name
  args.deleteData = deleteData
  args.write(output)
  output.writeMessageEnd()
  return this.output.flush()
}

ThriftHiveMetastoreClient.prototype.recv_drop_table = function(input,mtype,rseqid){
  var callback = this._reqs[rseqid] || function() {};
  delete this._reqs[rseqid];
  if (mtype == Thrift.MessageType.EXCEPTION) {
    var x = new Thrift.TApplicationException()
    x.read(input)
    input.readMessageEnd()
    return callback(x);
  }
  var result = new ThriftHiveMetastore_drop_table_result()
  result.read(input)
  input.readMessageEnd()

  if (null != result.o1) {
    return callback(result.o1);
  }
  if (null != result.o3) {
    return callback(result.o3);
  }
  callback(null)
}
ThriftHiveMetastoreClient.prototype.get_tables = function(db_name,pattern,callback){
  this.seqid += 1;
  this._reqs[this.seqid] = callback;
    this.send_get_tables(db_name, pattern)
}

ThriftHiveMetastoreClient.prototype.send_get_tables = function(db_name,pattern){
  var output = new this.pClass(this.output);
  output.writeMessageBegin('get_tables', Thrift.MessageType.CALL, this.seqid)
  var args = new ThriftHiveMetastore_get_tables_args()
  args.db_name = db_name
  args.pattern = pattern
  args.write(output)
  output.writeMessageEnd()
  return this.output.flush()
}

ThriftHiveMetastoreClient.prototype.recv_get_tables = function(input,mtype,rseqid){
  var callback = this._reqs[rseqid] || function() {};
  delete this._reqs[rseqid];
  if (mtype == Thrift.MessageType.EXCEPTION) {
    var x = new Thrift.TApplicationException()
    x.read(input)
    input.readMessageEnd()
    return callback(x);
  }
  var result = new ThriftHiveMetastore_get_tables_result()
  result.read(input)
  input.readMessageEnd()

  if (null != result.o1) {
    return callback(result.o1);
  }
  if (null != result.success ) {
    return callback(null, result.success);
  }
  return callback("get_tables failed: unknown result");
}
ThriftHiveMetastoreClient.prototype.get_all_tables = function(db_name,callback){
  this.seqid += 1;
  this._reqs[this.seqid] = callback;
    this.send_get_all_tables(db_name)
}

ThriftHiveMetastoreClient.prototype.send_get_all_tables = function(db_name){
  var output = new this.pClass(this.output);
  output.writeMessageBegin('get_all_tables', Thrift.MessageType.CALL, this.seqid)
  var args = new ThriftHiveMetastore_get_all_tables_args()
  args.db_name = db_name
  args.write(output)
  output.writeMessageEnd()
  return this.output.flush()
}

ThriftHiveMetastoreClient.prototype.recv_get_all_tables = function(input,mtype,rseqid){
  var callback = this._reqs[rseqid] || function() {};
  delete this._reqs[rseqid];
  if (mtype == Thrift.MessageType.EXCEPTION) {
    var x = new Thrift.TApplicationException()
    x.read(input)
    input.readMessageEnd()
    return callback(x);
  }
  var result = new ThriftHiveMetastore_get_all_tables_result()
  result.read(input)
  input.readMessageEnd()

  if (null != result.o1) {
    return callback(result.o1);
  }
  if (null != result.success ) {
    return callback(null, result.success);
  }
  return callback("get_all_tables failed: unknown result");
}
ThriftHiveMetastoreClient.prototype.get_table = function(dbname,tbl_name,callback){
  this.seqid += 1;
  this._reqs[this.seqid] = callback;
    this.send_get_table(dbname, tbl_name)
}

ThriftHiveMetastoreClient.prototype.send_get_table = function(dbname,tbl_name){
  var output = new this.pClass(this.output);
  output.writeMessageBegin('get_table', Thrift.MessageType.CALL, this.seqid)
  var args = new ThriftHiveMetastore_get_table_args()
  args.dbname = dbname
  args.tbl_name = tbl_name
  args.write(output)
  output.writeMessageEnd()
  return this.output.flush()
}

ThriftHiveMetastoreClient.prototype.recv_get_table = function(input,mtype,rseqid){
  var callback = this._reqs[rseqid] || function() {};
  delete this._reqs[rseqid];
  if (mtype == Thrift.MessageType.EXCEPTION) {
    var x = new Thrift.TApplicationException()
    x.read(input)
    input.readMessageEnd()
    return callback(x);
  }
  var result = new ThriftHiveMetastore_get_table_result()
  result.read(input)
  input.readMessageEnd()

  if (null != result.o1) {
    return callback(result.o1);
  }
  if (null != result.o2) {
    return callback(result.o2);
  }
  if (null != result.success ) {
    return callback(null, result.success);
  }
  return callback("get_table failed: unknown result");
}
ThriftHiveMetastoreClient.prototype.alter_table = function(dbname,tbl_name,new_tbl,callback){
  this.seqid += 1;
  this._reqs[this.seqid] = callback;
    this.send_alter_table(dbname, tbl_name, new_tbl)
}

ThriftHiveMetastoreClient.prototype.send_alter_table = function(dbname,tbl_name,new_tbl){
  var output = new this.pClass(this.output);
  output.writeMessageBegin('alter_table', Thrift.MessageType.CALL, this.seqid)
  var args = new ThriftHiveMetastore_alter_table_args()
  args.dbname = dbname
  args.tbl_name = tbl_name
  args.new_tbl = new_tbl
  args.write(output)
  output.writeMessageEnd()
  return this.output.flush()
}

ThriftHiveMetastoreClient.prototype.recv_alter_table = function(input,mtype,rseqid){
  var callback = this._reqs[rseqid] || function() {};
  delete this._reqs[rseqid];
  if (mtype == Thrift.MessageType.EXCEPTION) {
    var x = new Thrift.TApplicationException()
    x.read(input)
    input.readMessageEnd()
    return callback(x);
  }
  var result = new ThriftHiveMetastore_alter_table_result()
  result.read(input)
  input.readMessageEnd()

  if (null != result.o1) {
    return callback(result.o1);
  }
  if (null != result.o2) {
    return callback(result.o2);
  }
  callback(null)
}
ThriftHiveMetastoreClient.prototype.add_partition = function(new_part,callback){
  this.seqid += 1;
  this._reqs[this.seqid] = callback;
    this.send_add_partition(new_part)
}

ThriftHiveMetastoreClient.prototype.send_add_partition = function(new_part){
  var output = new this.pClass(this.output);
  output.writeMessageBegin('add_partition', Thrift.MessageType.CALL, this.seqid)
  var args = new ThriftHiveMetastore_add_partition_args()
  args.new_part = new_part
  args.write(output)
  output.writeMessageEnd()
  return this.output.flush()
}

ThriftHiveMetastoreClient.prototype.recv_add_partition = function(input,mtype,rseqid){
  var callback = this._reqs[rseqid] || function() {};
  delete this._reqs[rseqid];
  if (mtype == Thrift.MessageType.EXCEPTION) {
    var x = new Thrift.TApplicationException()
    x.read(input)
    input.readMessageEnd()
    return callback(x);
  }
  var result = new ThriftHiveMetastore_add_partition_result()
  result.read(input)
  input.readMessageEnd()

  if (null != result.o1) {
    return callback(result.o1);
  }
  if (null != result.o2) {
    return callback(result.o2);
  }
  if (null != result.o3) {
    return callback(result.o3);
  }
  if (null != result.success ) {
    return callback(null, result.success);
  }
  return callback("add_partition failed: unknown result");
}
ThriftHiveMetastoreClient.prototype.append_partition = function(db_name,tbl_name,part_vals,callback){
  this.seqid += 1;
  this._reqs[this.seqid] = callback;
    this.send_append_partition(db_name, tbl_name, part_vals)
}

ThriftHiveMetastoreClient.prototype.send_append_partition = function(db_name,tbl_name,part_vals){
  var output = new this.pClass(this.output);
  output.writeMessageBegin('append_partition', Thrift.MessageType.CALL, this.seqid)
  var args = new ThriftHiveMetastore_append_partition_args()
  args.db_name = db_name
  args.tbl_name = tbl_name
  args.part_vals = part_vals
  args.write(output)
  output.writeMessageEnd()
  return this.output.flush()
}

ThriftHiveMetastoreClient.prototype.recv_append_partition = function(input,mtype,rseqid){
  var callback = this._reqs[rseqid] || function() {};
  delete this._reqs[rseqid];
  if (mtype == Thrift.MessageType.EXCEPTION) {
    var x = new Thrift.TApplicationException()
    x.read(input)
    input.readMessageEnd()
    return callback(x);
  }
  var result = new ThriftHiveMetastore_append_partition_result()
  result.read(input)
  input.readMessageEnd()

  if (null != result.o1) {
    return callback(result.o1);
  }
  if (null != result.o2) {
    return callback(result.o2);
  }
  if (null != result.o3) {
    return callback(result.o3);
  }
  if (null != result.success ) {
    return callback(null, result.success);
  }
  return callback("append_partition failed: unknown result");
}
ThriftHiveMetastoreClient.prototype.append_partition_by_name = function(db_name,tbl_name,part_name,callback){
  this.seqid += 1;
  this._reqs[this.seqid] = callback;
    this.send_append_partition_by_name(db_name, tbl_name, part_name)
}

ThriftHiveMetastoreClient.prototype.send_append_partition_by_name = function(db_name,tbl_name,part_name){
  var output = new this.pClass(this.output);
  output.writeMessageBegin('append_partition_by_name', Thrift.MessageType.CALL, this.seqid)
  var args = new ThriftHiveMetastore_append_partition_by_name_args()
  args.db_name = db_name
  args.tbl_name = tbl_name
  args.part_name = part_name
  args.write(output)
  output.writeMessageEnd()
  return this.output.flush()
}

ThriftHiveMetastoreClient.prototype.recv_append_partition_by_name = function(input,mtype,rseqid){
  var callback = this._reqs[rseqid] || function() {};
  delete this._reqs[rseqid];
  if (mtype == Thrift.MessageType.EXCEPTION) {
    var x = new Thrift.TApplicationException()
    x.read(input)
    input.readMessageEnd()
    return callback(x);
  }
  var result = new ThriftHiveMetastore_append_partition_by_name_result()
  result.read(input)
  input.readMessageEnd()

  if (null != result.o1) {
    return callback(result.o1);
  }
  if (null != result.o2) {
    return callback(result.o2);
  }
  if (null != result.o3) {
    return callback(result.o3);
  }
  if (null != result.success ) {
    return callback(null, result.success);
  }
  return callback("append_partition_by_name failed: unknown result");
}
ThriftHiveMetastoreClient.prototype.drop_partition = function(db_name,tbl_name,part_vals,deleteData,callback){
  this.seqid += 1;
  this._reqs[this.seqid] = callback;
    this.send_drop_partition(db_name, tbl_name, part_vals, deleteData)
}

ThriftHiveMetastoreClient.prototype.send_drop_partition = function(db_name,tbl_name,part_vals,deleteData){
  var output = new this.pClass(this.output);
  output.writeMessageBegin('drop_partition', Thrift.MessageType.CALL, this.seqid)
  var args = new ThriftHiveMetastore_drop_partition_args()
  args.db_name = db_name
  args.tbl_name = tbl_name
  args.part_vals = part_vals
  args.deleteData = deleteData
  args.write(output)
  output.writeMessageEnd()
  return this.output.flush()
}

ThriftHiveMetastoreClient.prototype.recv_drop_partition = function(input,mtype,rseqid){
  var callback = this._reqs[rseqid] || function() {};
  delete this._reqs[rseqid];
  if (mtype == Thrift.MessageType.EXCEPTION) {
    var x = new Thrift.TApplicationException()
    x.read(input)
    input.readMessageEnd()
    return callback(x);
  }
  var result = new ThriftHiveMetastore_drop_partition_result()
  result.read(input)
  input.readMessageEnd()

  if (null != result.o1) {
    return callback(result.o1);
  }
  if (null != result.o2) {
    return callback(result.o2);
  }
  if (null != result.success ) {
    return callback(null, result.success);
  }
  return callback("drop_partition failed: unknown result");
}
ThriftHiveMetastoreClient.prototype.drop_partition_by_name = function(db_name,tbl_name,part_name,deleteData,callback){
  this.seqid += 1;
  this._reqs[this.seqid] = callback;
    this.send_drop_partition_by_name(db_name, tbl_name, part_name, deleteData)
}

ThriftHiveMetastoreClient.prototype.send_drop_partition_by_name = function(db_name,tbl_name,part_name,deleteData){
  var output = new this.pClass(this.output);
  output.writeMessageBegin('drop_partition_by_name', Thrift.MessageType.CALL, this.seqid)
  var args = new ThriftHiveMetastore_drop_partition_by_name_args()
  args.db_name = db_name
  args.tbl_name = tbl_name
  args.part_name = part_name
  args.deleteData = deleteData
  args.write(output)
  output.writeMessageEnd()
  return this.output.flush()
}

ThriftHiveMetastoreClient.prototype.recv_drop_partition_by_name = function(input,mtype,rseqid){
  var callback = this._reqs[rseqid] || function() {};
  delete this._reqs[rseqid];
  if (mtype == Thrift.MessageType.EXCEPTION) {
    var x = new Thrift.TApplicationException()
    x.read(input)
    input.readMessageEnd()
    return callback(x);
  }
  var result = new ThriftHiveMetastore_drop_partition_by_name_result()
  result.read(input)
  input.readMessageEnd()

  if (null != result.o1) {
    return callback(result.o1);
  }
  if (null != result.o2) {
    return callback(result.o2);
  }
  if (null != result.success ) {
    return callback(null, result.success);
  }
  return callback("drop_partition_by_name failed: unknown result");
}
ThriftHiveMetastoreClient.prototype.get_partition = function(db_name,tbl_name,part_vals,callback){
  this.seqid += 1;
  this._reqs[this.seqid] = callback;
    this.send_get_partition(db_name, tbl_name, part_vals)
}

ThriftHiveMetastoreClient.prototype.send_get_partition = function(db_name,tbl_name,part_vals){
  var output = new this.pClass(this.output);
  output.writeMessageBegin('get_partition', Thrift.MessageType.CALL, this.seqid)
  var args = new ThriftHiveMetastore_get_partition_args()
  args.db_name = db_name
  args.tbl_name = tbl_name
  args.part_vals = part_vals
  args.write(output)
  output.writeMessageEnd()
  return this.output.flush()
}

ThriftHiveMetastoreClient.prototype.recv_get_partition = function(input,mtype,rseqid){
  var callback = this._reqs[rseqid] || function() {};
  delete this._reqs[rseqid];
  if (mtype == Thrift.MessageType.EXCEPTION) {
    var x = new Thrift.TApplicationException()
    x.read(input)
    input.readMessageEnd()
    return callback(x);
  }
  var result = new ThriftHiveMetastore_get_partition_result()
  result.read(input)
  input.readMessageEnd()

  if (null != result.o1) {
    return callback(result.o1);
  }
  if (null != result.o2) {
    return callback(result.o2);
  }
  if (null != result.success ) {
    return callback(null, result.success);
  }
  return callback("get_partition failed: unknown result");
}
ThriftHiveMetastoreClient.prototype.get_partition_by_name = function(db_name,tbl_name,part_name,callback){
  this.seqid += 1;
  this._reqs[this.seqid] = callback;
    this.send_get_partition_by_name(db_name, tbl_name, part_name)
}

ThriftHiveMetastoreClient.prototype.send_get_partition_by_name = function(db_name,tbl_name,part_name){
  var output = new this.pClass(this.output);
  output.writeMessageBegin('get_partition_by_name', Thrift.MessageType.CALL, this.seqid)
  var args = new ThriftHiveMetastore_get_partition_by_name_args()
  args.db_name = db_name
  args.tbl_name = tbl_name
  args.part_name = part_name
  args.write(output)
  output.writeMessageEnd()
  return this.output.flush()
}

ThriftHiveMetastoreClient.prototype.recv_get_partition_by_name = function(input,mtype,rseqid){
  var callback = this._reqs[rseqid] || function() {};
  delete this._reqs[rseqid];
  if (mtype == Thrift.MessageType.EXCEPTION) {
    var x = new Thrift.TApplicationException()
    x.read(input)
    input.readMessageEnd()
    return callback(x);
  }
  var result = new ThriftHiveMetastore_get_partition_by_name_result()
  result.read(input)
  input.readMessageEnd()

  if (null != result.o1) {
    return callback(result.o1);
  }
  if (null != result.o2) {
    return callback(result.o2);
  }
  if (null != result.success ) {
    return callback(null, result.success);
  }
  return callback("get_partition_by_name failed: unknown result");
}
ThriftHiveMetastoreClient.prototype.get_partitions = function(db_name,tbl_name,max_parts,callback){
  this.seqid += 1;
  this._reqs[this.seqid] = callback;
    this.send_get_partitions(db_name, tbl_name, max_parts)
}

ThriftHiveMetastoreClient.prototype.send_get_partitions = function(db_name,tbl_name,max_parts){
  var output = new this.pClass(this.output);
  output.writeMessageBegin('get_partitions', Thrift.MessageType.CALL, this.seqid)
  var args = new ThriftHiveMetastore_get_partitions_args()
  args.db_name = db_name
  args.tbl_name = tbl_name
  args.max_parts = max_parts
  args.write(output)
  output.writeMessageEnd()
  return this.output.flush()
}

ThriftHiveMetastoreClient.prototype.recv_get_partitions = function(input,mtype,rseqid){
  var callback = this._reqs[rseqid] || function() {};
  delete this._reqs[rseqid];
  if (mtype == Thrift.MessageType.EXCEPTION) {
    var x = new Thrift.TApplicationException()
    x.read(input)
    input.readMessageEnd()
    return callback(x);
  }
  var result = new ThriftHiveMetastore_get_partitions_result()
  result.read(input)
  input.readMessageEnd()

  if (null != result.o1) {
    return callback(result.o1);
  }
  if (null != result.o2) {
    return callback(result.o2);
  }
  if (null != result.success ) {
    return callback(null, result.success);
  }
  return callback("get_partitions failed: unknown result");
}
ThriftHiveMetastoreClient.prototype.get_partition_names = function(db_name,tbl_name,max_parts,callback){
  this.seqid += 1;
  this._reqs[this.seqid] = callback;
    this.send_get_partition_names(db_name, tbl_name, max_parts)
}

ThriftHiveMetastoreClient.prototype.send_get_partition_names = function(db_name,tbl_name,max_parts){
  var output = new this.pClass(this.output);
  output.writeMessageBegin('get_partition_names', Thrift.MessageType.CALL, this.seqid)
  var args = new ThriftHiveMetastore_get_partition_names_args()
  args.db_name = db_name
  args.tbl_name = tbl_name
  args.max_parts = max_parts
  args.write(output)
  output.writeMessageEnd()
  return this.output.flush()
}

ThriftHiveMetastoreClient.prototype.recv_get_partition_names = function(input,mtype,rseqid){
  var callback = this._reqs[rseqid] || function() {};
  delete this._reqs[rseqid];
  if (mtype == Thrift.MessageType.EXCEPTION) {
    var x = new Thrift.TApplicationException()
    x.read(input)
    input.readMessageEnd()
    return callback(x);
  }
  var result = new ThriftHiveMetastore_get_partition_names_result()
  result.read(input)
  input.readMessageEnd()

  if (null != result.o2) {
    return callback(result.o2);
  }
  if (null != result.success ) {
    return callback(null, result.success);
  }
  return callback("get_partition_names failed: unknown result");
}
ThriftHiveMetastoreClient.prototype.get_partitions_ps = function(db_name,tbl_name,part_vals,max_parts,callback){
  this.seqid += 1;
  this._reqs[this.seqid] = callback;
    this.send_get_partitions_ps(db_name, tbl_name, part_vals, max_parts)
}

ThriftHiveMetastoreClient.prototype.send_get_partitions_ps = function(db_name,tbl_name,part_vals,max_parts){
  var output = new this.pClass(this.output);
  output.writeMessageBegin('get_partitions_ps', Thrift.MessageType.CALL, this.seqid)
  var args = new ThriftHiveMetastore_get_partitions_ps_args()
  args.db_name = db_name
  args.tbl_name = tbl_name
  args.part_vals = part_vals
  args.max_parts = max_parts
  args.write(output)
  output.writeMessageEnd()
  return this.output.flush()
}

ThriftHiveMetastoreClient.prototype.recv_get_partitions_ps = function(input,mtype,rseqid){
  var callback = this._reqs[rseqid] || function() {};
  delete this._reqs[rseqid];
  if (mtype == Thrift.MessageType.EXCEPTION) {
    var x = new Thrift.TApplicationException()
    x.read(input)
    input.readMessageEnd()
    return callback(x);
  }
  var result = new ThriftHiveMetastore_get_partitions_ps_result()
  result.read(input)
  input.readMessageEnd()

  if (null != result.o1) {
    return callback(result.o1);
  }
  if (null != result.success ) {
    return callback(null, result.success);
  }
  return callback("get_partitions_ps failed: unknown result");
}
ThriftHiveMetastoreClient.prototype.get_partition_names_ps = function(db_name,tbl_name,part_vals,max_parts,callback){
  this.seqid += 1;
  this._reqs[this.seqid] = callback;
    this.send_get_partition_names_ps(db_name, tbl_name, part_vals, max_parts)
}

ThriftHiveMetastoreClient.prototype.send_get_partition_names_ps = function(db_name,tbl_name,part_vals,max_parts){
  var output = new this.pClass(this.output);
  output.writeMessageBegin('get_partition_names_ps', Thrift.MessageType.CALL, this.seqid)
  var args = new ThriftHiveMetastore_get_partition_names_ps_args()
  args.db_name = db_name
  args.tbl_name = tbl_name
  args.part_vals = part_vals
  args.max_parts = max_parts
  args.write(output)
  output.writeMessageEnd()
  return this.output.flush()
}

ThriftHiveMetastoreClient.prototype.recv_get_partition_names_ps = function(input,mtype,rseqid){
  var callback = this._reqs[rseqid] || function() {};
  delete this._reqs[rseqid];
  if (mtype == Thrift.MessageType.EXCEPTION) {
    var x = new Thrift.TApplicationException()
    x.read(input)
    input.readMessageEnd()
    return callback(x);
  }
  var result = new ThriftHiveMetastore_get_partition_names_ps_result()
  result.read(input)
  input.readMessageEnd()

  if (null != result.o1) {
    return callback(result.o1);
  }
  if (null != result.success ) {
    return callback(null, result.success);
  }
  return callback("get_partition_names_ps failed: unknown result");
}
ThriftHiveMetastoreClient.prototype.alter_partition = function(db_name,tbl_name,new_part,callback){
  this.seqid += 1;
  this._reqs[this.seqid] = callback;
    this.send_alter_partition(db_name, tbl_name, new_part)
}

ThriftHiveMetastoreClient.prototype.send_alter_partition = function(db_name,tbl_name,new_part){
  var output = new this.pClass(this.output);
  output.writeMessageBegin('alter_partition', Thrift.MessageType.CALL, this.seqid)
  var args = new ThriftHiveMetastore_alter_partition_args()
  args.db_name = db_name
  args.tbl_name = tbl_name
  args.new_part = new_part
  args.write(output)
  output.writeMessageEnd()
  return this.output.flush()
}

ThriftHiveMetastoreClient.prototype.recv_alter_partition = function(input,mtype,rseqid){
  var callback = this._reqs[rseqid] || function() {};
  delete this._reqs[rseqid];
  if (mtype == Thrift.MessageType.EXCEPTION) {
    var x = new Thrift.TApplicationException()
    x.read(input)
    input.readMessageEnd()
    return callback(x);
  }
  var result = new ThriftHiveMetastore_alter_partition_result()
  result.read(input)
  input.readMessageEnd()

  if (null != result.o1) {
    return callback(result.o1);
  }
  if (null != result.o2) {
    return callback(result.o2);
  }
  callback(null)
}
ThriftHiveMetastoreClient.prototype.get_config_value = function(name,defaultValue,callback){
  this.seqid += 1;
  this._reqs[this.seqid] = callback;
    this.send_get_config_value(name, defaultValue)
}

ThriftHiveMetastoreClient.prototype.send_get_config_value = function(name,defaultValue){
  var output = new this.pClass(this.output);
  output.writeMessageBegin('get_config_value', Thrift.MessageType.CALL, this.seqid)
  var args = new ThriftHiveMetastore_get_config_value_args()
  args.name = name
  args.defaultValue = defaultValue
  args.write(output)
  output.writeMessageEnd()
  return this.output.flush()
}

ThriftHiveMetastoreClient.prototype.recv_get_config_value = function(input,mtype,rseqid){
  var callback = this._reqs[rseqid] || function() {};
  delete this._reqs[rseqid];
  if (mtype == Thrift.MessageType.EXCEPTION) {
    var x = new Thrift.TApplicationException()
    x.read(input)
    input.readMessageEnd()
    return callback(x);
  }
  var result = new ThriftHiveMetastore_get_config_value_result()
  result.read(input)
  input.readMessageEnd()

  if (null != result.o1) {
    return callback(result.o1);
  }
  if (null != result.success ) {
    return callback(null, result.success);
  }
  return callback("get_config_value failed: unknown result");
}
ThriftHiveMetastoreClient.prototype.partition_name_to_vals = function(part_name,callback){
  this.seqid += 1;
  this._reqs[this.seqid] = callback;
    this.send_partition_name_to_vals(part_name)
}

ThriftHiveMetastoreClient.prototype.send_partition_name_to_vals = function(part_name){
  var output = new this.pClass(this.output);
  output.writeMessageBegin('partition_name_to_vals', Thrift.MessageType.CALL, this.seqid)
  var args = new ThriftHiveMetastore_partition_name_to_vals_args()
  args.part_name = part_name
  args.write(output)
  output.writeMessageEnd()
  return this.output.flush()
}

ThriftHiveMetastoreClient.prototype.recv_partition_name_to_vals = function(input,mtype,rseqid){
  var callback = this._reqs[rseqid] || function() {};
  delete this._reqs[rseqid];
  if (mtype == Thrift.MessageType.EXCEPTION) {
    var x = new Thrift.TApplicationException()
    x.read(input)
    input.readMessageEnd()
    return callback(x);
  }
  var result = new ThriftHiveMetastore_partition_name_to_vals_result()
  result.read(input)
  input.readMessageEnd()

  if (null != result.o1) {
    return callback(result.o1);
  }
  if (null != result.success ) {
    return callback(null, result.success);
  }
  return callback("partition_name_to_vals failed: unknown result");
}
ThriftHiveMetastoreClient.prototype.partition_name_to_spec = function(part_name,callback){
  this.seqid += 1;
  this._reqs[this.seqid] = callback;
    this.send_partition_name_to_spec(part_name)
}

ThriftHiveMetastoreClient.prototype.send_partition_name_to_spec = function(part_name){
  var output = new this.pClass(this.output);
  output.writeMessageBegin('partition_name_to_spec', Thrift.MessageType.CALL, this.seqid)
  var args = new ThriftHiveMetastore_partition_name_to_spec_args()
  args.part_name = part_name
  args.write(output)
  output.writeMessageEnd()
  return this.output.flush()
}

ThriftHiveMetastoreClient.prototype.recv_partition_name_to_spec = function(input,mtype,rseqid){
  var callback = this._reqs[rseqid] || function() {};
  delete this._reqs[rseqid];
  if (mtype == Thrift.MessageType.EXCEPTION) {
    var x = new Thrift.TApplicationException()
    x.read(input)
    input.readMessageEnd()
    return callback(x);
  }
  var result = new ThriftHiveMetastore_partition_name_to_spec_result()
  result.read(input)
  input.readMessageEnd()

  if (null != result.o1) {
    return callback(result.o1);
  }
  if (null != result.success ) {
    return callback(null, result.success);
  }
  return callback("partition_name_to_spec failed: unknown result");
}
var ThriftHiveMetastoreProcessor = exports.Processor = function(handler) {
  this._handler = handler
}
ThriftHiveMetastoreProcessor.prototype.process = function(input, output) {
  var r = input.readMessageBegin()
  if (this['process_' + r.fname]) {
    return this['process_' + r.fname].call(this, r.rseqid, input, output)
  } else {
    input.skip(Thrift.Type.STRUCT)
    input.readMessageEnd()
    var x = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN_METHOD, 'Unknown function ' + r.fname)
    output.writeMessageBegin(r.fname, Thrift.MessageType.Exception, r.rseqid)
    x.write(output)
    output.writeMessageEnd()
    output.flush()
  }
}

ThriftHiveMetastoreProcessor.prototype.process_create_database = function(seqid, input, output) {
  var args = new ThriftHiveMetastore_create_database_args()
  args.read(input)
  input.readMessageEnd()
  var result = new ThriftHiveMetastore_create_database_result()
  this._handler.create_database(args.database, function(success) {
    result.success = success
    output.writeMessageBegin("create_database", Thrift.MessageType.REPLY, seqid)
    result.write(output)
    output.writeMessageEnd()
    output.flush()
  })
}

ThriftHiveMetastoreProcessor.prototype.process_get_database = function(seqid, input, output) {
  var args = new ThriftHiveMetastore_get_database_args()
  args.read(input)
  input.readMessageEnd()
  var result = new ThriftHiveMetastore_get_database_result()
  this._handler.get_database(args.name, function(success) {
    result.success = success
    output.writeMessageBegin("get_database", Thrift.MessageType.REPLY, seqid)
    result.write(output)
    output.writeMessageEnd()
    output.flush()
  })
}

ThriftHiveMetastoreProcessor.prototype.process_drop_database = function(seqid, input, output) {
  var args = new ThriftHiveMetastore_drop_database_args()
  args.read(input)
  input.readMessageEnd()
  var result = new ThriftHiveMetastore_drop_database_result()
  this._handler.drop_database(args.name, args.deleteData, function(success) {
    result.success = success
    output.writeMessageBegin("drop_database", Thrift.MessageType.REPLY, seqid)
    result.write(output)
    output.writeMessageEnd()
    output.flush()
  })
}

ThriftHiveMetastoreProcessor.prototype.process_get_databases = function(seqid, input, output) {
  var args = new ThriftHiveMetastore_get_databases_args()
  args.read(input)
  input.readMessageEnd()
  var result = new ThriftHiveMetastore_get_databases_result()
  this._handler.get_databases(args.pattern, function(success) {
    result.success = success
    output.writeMessageBegin("get_databases", Thrift.MessageType.REPLY, seqid)
    result.write(output)
    output.writeMessageEnd()
    output.flush()
  })
}

ThriftHiveMetastoreProcessor.prototype.process_get_all_databases = function(seqid, input, output) {
  var args = new ThriftHiveMetastore_get_all_databases_args()
  args.read(input)
  input.readMessageEnd()
  var result = new ThriftHiveMetastore_get_all_databases_result()
  this._handler.get_all_databases(function(success) {
    result.success = success
    output.writeMessageBegin("get_all_databases", Thrift.MessageType.REPLY, seqid)
    result.write(output)
    output.writeMessageEnd()
    output.flush()
  })
}

ThriftHiveMetastoreProcessor.prototype.process_get_type = function(seqid, input, output) {
  var args = new ThriftHiveMetastore_get_type_args()
  args.read(input)
  input.readMessageEnd()
  var result = new ThriftHiveMetastore_get_type_result()
  this._handler.get_type(args.name, function(success) {
    result.success = success
    output.writeMessageBegin("get_type", Thrift.MessageType.REPLY, seqid)
    result.write(output)
    output.writeMessageEnd()
    output.flush()
  })
}

ThriftHiveMetastoreProcessor.prototype.process_create_type = function(seqid, input, output) {
  var args = new ThriftHiveMetastore_create_type_args()
  args.read(input)
  input.readMessageEnd()
  var result = new ThriftHiveMetastore_create_type_result()
  this._handler.create_type(args.type, function(success) {
    result.success = success
    output.writeMessageBegin("create_type", Thrift.MessageType.REPLY, seqid)
    result.write(output)
    output.writeMessageEnd()
    output.flush()
  })
}

ThriftHiveMetastoreProcessor.prototype.process_drop_type = function(seqid, input, output) {
  var args = new ThriftHiveMetastore_drop_type_args()
  args.read(input)
  input.readMessageEnd()
  var result = new ThriftHiveMetastore_drop_type_result()
  this._handler.drop_type(args.type, function(success) {
    result.success = success
    output.writeMessageBegin("drop_type", Thrift.MessageType.REPLY, seqid)
    result.write(output)
    output.writeMessageEnd()
    output.flush()
  })
}

ThriftHiveMetastoreProcessor.prototype.process_get_type_all = function(seqid, input, output) {
  var args = new ThriftHiveMetastore_get_type_all_args()
  args.read(input)
  input.readMessageEnd()
  var result = new ThriftHiveMetastore_get_type_all_result()
  this._handler.get_type_all(args.name, function(success) {
    result.success = success
    output.writeMessageBegin("get_type_all", Thrift.MessageType.REPLY, seqid)
    result.write(output)
    output.writeMessageEnd()
    output.flush()
  })
}

ThriftHiveMetastoreProcessor.prototype.process_get_fields = function(seqid, input, output) {
  var args = new ThriftHiveMetastore_get_fields_args()
  args.read(input)
  input.readMessageEnd()
  var result = new ThriftHiveMetastore_get_fields_result()
  this._handler.get_fields(args.db_name, args.table_name, function(success) {
    result.success = success
    output.writeMessageBegin("get_fields", Thrift.MessageType.REPLY, seqid)
    result.write(output)
    output.writeMessageEnd()
    output.flush()
  })
}

ThriftHiveMetastoreProcessor.prototype.process_get_schema = function(seqid, input, output) {
  var args = new ThriftHiveMetastore_get_schema_args()
  args.read(input)
  input.readMessageEnd()
  var result = new ThriftHiveMetastore_get_schema_result()
  this._handler.get_schema(args.db_name, args.table_name, function(success) {
    result.success = success
    output.writeMessageBegin("get_schema", Thrift.MessageType.REPLY, seqid)
    result.write(output)
    output.writeMessageEnd()
    output.flush()
  })
}

ThriftHiveMetastoreProcessor.prototype.process_create_table = function(seqid, input, output) {
  var args = new ThriftHiveMetastore_create_table_args()
  args.read(input)
  input.readMessageEnd()
  var result = new ThriftHiveMetastore_create_table_result()
  this._handler.create_table(args.tbl, function(success) {
    result.success = success
    output.writeMessageBegin("create_table", Thrift.MessageType.REPLY, seqid)
    result.write(output)
    output.writeMessageEnd()
    output.flush()
  })
}

ThriftHiveMetastoreProcessor.prototype.process_drop_table = function(seqid, input, output) {
  var args = new ThriftHiveMetastore_drop_table_args()
  args.read(input)
  input.readMessageEnd()
  var result = new ThriftHiveMetastore_drop_table_result()
  this._handler.drop_table(args.dbname, args.name, args.deleteData, function(success) {
    result.success = success
    output.writeMessageBegin("drop_table", Thrift.MessageType.REPLY, seqid)
    result.write(output)
    output.writeMessageEnd()
    output.flush()
  })
}

ThriftHiveMetastoreProcessor.prototype.process_get_tables = function(seqid, input, output) {
  var args = new ThriftHiveMetastore_get_tables_args()
  args.read(input)
  input.readMessageEnd()
  var result = new ThriftHiveMetastore_get_tables_result()
  this._handler.get_tables(args.db_name, args.pattern, function(success) {
    result.success = success
    output.writeMessageBegin("get_tables", Thrift.MessageType.REPLY, seqid)
    result.write(output)
    output.writeMessageEnd()
    output.flush()
  })
}

ThriftHiveMetastoreProcessor.prototype.process_get_all_tables = function(seqid, input, output) {
  var args = new ThriftHiveMetastore_get_all_tables_args()
  args.read(input)
  input.readMessageEnd()
  var result = new ThriftHiveMetastore_get_all_tables_result()
  this._handler.get_all_tables(args.db_name, function(success) {
    result.success = success
    output.writeMessageBegin("get_all_tables", Thrift.MessageType.REPLY, seqid)
    result.write(output)
    output.writeMessageEnd()
    output.flush()
  })
}

ThriftHiveMetastoreProcessor.prototype.process_get_table = function(seqid, input, output) {
  var args = new ThriftHiveMetastore_get_table_args()
  args.read(input)
  input.readMessageEnd()
  var result = new ThriftHiveMetastore_get_table_result()
  this._handler.get_table(args.dbname, args.tbl_name, function(success) {
    result.success = success
    output.writeMessageBegin("get_table", Thrift.MessageType.REPLY, seqid)
    result.write(output)
    output.writeMessageEnd()
    output.flush()
  })
}

ThriftHiveMetastoreProcessor.prototype.process_alter_table = function(seqid, input, output) {
  var args = new ThriftHiveMetastore_alter_table_args()
  args.read(input)
  input.readMessageEnd()
  var result = new ThriftHiveMetastore_alter_table_result()
  this._handler.alter_table(args.dbname, args.tbl_name, args.new_tbl, function(success) {
    result.success = success
    output.writeMessageBegin("alter_table", Thrift.MessageType.REPLY, seqid)
    result.write(output)
    output.writeMessageEnd()
    output.flush()
  })
}

ThriftHiveMetastoreProcessor.prototype.process_add_partition = function(seqid, input, output) {
  var args = new ThriftHiveMetastore_add_partition_args()
  args.read(input)
  input.readMessageEnd()
  var result = new ThriftHiveMetastore_add_partition_result()
  this._handler.add_partition(args.new_part, function(success) {
    result.success = success
    output.writeMessageBegin("add_partition", Thrift.MessageType.REPLY, seqid)
    result.write(output)
    output.writeMessageEnd()
    output.flush()
  })
}

ThriftHiveMetastoreProcessor.prototype.process_append_partition = function(seqid, input, output) {
  var args = new ThriftHiveMetastore_append_partition_args()
  args.read(input)
  input.readMessageEnd()
  var result = new ThriftHiveMetastore_append_partition_result()
  this._handler.append_partition(args.db_name, args.tbl_name, args.part_vals, function(success) {
    result.success = success
    output.writeMessageBegin("append_partition", Thrift.MessageType.REPLY, seqid)
    result.write(output)
    output.writeMessageEnd()
    output.flush()
  })
}

ThriftHiveMetastoreProcessor.prototype.process_append_partition_by_name = function(seqid, input, output) {
  var args = new ThriftHiveMetastore_append_partition_by_name_args()
  args.read(input)
  input.readMessageEnd()
  var result = new ThriftHiveMetastore_append_partition_by_name_result()
  this._handler.append_partition_by_name(args.db_name, args.tbl_name, args.part_name, function(success) {
    result.success = success
    output.writeMessageBegin("append_partition_by_name", Thrift.MessageType.REPLY, seqid)
    result.write(output)
    output.writeMessageEnd()
    output.flush()
  })
}

ThriftHiveMetastoreProcessor.prototype.process_drop_partition = function(seqid, input, output) {
  var args = new ThriftHiveMetastore_drop_partition_args()
  args.read(input)
  input.readMessageEnd()
  var result = new ThriftHiveMetastore_drop_partition_result()
  this._handler.drop_partition(args.db_name, args.tbl_name, args.part_vals, args.deleteData, function(success) {
    result.success = success
    output.writeMessageBegin("drop_partition", Thrift.MessageType.REPLY, seqid)
    result.write(output)
    output.writeMessageEnd()
    output.flush()
  })
}

ThriftHiveMetastoreProcessor.prototype.process_drop_partition_by_name = function(seqid, input, output) {
  var args = new ThriftHiveMetastore_drop_partition_by_name_args()
  args.read(input)
  input.readMessageEnd()
  var result = new ThriftHiveMetastore_drop_partition_by_name_result()
  this._handler.drop_partition_by_name(args.db_name, args.tbl_name, args.part_name, args.deleteData, function(success) {
    result.success = success
    output.writeMessageBegin("drop_partition_by_name", Thrift.MessageType.REPLY, seqid)
    result.write(output)
    output.writeMessageEnd()
    output.flush()
  })
}

ThriftHiveMetastoreProcessor.prototype.process_get_partition = function(seqid, input, output) {
  var args = new ThriftHiveMetastore_get_partition_args()
  args.read(input)
  input.readMessageEnd()
  var result = new ThriftHiveMetastore_get_partition_result()
  this._handler.get_partition(args.db_name, args.tbl_name, args.part_vals, function(success) {
    result.success = success
    output.writeMessageBegin("get_partition", Thrift.MessageType.REPLY, seqid)
    result.write(output)
    output.writeMessageEnd()
    output.flush()
  })
}

ThriftHiveMetastoreProcessor.prototype.process_get_partition_by_name = function(seqid, input, output) {
  var args = new ThriftHiveMetastore_get_partition_by_name_args()
  args.read(input)
  input.readMessageEnd()
  var result = new ThriftHiveMetastore_get_partition_by_name_result()
  this._handler.get_partition_by_name(args.db_name, args.tbl_name, args.part_name, function(success) {
    result.success = success
    output.writeMessageBegin("get_partition_by_name", Thrift.MessageType.REPLY, seqid)
    result.write(output)
    output.writeMessageEnd()
    output.flush()
  })
}

ThriftHiveMetastoreProcessor.prototype.process_get_partitions = function(seqid, input, output) {
  var args = new ThriftHiveMetastore_get_partitions_args()
  args.read(input)
  input.readMessageEnd()
  var result = new ThriftHiveMetastore_get_partitions_result()
  this._handler.get_partitions(args.db_name, args.tbl_name, args.max_parts, function(success) {
    result.success = success
    output.writeMessageBegin("get_partitions", Thrift.MessageType.REPLY, seqid)
    result.write(output)
    output.writeMessageEnd()
    output.flush()
  })
}

ThriftHiveMetastoreProcessor.prototype.process_get_partition_names = function(seqid, input, output) {
  var args = new ThriftHiveMetastore_get_partition_names_args()
  args.read(input)
  input.readMessageEnd()
  var result = new ThriftHiveMetastore_get_partition_names_result()
  this._handler.get_partition_names(args.db_name, args.tbl_name, args.max_parts, function(success) {
    result.success = success
    output.writeMessageBegin("get_partition_names", Thrift.MessageType.REPLY, seqid)
    result.write(output)
    output.writeMessageEnd()
    output.flush()
  })
}

ThriftHiveMetastoreProcessor.prototype.process_get_partitions_ps = function(seqid, input, output) {
  var args = new ThriftHiveMetastore_get_partitions_ps_args()
  args.read(input)
  input.readMessageEnd()
  var result = new ThriftHiveMetastore_get_partitions_ps_result()
  this._handler.get_partitions_ps(args.db_name, args.tbl_name, args.part_vals, args.max_parts, function(success) {
    result.success = success
    output.writeMessageBegin("get_partitions_ps", Thrift.MessageType.REPLY, seqid)
    result.write(output)
    output.writeMessageEnd()
    output.flush()
  })
}

ThriftHiveMetastoreProcessor.prototype.process_get_partition_names_ps = function(seqid, input, output) {
  var args = new ThriftHiveMetastore_get_partition_names_ps_args()
  args.read(input)
  input.readMessageEnd()
  var result = new ThriftHiveMetastore_get_partition_names_ps_result()
  this._handler.get_partition_names_ps(args.db_name, args.tbl_name, args.part_vals, args.max_parts, function(success) {
    result.success = success
    output.writeMessageBegin("get_partition_names_ps", Thrift.MessageType.REPLY, seqid)
    result.write(output)
    output.writeMessageEnd()
    output.flush()
  })
}

ThriftHiveMetastoreProcessor.prototype.process_alter_partition = function(seqid, input, output) {
  var args = new ThriftHiveMetastore_alter_partition_args()
  args.read(input)
  input.readMessageEnd()
  var result = new ThriftHiveMetastore_alter_partition_result()
  this._handler.alter_partition(args.db_name, args.tbl_name, args.new_part, function(success) {
    result.success = success
    output.writeMessageBegin("alter_partition", Thrift.MessageType.REPLY, seqid)
    result.write(output)
    output.writeMessageEnd()
    output.flush()
  })
}

ThriftHiveMetastoreProcessor.prototype.process_get_config_value = function(seqid, input, output) {
  var args = new ThriftHiveMetastore_get_config_value_args()
  args.read(input)
  input.readMessageEnd()
  var result = new ThriftHiveMetastore_get_config_value_result()
  this._handler.get_config_value(args.name, args.defaultValue, function(success) {
    result.success = success
    output.writeMessageBegin("get_config_value", Thrift.MessageType.REPLY, seqid)
    result.write(output)
    output.writeMessageEnd()
    output.flush()
  })
}

ThriftHiveMetastoreProcessor.prototype.process_partition_name_to_vals = function(seqid, input, output) {
  var args = new ThriftHiveMetastore_partition_name_to_vals_args()
  args.read(input)
  input.readMessageEnd()
  var result = new ThriftHiveMetastore_partition_name_to_vals_result()
  this._handler.partition_name_to_vals(args.part_name, function(success) {
    result.success = success
    output.writeMessageBegin("partition_name_to_vals", Thrift.MessageType.REPLY, seqid)
    result.write(output)
    output.writeMessageEnd()
    output.flush()
  })
}

ThriftHiveMetastoreProcessor.prototype.process_partition_name_to_spec = function(seqid, input, output) {
  var args = new ThriftHiveMetastore_partition_name_to_spec_args()
  args.read(input)
  input.readMessageEnd()
  var result = new ThriftHiveMetastore_partition_name_to_spec_result()
  this._handler.partition_name_to_spec(args.part_name, function(success) {
    result.success = success
    output.writeMessageBegin("partition_name_to_spec", Thrift.MessageType.REPLY, seqid)
    result.write(output)
    output.writeMessageEnd()
    output.flush()
  })
}

