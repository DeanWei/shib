//
// Autogenerated by Thrift
//
// DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
//
var Thrift = require('thrift').Thrift;
var ttypes = module.exports = {};
ttypes.DDL_TIME = 'transient_lastDdlTime'
ttypes.IS_ARCHIVED = 'is_archived'
ttypes.ORIGINAL_LOCATION = 'original_location'
ttypes.META_TABLE_COLUMNS = 'columns'
ttypes.META_TABLE_COLUMN_TYPES = 'columns.types'
ttypes.BUCKET_FIELD_NAME = 'bucket_field_name'
ttypes.BUCKET_COUNT = 'bucket_count'
ttypes.FIELD_TO_DIMENSION = 'field_to_dimension'
ttypes.META_TABLE_NAME = 'name'
ttypes.META_TABLE_DB = 'db'
ttypes.META_TABLE_LOCATION = 'location'
ttypes.META_TABLE_SERDE = 'serde'
ttypes.META_TABLE_PARTITION_COLUMNS = 'partition_columns'
ttypes.FILE_INPUT_FORMAT = 'file.inputformat'
ttypes.FILE_OUTPUT_FORMAT = 'file.outputformat'
ttypes.META_TABLE_STORAGE = 'storage_handler'
var Version = module.exports.Version = function(args){
  this.version = null
  this.comments = null
if( args != null ){  if (null != args.version)
  this.version = args.version
  if (null != args.comments)
  this.comments = args.comments
}}
Version.prototype = {}
Version.prototype.read = function(input){ 
  var ret = input.readStructBegin()
  while (1) 
  {
    var ret = input.readFieldBegin()
    var fname = ret.fname
    var ftype = ret.ftype
    var fid   = ret.fid
    if (ftype == Thrift.Type.STOP) 
      break
    switch(fid)
    {
      case 1:      if (ftype == Thrift.Type.STRING) {
        this.version = input.readString()
      } else {
        input.skip(ftype)
      }
      break
      case 2:      if (ftype == Thrift.Type.STRING) {
        this.comments = input.readString()
      } else {
        input.skip(ftype)
      }
      break
      default:
        input.skip(ftype)
    }
    input.readFieldEnd()
  }
  input.readStructEnd()
  return
}

Version.prototype.write = function(output){ 
  output.writeStructBegin('Version')
  if (null != this.version) {
    output.writeFieldBegin('version', Thrift.Type.STRING, 1)
    output.writeString(this.version)
    output.writeFieldEnd()
  }
  if (null != this.comments) {
    output.writeFieldBegin('comments', Thrift.Type.STRING, 2)
    output.writeString(this.comments)
    output.writeFieldEnd()
  }
  output.writeFieldStop()
  output.writeStructEnd()
  return
}

var FieldSchema = module.exports.FieldSchema = function(args){
  this.name = null
  this.type = null
  this.comment = null
if( args != null ){  if (null != args.name)
  this.name = args.name
  if (null != args.type)
  this.type = args.type
  if (null != args.comment)
  this.comment = args.comment
}}
FieldSchema.prototype = {}
FieldSchema.prototype.read = function(input){ 
  var ret = input.readStructBegin()
  while (1) 
  {
    var ret = input.readFieldBegin()
    var fname = ret.fname
    var ftype = ret.ftype
    var fid   = ret.fid
    if (ftype == Thrift.Type.STOP) 
      break
    switch(fid)
    {
      case 1:      if (ftype == Thrift.Type.STRING) {
        this.name = input.readString()
      } else {
        input.skip(ftype)
      }
      break
      case 2:      if (ftype == Thrift.Type.STRING) {
        this.type = input.readString()
      } else {
        input.skip(ftype)
      }
      break
      case 3:      if (ftype == Thrift.Type.STRING) {
        this.comment = input.readString()
      } else {
        input.skip(ftype)
      }
      break
      default:
        input.skip(ftype)
    }
    input.readFieldEnd()
  }
  input.readStructEnd()
  return
}

FieldSchema.prototype.write = function(output){ 
  output.writeStructBegin('FieldSchema')
  if (null != this.name) {
    output.writeFieldBegin('name', Thrift.Type.STRING, 1)
    output.writeString(this.name)
    output.writeFieldEnd()
  }
  if (null != this.type) {
    output.writeFieldBegin('type', Thrift.Type.STRING, 2)
    output.writeString(this.type)
    output.writeFieldEnd()
  }
  if (null != this.comment) {
    output.writeFieldBegin('comment', Thrift.Type.STRING, 3)
    output.writeString(this.comment)
    output.writeFieldEnd()
  }
  output.writeFieldStop()
  output.writeStructEnd()
  return
}

var Type = module.exports.Type = function(args){
  this.name = null
  this.type1 = null
  this.type2 = null
  this.fields = null
if( args != null ){  if (null != args.name)
  this.name = args.name
  if (null != args.type1)
  this.type1 = args.type1
  if (null != args.type2)
  this.type2 = args.type2
  if (null != args.fields)
  this.fields = args.fields
}}
Type.prototype = {}
Type.prototype.read = function(input){ 
  var ret = input.readStructBegin()
  while (1) 
  {
    var ret = input.readFieldBegin()
    var fname = ret.fname
    var ftype = ret.ftype
    var fid   = ret.fid
    if (ftype == Thrift.Type.STOP) 
      break
    switch(fid)
    {
      case 1:      if (ftype == Thrift.Type.STRING) {
        this.name = input.readString()
      } else {
        input.skip(ftype)
      }
      break
      case 2:      if (ftype == Thrift.Type.STRING) {
        this.type1 = input.readString()
      } else {
        input.skip(ftype)
      }
      break
      case 3:      if (ftype == Thrift.Type.STRING) {
        this.type2 = input.readString()
      } else {
        input.skip(ftype)
      }
      break
      case 4:      if (ftype == Thrift.Type.LIST) {
        {
          var _size0 = 0
          var rtmp3
          this.fields = []
          var _etype3 = 0
          rtmp3 = input.readListBegin()
          _etype3 = rtmp3.etype
          _size0 = rtmp3.size
          for (var _i4 = 0; _i4 < _size0; ++_i4)
          {
            var elem5 = null
            elem5 = new ttypes.FieldSchema()
            elem5.read(input)
            this.fields.push(elem5)
          }
          input.readListEnd()
        }
      } else {
        input.skip(ftype)
      }
      break
      default:
        input.skip(ftype)
    }
    input.readFieldEnd()
  }
  input.readStructEnd()
  return
}

Type.prototype.write = function(output){ 
  output.writeStructBegin('Type')
  if (null != this.name) {
    output.writeFieldBegin('name', Thrift.Type.STRING, 1)
    output.writeString(this.name)
    output.writeFieldEnd()
  }
  if (null != this.type1) {
    output.writeFieldBegin('type1', Thrift.Type.STRING, 2)
    output.writeString(this.type1)
    output.writeFieldEnd()
  }
  if (null != this.type2) {
    output.writeFieldBegin('type2', Thrift.Type.STRING, 3)
    output.writeString(this.type2)
    output.writeFieldEnd()
  }
  if (null != this.fields) {
    output.writeFieldBegin('fields', Thrift.Type.LIST, 4)
    {
      output.writeListBegin(Thrift.Type.STRUCT, this.fields.length)
      {
        for(var iter6 in this.fields)
        {
          if (this.fields.hasOwnProperty(iter6))
          {
            iter6=this.fields[iter6]
            iter6.write(output)
          }
        }
      }
      output.writeListEnd()
    }
    output.writeFieldEnd()
  }
  output.writeFieldStop()
  output.writeStructEnd()
  return
}

var Database = module.exports.Database = function(args){
  this.name = null
  this.description = null
  this.locationUri = null
if( args != null ){  if (null != args.name)
  this.name = args.name
  if (null != args.description)
  this.description = args.description
  if (null != args.locationUri)
  this.locationUri = args.locationUri
}}
Database.prototype = {}
Database.prototype.read = function(input){ 
  var ret = input.readStructBegin()
  while (1) 
  {
    var ret = input.readFieldBegin()
    var fname = ret.fname
    var ftype = ret.ftype
    var fid   = ret.fid
    if (ftype == Thrift.Type.STOP) 
      break
    switch(fid)
    {
      case 1:      if (ftype == Thrift.Type.STRING) {
        this.name = input.readString()
      } else {
        input.skip(ftype)
      }
      break
      case 2:      if (ftype == Thrift.Type.STRING) {
        this.description = input.readString()
      } else {
        input.skip(ftype)
      }
      break
      case 3:      if (ftype == Thrift.Type.STRING) {
        this.locationUri = input.readString()
      } else {
        input.skip(ftype)
      }
      break
      default:
        input.skip(ftype)
    }
    input.readFieldEnd()
  }
  input.readStructEnd()
  return
}

Database.prototype.write = function(output){ 
  output.writeStructBegin('Database')
  if (null != this.name) {
    output.writeFieldBegin('name', Thrift.Type.STRING, 1)
    output.writeString(this.name)
    output.writeFieldEnd()
  }
  if (null != this.description) {
    output.writeFieldBegin('description', Thrift.Type.STRING, 2)
    output.writeString(this.description)
    output.writeFieldEnd()
  }
  if (null != this.locationUri) {
    output.writeFieldBegin('locationUri', Thrift.Type.STRING, 3)
    output.writeString(this.locationUri)
    output.writeFieldEnd()
  }
  output.writeFieldStop()
  output.writeStructEnd()
  return
}

var SerDeInfo = module.exports.SerDeInfo = function(args){
  this.name = null
  this.serializationLib = null
  this.parameters = null
if( args != null ){  if (null != args.name)
  this.name = args.name
  if (null != args.serializationLib)
  this.serializationLib = args.serializationLib
  if (null != args.parameters)
  this.parameters = args.parameters
}}
SerDeInfo.prototype = {}
SerDeInfo.prototype.read = function(input){ 
  var ret = input.readStructBegin()
  while (1) 
  {
    var ret = input.readFieldBegin()
    var fname = ret.fname
    var ftype = ret.ftype
    var fid   = ret.fid
    if (ftype == Thrift.Type.STOP) 
      break
    switch(fid)
    {
      case 1:      if (ftype == Thrift.Type.STRING) {
        this.name = input.readString()
      } else {
        input.skip(ftype)
      }
      break
      case 2:      if (ftype == Thrift.Type.STRING) {
        this.serializationLib = input.readString()
      } else {
        input.skip(ftype)
      }
      break
      case 3:      if (ftype == Thrift.Type.MAP) {
        {
          var _size7 = 0
          var rtmp3
          this.parameters = {}
          var _ktype8 = 0
          var _vtype9 = 0
          rtmp3 = input.readMapBegin()
          _ktype8= rtmp3.ktype
          _vtype9= rtmp3.vtype
          _size7= rtmp3.size
          for (var _i11 = 0; _i11 < _size7; ++_i11)
          {
            key12 = null
            val13 = null
            key12 = input.readString()
            val13 = input.readString()
            this.parameters[key12] = val13
          }
          input.readMapEnd()
        }
      } else {
        input.skip(ftype)
      }
      break
      default:
        input.skip(ftype)
    }
    input.readFieldEnd()
  }
  input.readStructEnd()
  return
}

SerDeInfo.prototype.write = function(output){ 
  output.writeStructBegin('SerDeInfo')
  if (null != this.name) {
    output.writeFieldBegin('name', Thrift.Type.STRING, 1)
    output.writeString(this.name)
    output.writeFieldEnd()
  }
  if (null != this.serializationLib) {
    output.writeFieldBegin('serializationLib', Thrift.Type.STRING, 2)
    output.writeString(this.serializationLib)
    output.writeFieldEnd()
  }
  if (null != this.parameters) {
    output.writeFieldBegin('parameters', Thrift.Type.MAP, 3)
    {
      output.writeMapBegin(Thrift.Type.STRING, Thrift.Type.STRING, Thrift.objectLength(this.parameters))
      {
        for(var kiter14 in this.parameters)        {
          if (this.parameters.hasOwnProperty(kiter14))
          {
            var viter15 = this.parameters[kiter14]
            output.writeString(kiter14)
            output.writeString(viter15)
          }
        }
      }
      output.writeMapEnd()
    }
    output.writeFieldEnd()
  }
  output.writeFieldStop()
  output.writeStructEnd()
  return
}

var Order = module.exports.Order = function(args){
  this.col = null
  this.order = null
if( args != null ){  if (null != args.col)
  this.col = args.col
  if (null != args.order)
  this.order = args.order
}}
Order.prototype = {}
Order.prototype.read = function(input){ 
  var ret = input.readStructBegin()
  while (1) 
  {
    var ret = input.readFieldBegin()
    var fname = ret.fname
    var ftype = ret.ftype
    var fid   = ret.fid
    if (ftype == Thrift.Type.STOP) 
      break
    switch(fid)
    {
      case 1:      if (ftype == Thrift.Type.STRING) {
        this.col = input.readString()
      } else {
        input.skip(ftype)
      }
      break
      case 2:      if (ftype == Thrift.Type.I32) {
        this.order = input.readI32()
      } else {
        input.skip(ftype)
      }
      break
      default:
        input.skip(ftype)
    }
    input.readFieldEnd()
  }
  input.readStructEnd()
  return
}

Order.prototype.write = function(output){ 
  output.writeStructBegin('Order')
  if (null != this.col) {
    output.writeFieldBegin('col', Thrift.Type.STRING, 1)
    output.writeString(this.col)
    output.writeFieldEnd()
  }
  if (null != this.order) {
    output.writeFieldBegin('order', Thrift.Type.I32, 2)
    output.writeI32(this.order)
    output.writeFieldEnd()
  }
  output.writeFieldStop()
  output.writeStructEnd()
  return
}

var StorageDescriptor = module.exports.StorageDescriptor = function(args){
  this.cols = null
  this.location = null
  this.inputFormat = null
  this.outputFormat = null
  this.compressed = null
  this.numBuckets = null
  this.serdeInfo = null
  this.bucketCols = null
  this.sortCols = null
  this.parameters = null
if( args != null ){  if (null != args.cols)
  this.cols = args.cols
  if (null != args.location)
  this.location = args.location
  if (null != args.inputFormat)
  this.inputFormat = args.inputFormat
  if (null != args.outputFormat)
  this.outputFormat = args.outputFormat
  if (null != args.compressed)
  this.compressed = args.compressed
  if (null != args.numBuckets)
  this.numBuckets = args.numBuckets
  if (null != args.serdeInfo)
  this.serdeInfo = args.serdeInfo
  if (null != args.bucketCols)
  this.bucketCols = args.bucketCols
  if (null != args.sortCols)
  this.sortCols = args.sortCols
  if (null != args.parameters)
  this.parameters = args.parameters
}}
StorageDescriptor.prototype = {}
StorageDescriptor.prototype.read = function(input){ 
  var ret = input.readStructBegin()
  while (1) 
  {
    var ret = input.readFieldBegin()
    var fname = ret.fname
    var ftype = ret.ftype
    var fid   = ret.fid
    if (ftype == Thrift.Type.STOP) 
      break
    switch(fid)
    {
      case 1:      if (ftype == Thrift.Type.LIST) {
        {
          var _size16 = 0
          var rtmp3
          this.cols = []
          var _etype19 = 0
          rtmp3 = input.readListBegin()
          _etype19 = rtmp3.etype
          _size16 = rtmp3.size
          for (var _i20 = 0; _i20 < _size16; ++_i20)
          {
            var elem21 = null
            elem21 = new ttypes.FieldSchema()
            elem21.read(input)
            this.cols.push(elem21)
          }
          input.readListEnd()
        }
      } else {
        input.skip(ftype)
      }
      break
      case 2:      if (ftype == Thrift.Type.STRING) {
        this.location = input.readString()
      } else {
        input.skip(ftype)
      }
      break
      case 3:      if (ftype == Thrift.Type.STRING) {
        this.inputFormat = input.readString()
      } else {
        input.skip(ftype)
      }
      break
      case 4:      if (ftype == Thrift.Type.STRING) {
        this.outputFormat = input.readString()
      } else {
        input.skip(ftype)
      }
      break
      case 5:      if (ftype == Thrift.Type.BOOL) {
        this.compressed = input.readBool()
      } else {
        input.skip(ftype)
      }
      break
      case 6:      if (ftype == Thrift.Type.I32) {
        this.numBuckets = input.readI32()
      } else {
        input.skip(ftype)
      }
      break
      case 7:      if (ftype == Thrift.Type.STRUCT) {
        this.serdeInfo = new ttypes.SerDeInfo()
        this.serdeInfo.read(input)
      } else {
        input.skip(ftype)
      }
      break
      case 8:      if (ftype == Thrift.Type.LIST) {
        {
          var _size22 = 0
          var rtmp3
          this.bucketCols = []
          var _etype25 = 0
          rtmp3 = input.readListBegin()
          _etype25 = rtmp3.etype
          _size22 = rtmp3.size
          for (var _i26 = 0; _i26 < _size22; ++_i26)
          {
            var elem27 = null
            elem27 = input.readString()
            this.bucketCols.push(elem27)
          }
          input.readListEnd()
        }
      } else {
        input.skip(ftype)
      }
      break
      case 9:      if (ftype == Thrift.Type.LIST) {
        {
          var _size28 = 0
          var rtmp3
          this.sortCols = []
          var _etype31 = 0
          rtmp3 = input.readListBegin()
          _etype31 = rtmp3.etype
          _size28 = rtmp3.size
          for (var _i32 = 0; _i32 < _size28; ++_i32)
          {
            var elem33 = null
            elem33 = new ttypes.Order()
            elem33.read(input)
            this.sortCols.push(elem33)
          }
          input.readListEnd()
        }
      } else {
        input.skip(ftype)
      }
      break
      case 10:      if (ftype == Thrift.Type.MAP) {
        {
          var _size34 = 0
          var rtmp3
          this.parameters = {}
          var _ktype35 = 0
          var _vtype36 = 0
          rtmp3 = input.readMapBegin()
          _ktype35= rtmp3.ktype
          _vtype36= rtmp3.vtype
          _size34= rtmp3.size
          for (var _i38 = 0; _i38 < _size34; ++_i38)
          {
            key39 = null
            val40 = null
            key39 = input.readString()
            val40 = input.readString()
            this.parameters[key39] = val40
          }
          input.readMapEnd()
        }
      } else {
        input.skip(ftype)
      }
      break
      default:
        input.skip(ftype)
    }
    input.readFieldEnd()
  }
  input.readStructEnd()
  return
}

StorageDescriptor.prototype.write = function(output){ 
  output.writeStructBegin('StorageDescriptor')
  if (null != this.cols) {
    output.writeFieldBegin('cols', Thrift.Type.LIST, 1)
    {
      output.writeListBegin(Thrift.Type.STRUCT, this.cols.length)
      {
        for(var iter41 in this.cols)
        {
          if (this.cols.hasOwnProperty(iter41))
          {
            iter41=this.cols[iter41]
            iter41.write(output)
          }
        }
      }
      output.writeListEnd()
    }
    output.writeFieldEnd()
  }
  if (null != this.location) {
    output.writeFieldBegin('location', Thrift.Type.STRING, 2)
    output.writeString(this.location)
    output.writeFieldEnd()
  }
  if (null != this.inputFormat) {
    output.writeFieldBegin('inputFormat', Thrift.Type.STRING, 3)
    output.writeString(this.inputFormat)
    output.writeFieldEnd()
  }
  if (null != this.outputFormat) {
    output.writeFieldBegin('outputFormat', Thrift.Type.STRING, 4)
    output.writeString(this.outputFormat)
    output.writeFieldEnd()
  }
  if (null != this.compressed) {
    output.writeFieldBegin('compressed', Thrift.Type.BOOL, 5)
    output.writeBool(this.compressed)
    output.writeFieldEnd()
  }
  if (null != this.numBuckets) {
    output.writeFieldBegin('numBuckets', Thrift.Type.I32, 6)
    output.writeI32(this.numBuckets)
    output.writeFieldEnd()
  }
  if (null != this.serdeInfo) {
    output.writeFieldBegin('serdeInfo', Thrift.Type.STRUCT, 7)
    this.serdeInfo.write(output)
    output.writeFieldEnd()
  }
  if (null != this.bucketCols) {
    output.writeFieldBegin('bucketCols', Thrift.Type.LIST, 8)
    {
      output.writeListBegin(Thrift.Type.STRING, this.bucketCols.length)
      {
        for(var iter42 in this.bucketCols)
        {
          if (this.bucketCols.hasOwnProperty(iter42))
          {
            iter42=this.bucketCols[iter42]
            output.writeString(iter42)
          }
        }
      }
      output.writeListEnd()
    }
    output.writeFieldEnd()
  }
  if (null != this.sortCols) {
    output.writeFieldBegin('sortCols', Thrift.Type.LIST, 9)
    {
      output.writeListBegin(Thrift.Type.STRUCT, this.sortCols.length)
      {
        for(var iter43 in this.sortCols)
        {
          if (this.sortCols.hasOwnProperty(iter43))
          {
            iter43=this.sortCols[iter43]
            iter43.write(output)
          }
        }
      }
      output.writeListEnd()
    }
    output.writeFieldEnd()
  }
  if (null != this.parameters) {
    output.writeFieldBegin('parameters', Thrift.Type.MAP, 10)
    {
      output.writeMapBegin(Thrift.Type.STRING, Thrift.Type.STRING, Thrift.objectLength(this.parameters))
      {
        for(var kiter44 in this.parameters)        {
          if (this.parameters.hasOwnProperty(kiter44))
          {
            var viter45 = this.parameters[kiter44]
            output.writeString(kiter44)
            output.writeString(viter45)
          }
        }
      }
      output.writeMapEnd()
    }
    output.writeFieldEnd()
  }
  output.writeFieldStop()
  output.writeStructEnd()
  return
}

var Table = module.exports.Table = function(args){
  this.tableName = null
  this.dbName = null
  this.owner = null
  this.createTime = null
  this.lastAccessTime = null
  this.retention = null
  this.sd = null
  this.partitionKeys = null
  this.parameters = null
  this.viewOriginalText = null
  this.viewExpandedText = null
  this.tableType = null
if( args != null ){  if (null != args.tableName)
  this.tableName = args.tableName
  if (null != args.dbName)
  this.dbName = args.dbName
  if (null != args.owner)
  this.owner = args.owner
  if (null != args.createTime)
  this.createTime = args.createTime
  if (null != args.lastAccessTime)
  this.lastAccessTime = args.lastAccessTime
  if (null != args.retention)
  this.retention = args.retention
  if (null != args.sd)
  this.sd = args.sd
  if (null != args.partitionKeys)
  this.partitionKeys = args.partitionKeys
  if (null != args.parameters)
  this.parameters = args.parameters
  if (null != args.viewOriginalText)
  this.viewOriginalText = args.viewOriginalText
  if (null != args.viewExpandedText)
  this.viewExpandedText = args.viewExpandedText
  if (null != args.tableType)
  this.tableType = args.tableType
}}
Table.prototype = {}
Table.prototype.read = function(input){ 
  var ret = input.readStructBegin()
  while (1) 
  {
    var ret = input.readFieldBegin()
    var fname = ret.fname
    var ftype = ret.ftype
    var fid   = ret.fid
    if (ftype == Thrift.Type.STOP) 
      break
    switch(fid)
    {
      case 1:      if (ftype == Thrift.Type.STRING) {
        this.tableName = input.readString()
      } else {
        input.skip(ftype)
      }
      break
      case 2:      if (ftype == Thrift.Type.STRING) {
        this.dbName = input.readString()
      } else {
        input.skip(ftype)
      }
      break
      case 3:      if (ftype == Thrift.Type.STRING) {
        this.owner = input.readString()
      } else {
        input.skip(ftype)
      }
      break
      case 4:      if (ftype == Thrift.Type.I32) {
        this.createTime = input.readI32()
      } else {
        input.skip(ftype)
      }
      break
      case 5:      if (ftype == Thrift.Type.I32) {
        this.lastAccessTime = input.readI32()
      } else {
        input.skip(ftype)
      }
      break
      case 6:      if (ftype == Thrift.Type.I32) {
        this.retention = input.readI32()
      } else {
        input.skip(ftype)
      }
      break
      case 7:      if (ftype == Thrift.Type.STRUCT) {
        this.sd = new ttypes.StorageDescriptor()
        this.sd.read(input)
      } else {
        input.skip(ftype)
      }
      break
      case 8:      if (ftype == Thrift.Type.LIST) {
        {
          var _size46 = 0
          var rtmp3
          this.partitionKeys = []
          var _etype49 = 0
          rtmp3 = input.readListBegin()
          _etype49 = rtmp3.etype
          _size46 = rtmp3.size
          for (var _i50 = 0; _i50 < _size46; ++_i50)
          {
            var elem51 = null
            elem51 = new ttypes.FieldSchema()
            elem51.read(input)
            this.partitionKeys.push(elem51)
          }
          input.readListEnd()
        }
      } else {
        input.skip(ftype)
      }
      break
      case 9:      if (ftype == Thrift.Type.MAP) {
        {
          var _size52 = 0
          var rtmp3
          this.parameters = {}
          var _ktype53 = 0
          var _vtype54 = 0
          rtmp3 = input.readMapBegin()
          _ktype53= rtmp3.ktype
          _vtype54= rtmp3.vtype
          _size52= rtmp3.size
          for (var _i56 = 0; _i56 < _size52; ++_i56)
          {
            key57 = null
            val58 = null
            key57 = input.readString()
            val58 = input.readString()
            this.parameters[key57] = val58
          }
          input.readMapEnd()
        }
      } else {
        input.skip(ftype)
      }
      break
      case 10:      if (ftype == Thrift.Type.STRING) {
        this.viewOriginalText = input.readString()
      } else {
        input.skip(ftype)
      }
      break
      case 11:      if (ftype == Thrift.Type.STRING) {
        this.viewExpandedText = input.readString()
      } else {
        input.skip(ftype)
      }
      break
      case 12:      if (ftype == Thrift.Type.STRING) {
        this.tableType = input.readString()
      } else {
        input.skip(ftype)
      }
      break
      default:
        input.skip(ftype)
    }
    input.readFieldEnd()
  }
  input.readStructEnd()
  return
}

Table.prototype.write = function(output){ 
  output.writeStructBegin('Table')
  if (null != this.tableName) {
    output.writeFieldBegin('tableName', Thrift.Type.STRING, 1)
    output.writeString(this.tableName)
    output.writeFieldEnd()
  }
  if (null != this.dbName) {
    output.writeFieldBegin('dbName', Thrift.Type.STRING, 2)
    output.writeString(this.dbName)
    output.writeFieldEnd()
  }
  if (null != this.owner) {
    output.writeFieldBegin('owner', Thrift.Type.STRING, 3)
    output.writeString(this.owner)
    output.writeFieldEnd()
  }
  if (null != this.createTime) {
    output.writeFieldBegin('createTime', Thrift.Type.I32, 4)
    output.writeI32(this.createTime)
    output.writeFieldEnd()
  }
  if (null != this.lastAccessTime) {
    output.writeFieldBegin('lastAccessTime', Thrift.Type.I32, 5)
    output.writeI32(this.lastAccessTime)
    output.writeFieldEnd()
  }
  if (null != this.retention) {
    output.writeFieldBegin('retention', Thrift.Type.I32, 6)
    output.writeI32(this.retention)
    output.writeFieldEnd()
  }
  if (null != this.sd) {
    output.writeFieldBegin('sd', Thrift.Type.STRUCT, 7)
    this.sd.write(output)
    output.writeFieldEnd()
  }
  if (null != this.partitionKeys) {
    output.writeFieldBegin('partitionKeys', Thrift.Type.LIST, 8)
    {
      output.writeListBegin(Thrift.Type.STRUCT, this.partitionKeys.length)
      {
        for(var iter59 in this.partitionKeys)
        {
          if (this.partitionKeys.hasOwnProperty(iter59))
          {
            iter59=this.partitionKeys[iter59]
            iter59.write(output)
          }
        }
      }
      output.writeListEnd()
    }
    output.writeFieldEnd()
  }
  if (null != this.parameters) {
    output.writeFieldBegin('parameters', Thrift.Type.MAP, 9)
    {
      output.writeMapBegin(Thrift.Type.STRING, Thrift.Type.STRING, Thrift.objectLength(this.parameters))
      {
        for(var kiter60 in this.parameters)        {
          if (this.parameters.hasOwnProperty(kiter60))
          {
            var viter61 = this.parameters[kiter60]
            output.writeString(kiter60)
            output.writeString(viter61)
          }
        }
      }
      output.writeMapEnd()
    }
    output.writeFieldEnd()
  }
  if (null != this.viewOriginalText) {
    output.writeFieldBegin('viewOriginalText', Thrift.Type.STRING, 10)
    output.writeString(this.viewOriginalText)
    output.writeFieldEnd()
  }
  if (null != this.viewExpandedText) {
    output.writeFieldBegin('viewExpandedText', Thrift.Type.STRING, 11)
    output.writeString(this.viewExpandedText)
    output.writeFieldEnd()
  }
  if (null != this.tableType) {
    output.writeFieldBegin('tableType', Thrift.Type.STRING, 12)
    output.writeString(this.tableType)
    output.writeFieldEnd()
  }
  output.writeFieldStop()
  output.writeStructEnd()
  return
}

var Partition = module.exports.Partition = function(args){
  this.values = null
  this.dbName = null
  this.tableName = null
  this.createTime = null
  this.lastAccessTime = null
  this.sd = null
  this.parameters = null
if( args != null ){  if (null != args.values)
  this.values = args.values
  if (null != args.dbName)
  this.dbName = args.dbName
  if (null != args.tableName)
  this.tableName = args.tableName
  if (null != args.createTime)
  this.createTime = args.createTime
  if (null != args.lastAccessTime)
  this.lastAccessTime = args.lastAccessTime
  if (null != args.sd)
  this.sd = args.sd
  if (null != args.parameters)
  this.parameters = args.parameters
}}
Partition.prototype = {}
Partition.prototype.read = function(input){ 
  var ret = input.readStructBegin()
  while (1) 
  {
    var ret = input.readFieldBegin()
    var fname = ret.fname
    var ftype = ret.ftype
    var fid   = ret.fid
    if (ftype == Thrift.Type.STOP) 
      break
    switch(fid)
    {
      case 1:      if (ftype == Thrift.Type.LIST) {
        {
          var _size62 = 0
          var rtmp3
          this.values = []
          var _etype65 = 0
          rtmp3 = input.readListBegin()
          _etype65 = rtmp3.etype
          _size62 = rtmp3.size
          for (var _i66 = 0; _i66 < _size62; ++_i66)
          {
            var elem67 = null
            elem67 = input.readString()
            this.values.push(elem67)
          }
          input.readListEnd()
        }
      } else {
        input.skip(ftype)
      }
      break
      case 2:      if (ftype == Thrift.Type.STRING) {
        this.dbName = input.readString()
      } else {
        input.skip(ftype)
      }
      break
      case 3:      if (ftype == Thrift.Type.STRING) {
        this.tableName = input.readString()
      } else {
        input.skip(ftype)
      }
      break
      case 4:      if (ftype == Thrift.Type.I32) {
        this.createTime = input.readI32()
      } else {
        input.skip(ftype)
      }
      break
      case 5:      if (ftype == Thrift.Type.I32) {
        this.lastAccessTime = input.readI32()
      } else {
        input.skip(ftype)
      }
      break
      case 6:      if (ftype == Thrift.Type.STRUCT) {
        this.sd = new ttypes.StorageDescriptor()
        this.sd.read(input)
      } else {
        input.skip(ftype)
      }
      break
      case 7:      if (ftype == Thrift.Type.MAP) {
        {
          var _size68 = 0
          var rtmp3
          this.parameters = {}
          var _ktype69 = 0
          var _vtype70 = 0
          rtmp3 = input.readMapBegin()
          _ktype69= rtmp3.ktype
          _vtype70= rtmp3.vtype
          _size68= rtmp3.size
          for (var _i72 = 0; _i72 < _size68; ++_i72)
          {
            key73 = null
            val74 = null
            key73 = input.readString()
            val74 = input.readString()
            this.parameters[key73] = val74
          }
          input.readMapEnd()
        }
      } else {
        input.skip(ftype)
      }
      break
      default:
        input.skip(ftype)
    }
    input.readFieldEnd()
  }
  input.readStructEnd()
  return
}

Partition.prototype.write = function(output){ 
  output.writeStructBegin('Partition')
  if (null != this.values) {
    output.writeFieldBegin('values', Thrift.Type.LIST, 1)
    {
      output.writeListBegin(Thrift.Type.STRING, this.values.length)
      {
        for(var iter75 in this.values)
        {
          if (this.values.hasOwnProperty(iter75))
          {
            iter75=this.values[iter75]
            output.writeString(iter75)
          }
        }
      }
      output.writeListEnd()
    }
    output.writeFieldEnd()
  }
  if (null != this.dbName) {
    output.writeFieldBegin('dbName', Thrift.Type.STRING, 2)
    output.writeString(this.dbName)
    output.writeFieldEnd()
  }
  if (null != this.tableName) {
    output.writeFieldBegin('tableName', Thrift.Type.STRING, 3)
    output.writeString(this.tableName)
    output.writeFieldEnd()
  }
  if (null != this.createTime) {
    output.writeFieldBegin('createTime', Thrift.Type.I32, 4)
    output.writeI32(this.createTime)
    output.writeFieldEnd()
  }
  if (null != this.lastAccessTime) {
    output.writeFieldBegin('lastAccessTime', Thrift.Type.I32, 5)
    output.writeI32(this.lastAccessTime)
    output.writeFieldEnd()
  }
  if (null != this.sd) {
    output.writeFieldBegin('sd', Thrift.Type.STRUCT, 6)
    this.sd.write(output)
    output.writeFieldEnd()
  }
  if (null != this.parameters) {
    output.writeFieldBegin('parameters', Thrift.Type.MAP, 7)
    {
      output.writeMapBegin(Thrift.Type.STRING, Thrift.Type.STRING, Thrift.objectLength(this.parameters))
      {
        for(var kiter76 in this.parameters)        {
          if (this.parameters.hasOwnProperty(kiter76))
          {
            var viter77 = this.parameters[kiter76]
            output.writeString(kiter76)
            output.writeString(viter77)
          }
        }
      }
      output.writeMapEnd()
    }
    output.writeFieldEnd()
  }
  output.writeFieldStop()
  output.writeStructEnd()
  return
}

var Index = module.exports.Index = function(args){
  this.indexName = null
  this.indexType = null
  this.tableName = null
  this.dbName = null
  this.colNames = null
  this.partName = null
if( args != null ){  if (null != args.indexName)
  this.indexName = args.indexName
  if (null != args.indexType)
  this.indexType = args.indexType
  if (null != args.tableName)
  this.tableName = args.tableName
  if (null != args.dbName)
  this.dbName = args.dbName
  if (null != args.colNames)
  this.colNames = args.colNames
  if (null != args.partName)
  this.partName = args.partName
}}
Index.prototype = {}
Index.prototype.read = function(input){ 
  var ret = input.readStructBegin()
  while (1) 
  {
    var ret = input.readFieldBegin()
    var fname = ret.fname
    var ftype = ret.ftype
    var fid   = ret.fid
    if (ftype == Thrift.Type.STOP) 
      break
    switch(fid)
    {
      case 1:      if (ftype == Thrift.Type.STRING) {
        this.indexName = input.readString()
      } else {
        input.skip(ftype)
      }
      break
      case 2:      if (ftype == Thrift.Type.I32) {
        this.indexType = input.readI32()
      } else {
        input.skip(ftype)
      }
      break
      case 3:      if (ftype == Thrift.Type.STRING) {
        this.tableName = input.readString()
      } else {
        input.skip(ftype)
      }
      break
      case 4:      if (ftype == Thrift.Type.STRING) {
        this.dbName = input.readString()
      } else {
        input.skip(ftype)
      }
      break
      case 5:      if (ftype == Thrift.Type.LIST) {
        {
          var _size78 = 0
          var rtmp3
          this.colNames = []
          var _etype81 = 0
          rtmp3 = input.readListBegin()
          _etype81 = rtmp3.etype
          _size78 = rtmp3.size
          for (var _i82 = 0; _i82 < _size78; ++_i82)
          {
            var elem83 = null
            elem83 = input.readString()
            this.colNames.push(elem83)
          }
          input.readListEnd()
        }
      } else {
        input.skip(ftype)
      }
      break
      case 6:      if (ftype == Thrift.Type.STRING) {
        this.partName = input.readString()
      } else {
        input.skip(ftype)
      }
      break
      default:
        input.skip(ftype)
    }
    input.readFieldEnd()
  }
  input.readStructEnd()
  return
}

Index.prototype.write = function(output){ 
  output.writeStructBegin('Index')
  if (null != this.indexName) {
    output.writeFieldBegin('indexName', Thrift.Type.STRING, 1)
    output.writeString(this.indexName)
    output.writeFieldEnd()
  }
  if (null != this.indexType) {
    output.writeFieldBegin('indexType', Thrift.Type.I32, 2)
    output.writeI32(this.indexType)
    output.writeFieldEnd()
  }
  if (null != this.tableName) {
    output.writeFieldBegin('tableName', Thrift.Type.STRING, 3)
    output.writeString(this.tableName)
    output.writeFieldEnd()
  }
  if (null != this.dbName) {
    output.writeFieldBegin('dbName', Thrift.Type.STRING, 4)
    output.writeString(this.dbName)
    output.writeFieldEnd()
  }
  if (null != this.colNames) {
    output.writeFieldBegin('colNames', Thrift.Type.LIST, 5)
    {
      output.writeListBegin(Thrift.Type.STRING, this.colNames.length)
      {
        for(var iter84 in this.colNames)
        {
          if (this.colNames.hasOwnProperty(iter84))
          {
            iter84=this.colNames[iter84]
            output.writeString(iter84)
          }
        }
      }
      output.writeListEnd()
    }
    output.writeFieldEnd()
  }
  if (null != this.partName) {
    output.writeFieldBegin('partName', Thrift.Type.STRING, 6)
    output.writeString(this.partName)
    output.writeFieldEnd()
  }
  output.writeFieldStop()
  output.writeStructEnd()
  return
}

var Schema = module.exports.Schema = function(args){
  this.fieldSchemas = null
  this.properties = null
if( args != null ){  if (null != args.fieldSchemas)
  this.fieldSchemas = args.fieldSchemas
  if (null != args.properties)
  this.properties = args.properties
}}
Schema.prototype = {}
Schema.prototype.read = function(input){ 
  var ret = input.readStructBegin()
  while (1) 
  {
    var ret = input.readFieldBegin()
    var fname = ret.fname
    var ftype = ret.ftype
    var fid   = ret.fid
    if (ftype == Thrift.Type.STOP) 
      break
    switch(fid)
    {
      case 1:      if (ftype == Thrift.Type.LIST) {
        {
          var _size85 = 0
          var rtmp3
          this.fieldSchemas = []
          var _etype88 = 0
          rtmp3 = input.readListBegin()
          _etype88 = rtmp3.etype
          _size85 = rtmp3.size
          for (var _i89 = 0; _i89 < _size85; ++_i89)
          {
            var elem90 = null
            elem90 = new ttypes.FieldSchema()
            elem90.read(input)
            this.fieldSchemas.push(elem90)
          }
          input.readListEnd()
        }
      } else {
        input.skip(ftype)
      }
      break
      case 2:      if (ftype == Thrift.Type.MAP) {
        {
          var _size91 = 0
          var rtmp3
          this.properties = {}
          var _ktype92 = 0
          var _vtype93 = 0
          rtmp3 = input.readMapBegin()
          _ktype92= rtmp3.ktype
          _vtype93= rtmp3.vtype
          _size91= rtmp3.size
          for (var _i95 = 0; _i95 < _size91; ++_i95)
          {
            key96 = null
            val97 = null
            key96 = input.readString()
            val97 = input.readString()
            this.properties[key96] = val97
          }
          input.readMapEnd()
        }
      } else {
        input.skip(ftype)
      }
      break
      default:
        input.skip(ftype)
    }
    input.readFieldEnd()
  }
  input.readStructEnd()
  return
}

Schema.prototype.write = function(output){ 
  output.writeStructBegin('Schema')
  if (null != this.fieldSchemas) {
    output.writeFieldBegin('fieldSchemas', Thrift.Type.LIST, 1)
    {
      output.writeListBegin(Thrift.Type.STRUCT, this.fieldSchemas.length)
      {
        for(var iter98 in this.fieldSchemas)
        {
          if (this.fieldSchemas.hasOwnProperty(iter98))
          {
            iter98=this.fieldSchemas[iter98]
            iter98.write(output)
          }
        }
      }
      output.writeListEnd()
    }
    output.writeFieldEnd()
  }
  if (null != this.properties) {
    output.writeFieldBegin('properties', Thrift.Type.MAP, 2)
    {
      output.writeMapBegin(Thrift.Type.STRING, Thrift.Type.STRING, Thrift.objectLength(this.properties))
      {
        for(var kiter99 in this.properties)        {
          if (this.properties.hasOwnProperty(kiter99))
          {
            var viter100 = this.properties[kiter99]
            output.writeString(kiter99)
            output.writeString(viter100)
          }
        }
      }
      output.writeMapEnd()
    }
    output.writeFieldEnd()
  }
  output.writeFieldStop()
  output.writeStructEnd()
  return
}

var MetaException = module.exports.MetaException = function(args){
  Thrift.TException.call(this, "MetaException")
  this.name = "MetaException"
  this.message = null
if( args != null ){  if (null != args.message)
  this.message = args.message
}}
Thrift.inherits(MetaException, Thrift.TException)
MetaException.prototype.read = function(input){ 
  var ret = input.readStructBegin()
  while (1) 
  {
    var ret = input.readFieldBegin()
    var fname = ret.fname
    var ftype = ret.ftype
    var fid   = ret.fid
    if (ftype == Thrift.Type.STOP) 
      break
    switch(fid)
    {
      case 1:      if (ftype == Thrift.Type.STRING) {
        this.message = input.readString()
      } else {
        input.skip(ftype)
      }
      break
      default:
        input.skip(ftype)
    }
    input.readFieldEnd()
  }
  input.readStructEnd()
  return
}

MetaException.prototype.write = function(output){ 
  output.writeStructBegin('MetaException')
  if (null != this.message) {
    output.writeFieldBegin('message', Thrift.Type.STRING, 1)
    output.writeString(this.message)
    output.writeFieldEnd()
  }
  output.writeFieldStop()
  output.writeStructEnd()
  return
}

var UnknownTableException = module.exports.UnknownTableException = function(args){
  Thrift.TException.call(this, "UnknownTableException")
  this.name = "UnknownTableException"
  this.message = null
if( args != null ){  if (null != args.message)
  this.message = args.message
}}
Thrift.inherits(UnknownTableException, Thrift.TException)
UnknownTableException.prototype.read = function(input){ 
  var ret = input.readStructBegin()
  while (1) 
  {
    var ret = input.readFieldBegin()
    var fname = ret.fname
    var ftype = ret.ftype
    var fid   = ret.fid
    if (ftype == Thrift.Type.STOP) 
      break
    switch(fid)
    {
      case 1:      if (ftype == Thrift.Type.STRING) {
        this.message = input.readString()
      } else {
        input.skip(ftype)
      }
      break
      default:
        input.skip(ftype)
    }
    input.readFieldEnd()
  }
  input.readStructEnd()
  return
}

UnknownTableException.prototype.write = function(output){ 
  output.writeStructBegin('UnknownTableException')
  if (null != this.message) {
    output.writeFieldBegin('message', Thrift.Type.STRING, 1)
    output.writeString(this.message)
    output.writeFieldEnd()
  }
  output.writeFieldStop()
  output.writeStructEnd()
  return
}

var UnknownDBException = module.exports.UnknownDBException = function(args){
  Thrift.TException.call(this, "UnknownDBException")
  this.name = "UnknownDBException"
  this.message = null
if( args != null ){  if (null != args.message)
  this.message = args.message
}}
Thrift.inherits(UnknownDBException, Thrift.TException)
UnknownDBException.prototype.read = function(input){ 
  var ret = input.readStructBegin()
  while (1) 
  {
    var ret = input.readFieldBegin()
    var fname = ret.fname
    var ftype = ret.ftype
    var fid   = ret.fid
    if (ftype == Thrift.Type.STOP) 
      break
    switch(fid)
    {
      case 1:      if (ftype == Thrift.Type.STRING) {
        this.message = input.readString()
      } else {
        input.skip(ftype)
      }
      break
      default:
        input.skip(ftype)
    }
    input.readFieldEnd()
  }
  input.readStructEnd()
  return
}

UnknownDBException.prototype.write = function(output){ 
  output.writeStructBegin('UnknownDBException')
  if (null != this.message) {
    output.writeFieldBegin('message', Thrift.Type.STRING, 1)
    output.writeString(this.message)
    output.writeFieldEnd()
  }
  output.writeFieldStop()
  output.writeStructEnd()
  return
}

var AlreadyExistsException = module.exports.AlreadyExistsException = function(args){
  Thrift.TException.call(this, "AlreadyExistsException")
  this.name = "AlreadyExistsException"
  this.message = null
if( args != null ){  if (null != args.message)
  this.message = args.message
}}
Thrift.inherits(AlreadyExistsException, Thrift.TException)
AlreadyExistsException.prototype.read = function(input){ 
  var ret = input.readStructBegin()
  while (1) 
  {
    var ret = input.readFieldBegin()
    var fname = ret.fname
    var ftype = ret.ftype
    var fid   = ret.fid
    if (ftype == Thrift.Type.STOP) 
      break
    switch(fid)
    {
      case 1:      if (ftype == Thrift.Type.STRING) {
        this.message = input.readString()
      } else {
        input.skip(ftype)
      }
      break
      default:
        input.skip(ftype)
    }
    input.readFieldEnd()
  }
  input.readStructEnd()
  return
}

AlreadyExistsException.prototype.write = function(output){ 
  output.writeStructBegin('AlreadyExistsException')
  if (null != this.message) {
    output.writeFieldBegin('message', Thrift.Type.STRING, 1)
    output.writeString(this.message)
    output.writeFieldEnd()
  }
  output.writeFieldStop()
  output.writeStructEnd()
  return
}

var InvalidObjectException = module.exports.InvalidObjectException = function(args){
  Thrift.TException.call(this, "InvalidObjectException")
  this.name = "InvalidObjectException"
  this.message = null
if( args != null ){  if (null != args.message)
  this.message = args.message
}}
Thrift.inherits(InvalidObjectException, Thrift.TException)
InvalidObjectException.prototype.read = function(input){ 
  var ret = input.readStructBegin()
  while (1) 
  {
    var ret = input.readFieldBegin()
    var fname = ret.fname
    var ftype = ret.ftype
    var fid   = ret.fid
    if (ftype == Thrift.Type.STOP) 
      break
    switch(fid)
    {
      case 1:      if (ftype == Thrift.Type.STRING) {
        this.message = input.readString()
      } else {
        input.skip(ftype)
      }
      break
      default:
        input.skip(ftype)
    }
    input.readFieldEnd()
  }
  input.readStructEnd()
  return
}

InvalidObjectException.prototype.write = function(output){ 
  output.writeStructBegin('InvalidObjectException')
  if (null != this.message) {
    output.writeFieldBegin('message', Thrift.Type.STRING, 1)
    output.writeString(this.message)
    output.writeFieldEnd()
  }
  output.writeFieldStop()
  output.writeStructEnd()
  return
}

var NoSuchObjectException = module.exports.NoSuchObjectException = function(args){
  Thrift.TException.call(this, "NoSuchObjectException")
  this.name = "NoSuchObjectException"
  this.message = null
if( args != null ){  if (null != args.message)
  this.message = args.message
}}
Thrift.inherits(NoSuchObjectException, Thrift.TException)
NoSuchObjectException.prototype.read = function(input){ 
  var ret = input.readStructBegin()
  while (1) 
  {
    var ret = input.readFieldBegin()
    var fname = ret.fname
    var ftype = ret.ftype
    var fid   = ret.fid
    if (ftype == Thrift.Type.STOP) 
      break
    switch(fid)
    {
      case 1:      if (ftype == Thrift.Type.STRING) {
        this.message = input.readString()
      } else {
        input.skip(ftype)
      }
      break
      default:
        input.skip(ftype)
    }
    input.readFieldEnd()
  }
  input.readStructEnd()
  return
}

NoSuchObjectException.prototype.write = function(output){ 
  output.writeStructBegin('NoSuchObjectException')
  if (null != this.message) {
    output.writeFieldBegin('message', Thrift.Type.STRING, 1)
    output.writeString(this.message)
    output.writeFieldEnd()
  }
  output.writeFieldStop()
  output.writeStructEnd()
  return
}

var IndexAlreadyExistsException = module.exports.IndexAlreadyExistsException = function(args){
  Thrift.TException.call(this, "IndexAlreadyExistsException")
  this.name = "IndexAlreadyExistsException"
  this.message = null
if( args != null ){  if (null != args.message)
  this.message = args.message
}}
Thrift.inherits(IndexAlreadyExistsException, Thrift.TException)
IndexAlreadyExistsException.prototype.read = function(input){ 
  var ret = input.readStructBegin()
  while (1) 
  {
    var ret = input.readFieldBegin()
    var fname = ret.fname
    var ftype = ret.ftype
    var fid   = ret.fid
    if (ftype == Thrift.Type.STOP) 
      break
    switch(fid)
    {
      case 1:      if (ftype == Thrift.Type.STRING) {
        this.message = input.readString()
      } else {
        input.skip(ftype)
      }
      break
      default:
        input.skip(ftype)
    }
    input.readFieldEnd()
  }
  input.readStructEnd()
  return
}

IndexAlreadyExistsException.prototype.write = function(output){ 
  output.writeStructBegin('IndexAlreadyExistsException')
  if (null != this.message) {
    output.writeFieldBegin('message', Thrift.Type.STRING, 1)
    output.writeString(this.message)
    output.writeFieldEnd()
  }
  output.writeFieldStop()
  output.writeStructEnd()
  return
}

var InvalidOperationException = module.exports.InvalidOperationException = function(args){
  Thrift.TException.call(this, "InvalidOperationException")
  this.name = "InvalidOperationException"
  this.message = null
if( args != null ){  if (null != args.message)
  this.message = args.message
}}
Thrift.inherits(InvalidOperationException, Thrift.TException)
InvalidOperationException.prototype.read = function(input){ 
  var ret = input.readStructBegin()
  while (1) 
  {
    var ret = input.readFieldBegin()
    var fname = ret.fname
    var ftype = ret.ftype
    var fid   = ret.fid
    if (ftype == Thrift.Type.STOP) 
      break
    switch(fid)
    {
      case 1:      if (ftype == Thrift.Type.STRING) {
        this.message = input.readString()
      } else {
        input.skip(ftype)
      }
      break
      default:
        input.skip(ftype)
    }
    input.readFieldEnd()
  }
  input.readStructEnd()
  return
}

InvalidOperationException.prototype.write = function(output){ 
  output.writeStructBegin('InvalidOperationException')
  if (null != this.message) {
    output.writeFieldBegin('message', Thrift.Type.STRING, 1)
    output.writeString(this.message)
    output.writeFieldEnd()
  }
  output.writeFieldStop()
  output.writeStructEnd()
  return
}

var ConfigValSecurityException = module.exports.ConfigValSecurityException = function(args){
  Thrift.TException.call(this, "ConfigValSecurityException")
  this.name = "ConfigValSecurityException"
  this.message = null
if( args != null ){  if (null != args.message)
  this.message = args.message
}}
Thrift.inherits(ConfigValSecurityException, Thrift.TException)
ConfigValSecurityException.prototype.read = function(input){ 
  var ret = input.readStructBegin()
  while (1) 
  {
    var ret = input.readFieldBegin()
    var fname = ret.fname
    var ftype = ret.ftype
    var fid   = ret.fid
    if (ftype == Thrift.Type.STOP) 
      break
    switch(fid)
    {
      case 1:      if (ftype == Thrift.Type.STRING) {
        this.message = input.readString()
      } else {
        input.skip(ftype)
      }
      break
      default:
        input.skip(ftype)
    }
    input.readFieldEnd()
  }
  input.readStructEnd()
  return
}

ConfigValSecurityException.prototype.write = function(output){ 
  output.writeStructBegin('ConfigValSecurityException')
  if (null != this.message) {
    output.writeFieldBegin('message', Thrift.Type.STRING, 1)
    output.writeString(this.message)
    output.writeFieldEnd()
  }
  output.writeFieldStop()
  output.writeStructEnd()
  return
}

